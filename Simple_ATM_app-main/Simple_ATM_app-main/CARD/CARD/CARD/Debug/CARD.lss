
CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00000c8e  00000d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080012c  0080012c  00000dee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c8  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000deb  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b80  00000000  00000000  00004987  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  00006508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000114b  00000000  00000000  00006d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000218c  00000000  00000000  00007ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000a05f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_1>
   8:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_2>
   c:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_15>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 32       	cpi	r26, 0x2C	; 44
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e2       	ldi	r26, 0x2C	; 44
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 35       	cpi	r26, 0x58	; 88
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../SERVICE/CARD_interface.h"

int main(void)
{

	CARD_init();
  92:	0e 94 cf 04 	call	0x99e	; 0x99e <CARD_init>

	
	while(1)
	{
		CARD_voidProgram() ; 
  96:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CARD_voidProgram>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <EEPROM_voidInit>:
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
	}
	return u8_ErrorInArg ; 
}
  9c:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_masterInit>
  a0:	08 95       	ret

000000a2 <EEPROM_u8WriteNeededPartBlock>:
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	e2 2f       	mov	r30, r18
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e6 0f       	add	r30, r22
  b4:	f1 1d       	adc	r31, r1
  b6:	e0 34       	cpi	r30, 0x40	; 64
  b8:	f1 05       	cpc	r31, r1
  ba:	a4 f5       	brge	.+104    	; 0x124 <EEPROM_u8WriteNeededPartBlock+0x82>
  bc:	81 15       	cp	r24, r1
  be:	32 e0       	ldi	r19, 0x02	; 2
  c0:	93 07       	cpc	r25, r19
  c2:	90 f5       	brcc	.+100    	; 0x128 <EEPROM_u8WriteNeededPartBlock+0x86>
  c4:	41 15       	cp	r20, r1
  c6:	51 05       	cpc	r21, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <EEPROM_u8WriteNeededPartBlock+0x8a>
  ca:	d2 2f       	mov	r29, r18
  cc:	8a 01       	movw	r16, r20
  ce:	c6 2f       	mov	r28, r22
  d0:	7c 01       	movw	r14, r24
  d2:	0e 94 31 02 	call	0x462	; 0x462 <I2C_masterStart>
  d6:	80 e5       	ldi	r24, 0x50	; 80
  d8:	0e 94 46 02 	call	0x48c	; 0x48c <I2C_masterWriteToAddress>
  dc:	c7 01       	movw	r24, r14
  de:	96 95       	lsr	r25
  e0:	87 95       	ror	r24
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
  ea:	8e 2d       	mov	r24, r14
  ec:	82 95       	swap	r24
  ee:	88 0f       	add	r24, r24
  f0:	88 0f       	add	r24, r24
  f2:	80 7c       	andi	r24, 0xC0	; 192
  f4:	8c 2b       	or	r24, r28
  f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	0d c0       	rjmp	.+26     	; 0x118 <EEPROM_u8WriteNeededPartBlock+0x76>
  fe:	f8 01       	movw	r30, r16
 100:	ec 0f       	add	r30, r28
 102:	f1 1d       	adc	r31, r1
 104:	80 81       	ld	r24, Z
 106:	88 23       	and	r24, r24
 108:	21 f0       	breq	.+8      	; 0x112 <EEPROM_u8WriteNeededPartBlock+0x70>
 10a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
 10e:	cf 5f       	subi	r28, 0xFF	; 255
 110:	03 c0       	rjmp	.+6      	; 0x118 <EEPROM_u8WriteNeededPartBlock+0x76>
 112:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
 116:	02 c0       	rjmp	.+4      	; 0x11c <EEPROM_u8WriteNeededPartBlock+0x7a>
 118:	cd 17       	cp	r28, r29
 11a:	88 f3       	brcs	.-30     	; 0xfe <EEPROM_u8WriteNeededPartBlock+0x5c>
 11c:	0e 94 9f 02 	call	0x53e	; 0x53e <I2C_masterStop>
 120:	87 e9       	ldi	r24, 0x97	; 151
 122:	05 c0       	rjmp	.+10     	; 0x12e <EEPROM_u8WriteNeededPartBlock+0x8c>
 124:	86 e9       	ldi	r24, 0x96	; 150
 126:	03 c0       	rjmp	.+6      	; 0x12e <EEPROM_u8WriteNeededPartBlock+0x8c>
 128:	86 e9       	ldi	r24, 0x96	; 150
 12a:	01 c0       	rjmp	.+2      	; 0x12e <EEPROM_u8WriteNeededPartBlock+0x8c>
 12c:	86 e9       	ldi	r24, 0x96	; 150
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <EEPROM_u8ReadNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
	uint8_t u8_dummy = u8_EEPROM_INTIAL_VAL;
	
	if(((u8_EEPROM_MAX_BYTE_ADDRESS-u8_ByteNum)>=u8_ArrSize)  && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && pu8_ArrWantedToRead!=NULL_POINTER )
 148:	e0 e4       	ldi	r30, 0x40	; 64
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e6 1b       	sub	r30, r22
 14e:	f1 09       	sbc	r31, r1
 150:	a2 2f       	mov	r26, r18
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	ea 17       	cp	r30, r26
 156:	fb 07       	cpc	r31, r27
 158:	bc f1       	brlt	.+110    	; 0x1c8 <EEPROM_u8ReadNeededPartBlock+0x8c>
 15a:	81 15       	cp	r24, r1
 15c:	32 e0       	ldi	r19, 0x02	; 2
 15e:	93 07       	cpc	r25, r19
 160:	a8 f5       	brcc	.+106    	; 0x1cc <EEPROM_u8ReadNeededPartBlock+0x90>
 162:	41 15       	cp	r20, r1
 164:	51 05       	cpc	r21, r1
 166:	a1 f1       	breq	.+104    	; 0x1d0 <EEPROM_u8ReadNeededPartBlock+0x94>
 168:	d2 2f       	mov	r29, r18
 16a:	8a 01       	movw	r16, r20
 16c:	c6 2f       	mov	r28, r22
 16e:	7c 01       	movw	r14, r24
	{
		
		I2C_masterStart();
 170:	0e 94 31 02 	call	0x462	; 0x462 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD); 
 174:	80 e5       	ldi	r24, 0x50	; 80
 176:	0e 94 46 02 	call	0x48c	; 0x48c <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
 17a:	c7 01       	movw	r24, r14
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd) ;
 184:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
		u8_PageAdd  = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
 188:	8e 2d       	mov	r24, r14
 18a:	82 95       	swap	r24
 18c:	88 0f       	add	r24, r24
 18e:	88 0f       	add	r24, r24
 190:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum |= u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
 192:	8c 2b       	or	r24, r28
 194:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_masterWriteData>
		I2C_repeatedStart();
 198:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_repeatedStart>
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
 19c:	80 e5       	ldi	r24, 0x50	; 80
 19e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <I2C_masterReadFromAddress>
		for(u8_ArrIndex = u8_EEPROM_INTIAL_VAL; u8_ArrIndex < u8_ArrSize; u8_ArrIndex++)
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <EEPROM_u8ReadNeededPartBlock+0x7c>
		{
			
			pu8_ArrWantedToRead[u8_ArrIndex] = I2C_masterReadData();
 1a6:	0e 94 89 02 	call	0x512	; 0x512 <I2C_masterReadData>
 1aa:	f8 01       	movw	r30, r16
 1ac:	ec 0f       	add	r30, r28
 1ae:	f1 1d       	adc	r31, r1
 1b0:	80 83       	st	Z, r24
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
 1b2:	88 23       	and	r24, r24
 1b4:	19 f0       	breq	.+6      	; 0x1bc <EEPROM_u8ReadNeededPartBlock+0x80>
		u8_PageAdd  = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum |= u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
		I2C_repeatedStart();
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
		for(u8_ArrIndex = u8_EEPROM_INTIAL_VAL; u8_ArrIndex < u8_ArrSize; u8_ArrIndex++)
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
 1b8:	cd 17       	cp	r28, r29
 1ba:	a8 f3       	brcs	.-22     	; 0x1a6 <EEPROM_u8ReadNeededPartBlock+0x6a>
			{
				
				break;
			}
		}
		u8_dummy = I2C_masterReadFinalData();
 1bc:	0e 94 94 02 	call	0x528	; 0x528 <I2C_masterReadFinalData>
		
		I2C_masterStop();
 1c0:	0e 94 9f 02 	call	0x53e	; 0x53e <I2C_masterStop>

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
 1c4:	87 e9       	ldi	r24, 0x97	; 151
				break;
			}
		}
		u8_dummy = I2C_masterReadFinalData();
		
		I2C_masterStop();
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <EEPROM_u8ReadNeededPartBlock+0x96>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
 1c8:	86 e9       	ldi	r24, 0x96	; 150
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <EEPROM_u8ReadNeededPartBlock+0x96>
 1cc:	86 e9       	ldi	r24, 0x96	; 150
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <EEPROM_u8ReadNeededPartBlock+0x96>
 1d0:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ; 
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <__vector_16>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 206:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x1>
 20a:	30 97       	sbiw	r30, 0x00	; 0
 20c:	09 f0       	breq	.+2      	; 0x210 <__vector_16+0x30>
 20e:	09 95       	icall
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <DIO_SetPinDirection>:
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	31 f1       	breq	.+76     	; 0x282 <DIO_SetPinDirection+0x50>
 236:	38 f0       	brcs	.+14     	; 0x246 <DIO_SetPinDirection+0x14>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	09 f4       	brne	.+2      	; 0x23e <DIO_SetPinDirection+0xc>
 23c:	40 c0       	rjmp	.+128    	; 0x2be <DIO_SetPinDirection+0x8c>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	09 f4       	brne	.+2      	; 0x244 <DIO_SetPinDirection+0x12>
 242:	5a c0       	rjmp	.+180    	; 0x2f8 <DIO_SetPinDirection+0xc6>
 244:	76 c0       	rjmp	.+236    	; 0x332 <DIO_SetPinDirection+0x100>
 246:	41 11       	cpse	r20, r1
 248:	0d c0       	rjmp	.+26     	; 0x264 <DIO_SetPinDirection+0x32>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinDirection+0x22>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinDirection+0x1e>
 258:	80 95       	com	r24
 25a:	9a b3       	in	r25, 0x1a	; 26
 25c:	89 23       	and	r24, r25
 25e:	8a bb       	out	0x1a, r24	; 26
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	08 95       	ret
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	09 f0       	breq	.+2      	; 0x26a <DIO_SetPinDirection+0x38>
 268:	66 c0       	rjmp	.+204    	; 0x336 <DIO_SetPinDirection+0x104>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0x42>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0x3e>
 278:	9a b3       	in	r25, 0x1a	; 26
 27a:	89 2b       	or	r24, r25
 27c:	8a bb       	out	0x1a, r24	; 26
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	08 95       	ret
 282:	41 11       	cpse	r20, r1
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <DIO_SetPinDirection+0x6e>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0x5e>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0x5a>
 294:	80 95       	com	r24
 296:	97 b3       	in	r25, 0x17	; 23
 298:	89 23       	and	r24, r25
 29a:	87 bb       	out	0x17, r24	; 23
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	08 95       	ret
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <DIO_SetPinDirection+0x74>
 2a4:	4a c0       	rjmp	.+148    	; 0x33a <DIO_SetPinDirection+0x108>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinDirection+0x7e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinDirection+0x7a>
 2b4:	97 b3       	in	r25, 0x17	; 23
 2b6:	89 2b       	or	r24, r25
 2b8:	87 bb       	out	0x17, r24	; 23
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	08 95       	ret
 2be:	41 11       	cpse	r20, r1
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <DIO_SetPinDirection+0xaa>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_SetPinDirection+0x9a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_SetPinDirection+0x96>
 2d0:	80 95       	com	r24
 2d2:	94 b3       	in	r25, 0x14	; 20
 2d4:	89 23       	and	r24, r25
 2d6:	84 bb       	out	0x14, r24	; 20
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	08 95       	ret
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	79 f5       	brne	.+94     	; 0x33e <DIO_SetPinDirection+0x10c>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_SetPinDirection+0xb8>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_SetPinDirection+0xb4>
 2ee:	94 b3       	in	r25, 0x14	; 20
 2f0:	89 2b       	or	r24, r25
 2f2:	84 bb       	out	0x14, r24	; 20
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	08 95       	ret
 2f8:	41 11       	cpse	r20, r1
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <DIO_SetPinDirection+0xe4>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_SetPinDirection+0xd4>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_SetPinDirection+0xd0>
 30a:	80 95       	com	r24
 30c:	91 b3       	in	r25, 0x11	; 17
 30e:	89 23       	and	r24, r25
 310:	81 bb       	out	0x11, r24	; 17
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	08 95       	ret
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	a1 f4       	brne	.+40     	; 0x342 <DIO_SetPinDirection+0x110>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_SetPinDirection+0xf2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_SetPinDirection+0xee>
 328:	91 b3       	in	r25, 0x11	; 17
 32a:	89 2b       	or	r24, r25
 32c:	81 bb       	out	0x11, r24	; 17
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	08 95       	ret
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	08 95       	ret
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	08 95       	ret
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	08 95       	ret
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	08 95       	ret
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	08 95       	ret

00000346 <DIO_SetPinValue>:
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	31 f1       	breq	.+76     	; 0x396 <DIO_SetPinValue+0x50>
 34a:	38 f0       	brcs	.+14     	; 0x35a <DIO_SetPinValue+0x14>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_SetPinValue+0xc>
 350:	40 c0       	rjmp	.+128    	; 0x3d2 <DIO_SetPinValue+0x8c>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_SetPinValue+0x12>
 356:	5a c0       	rjmp	.+180    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 358:	76 c0       	rjmp	.+236    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 35a:	41 11       	cpse	r20, r1
 35c:	0d c0       	rjmp	.+26     	; 0x378 <DIO_SetPinValue+0x32>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinValue+0x22>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinValue+0x1e>
 36c:	80 95       	com	r24
 36e:	9b b3       	in	r25, 0x1b	; 27
 370:	89 23       	and	r24, r25
 372:	8b bb       	out	0x1b, r24	; 27
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	08 95       	ret
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	09 f0       	breq	.+2      	; 0x37e <DIO_SetPinValue+0x38>
 37c:	66 c0       	rjmp	.+204    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPinValue+0x42>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPinValue+0x3e>
 38c:	9b b3       	in	r25, 0x1b	; 27
 38e:	89 2b       	or	r24, r25
 390:	8b bb       	out	0x1b, r24	; 27
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	08 95       	ret
 396:	41 11       	cpse	r20, r1
 398:	0d c0       	rjmp	.+26     	; 0x3b4 <DIO_SetPinValue+0x6e>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinValue+0x5e>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinValue+0x5a>
 3a8:	80 95       	com	r24
 3aa:	98 b3       	in	r25, 0x18	; 24
 3ac:	89 23       	and	r24, r25
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	08 95       	ret
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	09 f0       	breq	.+2      	; 0x3ba <DIO_SetPinValue+0x74>
 3b8:	4a c0       	rjmp	.+148    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinValue+0x7e>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinValue+0x7a>
 3c8:	98 b3       	in	r25, 0x18	; 24
 3ca:	89 2b       	or	r24, r25
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	08 95       	ret
 3d2:	41 11       	cpse	r20, r1
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <DIO_SetPinValue+0xaa>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinValue+0x9a>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinValue+0x96>
 3e4:	80 95       	com	r24
 3e6:	95 b3       	in	r25, 0x15	; 21
 3e8:	89 23       	and	r24, r25
 3ea:	85 bb       	out	0x15, r24	; 21
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	08 95       	ret
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	79 f5       	brne	.+94     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_SetPinValue+0xb8>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_SetPinValue+0xb4>
 402:	95 b3       	in	r25, 0x15	; 21
 404:	89 2b       	or	r24, r25
 406:	85 bb       	out	0x15, r24	; 21
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	08 95       	ret
 40c:	41 11       	cpse	r20, r1
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	92 b3       	in	r25, 0x12	; 18
 422:	89 23       	and	r24, r25
 424:	82 bb       	out	0x12, r24	; 18
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	08 95       	ret
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	a1 f4       	brne	.+40     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	92 b3       	in	r25, 0x12	; 18
 43e:	89 2b       	or	r24, r25
 440:	82 bb       	out	0x12, r24	; 18
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	08 95       	ret
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	08 95       	ret
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	08 95       	ret
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	08 95       	ret
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	08 95       	ret
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	08 95       	ret

0000045a <I2C_masterInit>:
/*                                       Master Transmit/Receive APIs Implementation                                  */
/**********************************************************************************************************************/
                                                                                                                      //
void I2C_masterInit(void){                                                                                            //
	                                     /************************************************/                           //
	Ru8_TWBR = BIT_RATE;                     /*  1 - Setting Bit Rate                        */                           //
 45a:	86 e4       	ldi	r24, 0x46	; 70
 45c:	80 b9       	out	0x00, r24	; 0
	#if PRESCALER == PRESCALER_1         /*                                              */                           //
	Ru8_TWSR = (0 << TWPS1) | (0 << TWPS0);  /*  2 - Prescaler Value Of 1                    */                           //
 45e:	11 b8       	out	0x01, r1	; 1
 460:	08 95       	ret

00000462 <I2C_masterStart>:
	#endif                                                                                                            //
}                                                                                                                     //
                                                                                                                      //
void I2C_masterStart(void){                                                                                           //
	
	Ru8_TWCR = 0;                                                 /*****************************************************************/
 462:	16 be       	out	0x36, r1	; 54
	Ru8_TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C*/
 464:	84 ea       	ldi	r24, 0xA4	; 164
 466:	86 bf       	out	0x36, r24	; 54
	while(!(Ru8_TWCR & (1 << TWINT)));                   /* 2 - Stay here until start condition has been transmitted      */
 468:	06 b6       	in	r0, 0x36	; 54
 46a:	07 fe       	sbrs	r0, 7
 46c:	fd cf       	rjmp	.-6      	; 0x468 <I2C_masterStart+0x6>
	while( (Ru8_TWSR & 0xF8) != MASTER_START);           /* 3 - Check status register that start condition has been sent  */
 46e:	81 b1       	in	r24, 0x01	; 1
 470:	88 7f       	andi	r24, 0xF8	; 248
 472:	88 30       	cpi	r24, 0x08	; 8
 474:	e1 f7       	brne	.-8      	; 0x46e <I2C_masterStart+0xc>
}                                                    /*****************************************************************/
 476:	08 95       	ret

00000478 <I2C_repeatedStart>:
                                                                                                                       ////////
void I2C_repeatedStart(void){                                                                                          ////////
	                                                /*************************************************************************/
	Ru8_TWCR= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C        */
 478:	84 ea       	ldi	r24, 0xA4	; 164
 47a:	86 bf       	out	0x36, r24	; 54
	while(!(Ru8_TWCR & (1 << TWINT)));                  /* 2 - Stay here until start condition has been transmitted              */
 47c:	06 b6       	in	r0, 0x36	; 54
 47e:	07 fe       	sbrs	r0, 7
 480:	fd cf       	rjmp	.-6      	; 0x47c <I2C_repeatedStart+0x4>
	while( (Ru8_TWSR & 0xF8) != MASTER_REPEATED_START); /* 3 - Check status register that repeated start condition has been sent */
 482:	81 b1       	in	r24, 0x01	; 1
 484:	88 7f       	andi	r24, 0xF8	; 248
 486:	80 31       	cpi	r24, 0x10	; 16
 488:	e1 f7       	brne	.-8      	; 0x482 <I2C_repeatedStart+0xa>
}                                                   /*************************************************************************//////////////////////////////
 48a:	08 95       	ret

0000048c <I2C_masterWriteToAddress>:
                                                                                                                              //////////////////////////////
void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
 48c:	cf 93       	push	r28
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
 48e:	c8 2f       	mov	r28, r24
 490:	cc 0f       	add	r28, r28
 492:	c3 b9       	out	0x03, r28	; 3
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
 494:	84 e8       	ldi	r24, 0x84	; 132
 496:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
 498:	06 b6       	in	r0, 0x36	; 54
 49a:	07 fe       	sbrs	r0, 7
 49c:	fd cf       	rjmp	.-6      	; 0x498 <I2C_masterWriteToAddress+0xc>
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <I2C_masterWriteToAddress+0x24>
	while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
    {

		I2C_repeatedStart();
 4a0:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_repeatedStart>
		Ru8_TWDR = (u8_slaveAddress << 1);
 4a4:	c3 b9       	out	0x03, r28	; 3
		Ru8_TWCR = (1 << TWINT) | (1 << TWEN);
 4a6:	84 e8       	ldi	r24, 0x84	; 132
 4a8:	86 bf       	out	0x36, r24	; 54
		while (!(Ru8_TWCR & (1 << TWINT)));
 4aa:	06 b6       	in	r0, 0x36	; 54
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <I2C_masterWriteToAddress+0x1e>
                                                                                                                              //////////////////////////////
void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
	while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
 4b0:	81 b1       	in	r24, 0x01	; 1
 4b2:	88 7f       	andi	r24, 0xF8	; 248
 4b4:	88 31       	cpi	r24, 0x18	; 24
 4b6:	a1 f7       	brne	.-24     	; 0x4a0 <I2C_masterWriteToAddress+0x14>
		I2C_repeatedStart();
		Ru8_TWDR = (u8_slaveAddress << 1);
		Ru8_TWCR = (1 << TWINT) | (1 << TWEN);
		while (!(Ru8_TWCR & (1 << TWINT)));
	}
}                                                             /********************************************************************************************/
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <I2C_masterReadFromAddress>:
                                                                                                                                                         ///
void I2C_masterReadFromAddress(uint8_t u8_slaveAddress){                                                                                                 ///                                                      /******************************************************************************************///
 4bc:	cf 93       	push	r28
	
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
 4be:	c8 2f       	mov	r28, r24
 4c0:	cc 0f       	add	r28, r28
 4c2:	c3 b9       	out	0x03, r28	; 3
	Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
 4c4:	83 b1       	in	r24, 0x03	; 3
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	83 b9       	out	0x03, r24	; 3
	Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
 4ca:	86 b7       	in	r24, 0x36	; 54
 4cc:	84 68       	ori	r24, 0x84	; 132
 4ce:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
 4d0:	06 b6       	in	r0, 0x36	; 54
 4d2:	07 fe       	sbrs	r0, 7
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <I2C_masterReadFromAddress+0x14>
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <I2C_masterReadFromAddress+0x34>
	while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
    {
		I2C_repeatedStart();
 4d8:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_repeatedStart>
		//I2C_masterReadFromAddress(u8_slaveAddress);
		Ru8_TWDR = (u8_slaveAddress << 1);
 4dc:	c3 b9       	out	0x03, r28	; 3
		Ru8_TWDR |= (1 << 0);
 4de:	83 b1       	in	r24, 0x03	; 3
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	83 b9       	out	0x03, r24	; 3
		Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);
 4e4:	86 b7       	in	r24, 0x36	; 54
 4e6:	84 68       	ori	r24, 0x84	; 132
 4e8:	86 bf       	out	0x36, r24	; 54
		while (!(Ru8_TWCR & (1 << TWINT))); 
 4ea:	06 b6       	in	r0, 0x36	; 54
 4ec:	07 fe       	sbrs	r0, 7
 4ee:	fd cf       	rjmp	.-6      	; 0x4ea <I2C_masterReadFromAddress+0x2e>
	
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
	Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
	Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
	while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
 4f0:	81 b1       	in	r24, 0x01	; 1
 4f2:	88 7f       	andi	r24, 0xF8	; 248
 4f4:	80 34       	cpi	r24, 0x40	; 64
 4f6:	81 f7       	brne	.-32     	; 0x4d8 <I2C_masterReadFromAddress+0x1c>
		Ru8_TWDR = (u8_slaveAddress << 1);
		Ru8_TWDR |= (1 << 0);
		Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);
		while (!(Ru8_TWCR & (1 << TWINT))); 
	}
}                                                             /******************************************************************************************///
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <I2C_masterWriteData>:
                                                                                                                                           /////////////////
void I2C_masterWriteData(uint8_t u8_data){                                                                                                 /////////////////
	                                                         /*****************************************************************************/
	Ru8_TWDR = u8_data;                                          /* 1 - Load data to be transmitted                                           */
 4fc:	83 b9       	out	0x03, r24	; 3
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                       /* 2 - Reset I2C interrupt flag and enable I2C operation                     */
 4fe:	84 e8       	ldi	r24, 0x84	; 132
 500:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                          /* 3 - Stay here until data is transmitted from master                       */
 502:	06 b6       	in	r0, 0x36	; 54
 504:	07 fe       	sbrs	r0, 7
 506:	fd cf       	rjmp	.-6      	; 0x502 <I2C_masterWriteData+0x6>
	while ( (Ru8_TWSR & 0xF8) != MASTER_WRITE_DATA_TRANSMITTED);//&& (Ru8_TWSR & 0xF8) != 0x30 ); /* 4 - Check in status register that data has been transmitted               */
 508:	81 b1       	in	r24, 0x01	; 1
 50a:	88 7f       	andi	r24, 0xF8	; 248
 50c:	88 32       	cpi	r24, 0x28	; 40
 50e:	e1 f7       	brne	.-8      	; 0x508 <I2C_masterWriteData+0xc>
}                                                            /*****************************************************************************/
 510:	08 95       	ret

00000512 <I2C_masterReadData>:
                                                                                                                                          //
uint8_t I2C_masterReadData(void){                                                                                                         //
	
                                                               /*******************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);       /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
 512:	84 ec       	ldi	r24, 0xC4	; 196
 514:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
 516:	06 b6       	in	r0, 0x36	; 54
 518:	07 fe       	sbrs	r0, 7
 51a:	fd cf       	rjmp	.-6      	; 0x516 <I2C_masterReadData+0x4>
	while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_ACK);        /* 3 - Check that data has been transmitted to master                          */
 51c:	81 b1       	in	r24, 0x01	; 1
 51e:	88 7f       	andi	r24, 0xF8	; 248
 520:	80 35       	cpi	r24, 0x50	; 80
 522:	e1 f7       	brne	.-8      	; 0x51c <I2C_masterReadData+0xa>
	return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
 524:	83 b1       	in	r24, 0x03	; 3
}                                                              /*******************************************************************************/
 526:	08 95       	ret

00000528 <I2C_masterReadFinalData>:

uint8_t I2C_masterReadFinalData(void){                                                                                                         //
	
	                                                         /*******************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                     /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
 528:	84 e8       	ldi	r24, 0x84	; 132
 52a:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
 52c:	06 b6       	in	r0, 0x36	; 54
 52e:	07 fe       	sbrs	r0, 7
 530:	fd cf       	rjmp	.-6      	; 0x52c <I2C_masterReadFinalData+0x4>
	while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_NACK);       /* 3 - Check that data has been transmitted to master                          */
 532:	81 b1       	in	r24, 0x01	; 1
 534:	88 7f       	andi	r24, 0xF8	; 248
 536:	88 35       	cpi	r24, 0x58	; 88
 538:	e1 f7       	brne	.-8      	; 0x532 <I2C_masterReadFinalData+0xa>
	return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
 53a:	83 b1       	in	r24, 0x03	; 3
}
 53c:	08 95       	ret

0000053e <I2C_masterStop>:
                                                                                                                                          //
void I2C_masterStop(void){                                                                                                                //
	                                                      /************************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); /* 1 - Reset I2C interrupt flag, enable I2C operation and transmit a stop condition */
 53e:	84 e9       	ldi	r24, 0x94	; 148
 540:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR != (1 << TWSTO)));                  /* 2 - Stay here until stop condition is successfully transmitted                   */
 542:	86 b7       	in	r24, 0x36	; 54
 544:	80 31       	cpi	r24, 0x10	; 16
 546:	e9 f3       	breq	.-6      	; 0x542 <I2C_masterStop+0x4>
}                                                         /************************************************************************************/
 548:	08 95       	ret

0000054a <External_Interrupts_Init>:
 54a:	41 15       	cp	r20, r1
 54c:	51 05       	cpc	r21, r1
 54e:	09 f4       	brne	.+2      	; 0x552 <External_Interrupts_Init+0x8>
 550:	4d c0       	rjmp	.+154    	; 0x5ec <External_Interrupts_Init+0xa2>
 552:	81 11       	cpse	r24, r1
 554:	1a c0       	rjmp	.+52     	; 0x58a <External_Interrupts_Init+0x40>
 556:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <External_Int0_Fun+0x1>
 55a:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <External_Int0_Fun>
 55e:	8b b7       	in	r24, 0x3b	; 59
 560:	80 64       	ori	r24, 0x40	; 64
 562:	8b bf       	out	0x3b, r24	; 59
 564:	62 30       	cpi	r22, 0x02	; 2
 566:	29 f4       	brne	.+10     	; 0x572 <External_Interrupts_Init+0x28>
 568:	85 b7       	in	r24, 0x35	; 53
 56a:	83 60       	ori	r24, 0x03	; 3
 56c:	85 bf       	out	0x35, r24	; 53
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret
 572:	61 30       	cpi	r22, 0x01	; 1
 574:	29 f4       	brne	.+10     	; 0x580 <External_Interrupts_Init+0x36>
 576:	85 b7       	in	r24, 0x35	; 53
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	85 bf       	out	0x35, r24	; 53
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
 580:	85 b7       	in	r24, 0x35	; 53
 582:	81 60       	ori	r24, 0x01	; 1
 584:	85 bf       	out	0x35, r24	; 53
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	d1 f4       	brne	.+52     	; 0x5c2 <External_Interrupts_Init+0x78>
 58e:	50 93 31 01 	sts	0x0131, r21	; 0x800131 <External_Int1_Fun+0x1>
 592:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <External_Int1_Fun>
 596:	8b b7       	in	r24, 0x3b	; 59
 598:	80 68       	ori	r24, 0x80	; 128
 59a:	8b bf       	out	0x3b, r24	; 59
 59c:	62 30       	cpi	r22, 0x02	; 2
 59e:	29 f4       	brne	.+10     	; 0x5aa <External_Interrupts_Init+0x60>
 5a0:	85 b7       	in	r24, 0x35	; 53
 5a2:	8c 60       	ori	r24, 0x0C	; 12
 5a4:	85 bf       	out	0x35, r24	; 53
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
 5aa:	61 30       	cpi	r22, 0x01	; 1
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <External_Interrupts_Init+0x6e>
 5ae:	85 b7       	in	r24, 0x35	; 53
 5b0:	88 60       	ori	r24, 0x08	; 8
 5b2:	85 bf       	out	0x35, r24	; 53
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	85 b7       	in	r24, 0x35	; 53
 5ba:	84 60       	ori	r24, 0x04	; 4
 5bc:	85 bf       	out	0x35, r24	; 53
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	a9 f4       	brne	.+42     	; 0x5f0 <External_Interrupts_Init+0xa6>
 5c6:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <External_Int2_Fun+0x1>
 5ca:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <External_Int2_Fun>
 5ce:	8b b7       	in	r24, 0x3b	; 59
 5d0:	80 62       	ori	r24, 0x20	; 32
 5d2:	8b bf       	out	0x3b, r24	; 59
 5d4:	62 30       	cpi	r22, 0x02	; 2
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <External_Interrupts_Init+0x98>
 5d8:	84 b7       	in	r24, 0x34	; 52
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	84 bf       	out	0x34, r24	; 52
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	08 95       	ret
 5e2:	84 b7       	in	r24, 0x34	; 52
 5e4:	8f 7b       	andi	r24, 0xBF	; 191
 5e6:	84 bf       	out	0x34, r24	; 52
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	08 95       	ret
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret

000005f4 <__vector_1>:
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
 616:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <External_Int0_Fun>
 61a:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <External_Int0_Fun+0x1>
 61e:	09 95       	icall
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <__vector_2>:
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
 664:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <External_Int1_Fun>
 668:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <External_Int1_Fun+0x1>
 66c:	09 95       	icall
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_3>:
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
 6b2:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <External_Int2_Fun>
 6b6:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <External_Int2_Fun+0x1>
 6ba:	09 95       	icall
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	bf 91       	pop	r27
 6c2:	af 91       	pop	r26
 6c4:	9f 91       	pop	r25
 6c6:	8f 91       	pop	r24
 6c8:	7f 91       	pop	r23
 6ca:	6f 91       	pop	r22
 6cc:	5f 91       	pop	r21
 6ce:	4f 91       	pop	r20
 6d0:	3f 91       	pop	r19
 6d2:	2f 91       	pop	r18
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <SPI_init>:


void SPI_init(void){
	
	#if SPI_MODE == MASTER_MODE
	DIO_SetPinDirection(PORTB,SCK,OUTPUT);
 6de:	41 e0       	ldi	r20, 0x01	; 1
 6e0:	67 e0       	ldi	r22, 0x07	; 7
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,MOSI,OUTPUT);
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	65 e0       	ldi	r22, 0x05	; 5
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SS,OUTPUT);
 6f2:	41 e0       	ldi	r20, 0x01	; 1
 6f4:	64 e0       	ldi	r22, 0x04	; 4
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB,SS,HIGH);
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	64 e0       	ldi	r22, 0x04	; 4
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPinValue>
	SPC_R |= (1 << SPE) | (1 << MSTR);
 706:	8d b1       	in	r24, 0x0d	; 13
 708:	80 65       	ori	r24, 0x50	; 80
 70a:	8d b9       	out	0x0d, r24	; 13
	#elif SCK_FREQ_PRESCALE == PRESCALER_32
	SPC_R |= (1 << SPR1) | (1 << SPI2X);
	#elif SCK_FREQ_PRESCALE == PRESCALER_64
	SPC_R |= (1 << SPR1);
	#elif SCK_FREQ_PRESCALE == PRESCALER_128
	SPC_R |= (1 << SPR1) | (1 << SPR0);
 70c:	8d b1       	in	r24, 0x0d	; 13
 70e:	83 60       	ori	r24, 0x03	; 3
 710:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	#if CLOCK_POLARITY == HIGH_WHEN_IDLE
	SPC_R |= (1 << CPOL);
	#elif CLOCK_POLARITY == LOW_WHEN_IDLE
	SPC_R &= ~(1 << CPOL);
 712:	8d b1       	in	r24, 0x0d	; 13
 714:	87 7f       	andi	r24, 0xF7	; 247
 716:	8d b9       	out	0x0d, r24	; 13
	#else
	#error "Invalid Clock Polarity Setting"
	#endif
	
	#if DATA_SAMPLING == LEADING_EDGE
	SPC_R &= ~(1 << CPHA);
 718:	8d b1       	in	r24, 0x0d	; 13
 71a:	8b 7f       	andi	r24, 0xFB	; 251
 71c:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	#if SPI_INTERRUPT == ENABLE
	SPC_R    |= (1 << SPIE);
	#elif SPI_INTERRUPT == DISABLE
	SPC_R    &=	~(1 << SPIE);
 71e:	8d b1       	in	r24, 0x0d	; 13
 720:	8f 77       	andi	r24, 0x7F	; 127
 722:	8d b9       	out	0x0d, r24	; 13
	#else
	#error "Invalid Interrupt Setting"
	#endif
	
	#if DATA_ORDER == MSB_FIRST
	SPC_R &= ~(1 << DORD);
 724:	8d b1       	in	r24, 0x0d	; 13
 726:	8f 7d       	andi	r24, 0xDF	; 223
 728:	8d b9       	out	0x0d, r24	; 13
 72a:	08 95       	ret

0000072c <SPI_tranceiver>:
	#else
	#error "Invalid Data Order Setting"
	#endif
}

uint8_t SPI_tranceiver(uint8_t u8_data){
 72c:	cf 93       	push	r28
 72e:	c8 2f       	mov	r28, r24
	
	DIO_SetPinValue(PORTB,SS,LOW);
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	64 e0       	ldi	r22, 0x04	; 4
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPinValue>
	SPD_R = u8_data;
 73a:	cf b9       	out	0x0f, r28	; 15
	while(!(SPS_R & (1 << SPIF)));
 73c:	77 9b       	sbis	0x0e, 7	; 14
 73e:	fe cf       	rjmp	.-4      	; 0x73c <SPI_tranceiver+0x10>
	DIO_SetPinValue(PORTB,SS,HIGH);
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	64 e0       	ldi	r22, 0x04	; 4
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_SetPinValue>
	return SPD_R;
 74a:	8f b1       	in	r24, 0x0f	; 15
}
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <SPI_masterTransmitString>:

void SPI_masterTransmitString(uint8_t* u8_buffer){
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	8c 01       	movw	r16, r24
	
	uint8_t u8_buffIndex = 0;
 758:	c0 e0       	ldi	r28, 0x00	; 0
	
	do{
		SPI_tranceiver(u8_buffer[u8_buffIndex]);
 75a:	f8 01       	movw	r30, r16
 75c:	ec 0f       	add	r30, r28
 75e:	f1 1d       	adc	r31, r1
 760:	80 81       	ld	r24, Z
 762:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_tranceiver>
		u8_buffIndex++;
 766:	cf 5f       	subi	r28, 0xFF	; 255
	}while(u8_buffer[u8_buffIndex - 1] != '\0');
 768:	f8 01       	movw	r30, r16
 76a:	ec 0f       	add	r30, r28
 76c:	f1 1d       	adc	r31, r1
 76e:	31 97       	sbiw	r30, 0x01	; 1
 770:	80 81       	ld	r24, Z
 772:	81 11       	cpse	r24, r1
 774:	f2 cf       	rjmp	.-28     	; 0x75a <SPI_masterTransmitString+0xa>
}
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	08 95       	ret

0000077e <__vector_11>:
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <counts>
 794:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <counts+0x1>
 798:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <counts+0x2>
 79c:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <counts+0x3>
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	a1 1d       	adc	r26, r1
 7a4:	b1 1d       	adc	r27, r1
 7a6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <counts>
 7aa:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <counts+0x1>
 7ae:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <counts+0x2>
 7b2:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <counts+0x3>
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <USART_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void USART_TX_Int_CallBack_fun(void (*ptr_To_Fun)(void))
{
	ptr_To_TX_Int_fun=ptr_To_Fun;
 7c8:	fc 01       	movw	r30, r24
 7ca:	80 81       	ld	r24, Z
 7cc:	81 11       	cpse	r24, r1
 7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <USART_voidInit+0x1c>
 7d0:	91 81       	ldd	r25, Z+1	; 0x01
 7d2:	91 11       	cpse	r25, r1
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <USART_voidInit+0x1c>
 7d6:	83 e3       	ldi	r24, 0x33	; 51
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <MYUBRR+0x1>
 7de:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <MYUBRR>
 7e2:	14 c0       	rjmp	.+40     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e4:	81 11       	cpse	r24, r1
 7e6:	0a c0       	rjmp	.+20     	; 0x7fc <USART_voidInit+0x34>
 7e8:	91 81       	ldd	r25, Z+1	; 0x01
 7ea:	91 30       	cpi	r25, 0x01	; 1
 7ec:	39 f4       	brne	.+14     	; 0x7fc <USART_voidInit+0x34>
 7ee:	87 e6       	ldi	r24, 0x67	; 103
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <MYUBRR+0x1>
 7f6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <MYUBRR>
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fc:	80 34       	cpi	r24, 0x40	; 64
 7fe:	31 f4       	brne	.+12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 800:	8f e9       	ldi	r24, 0x9F	; 159
 802:	91 e0       	ldi	r25, 0x01	; 1
 804:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <MYUBRR+0x1>
 808:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <MYUBRR>
 80c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <MYUBRR>
 810:	89 b9       	out	0x09, r24	; 9
 812:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <MYUBRR+0x1>
 816:	80 bd       	out	0x20, r24	; 32
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	21 f4       	brne	.+8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81e:	8a b1       	in	r24, 0x0a	; 10
 820:	88 60       	ori	r24, 0x08	; 8
 822:	8a b9       	out	0x0a, r24	; 10
 824:	05 c0       	rjmp	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 826:	81 11       	cpse	r24, r1
 828:	03 c0       	rjmp	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82a:	8a b1       	in	r24, 0x0a	; 10
 82c:	87 7f       	andi	r24, 0xF7	; 247
 82e:	8a b9       	out	0x0a, r24	; 10
 830:	83 81       	ldd	r24, Z+3	; 0x03
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	21 f4       	brne	.+8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 836:	8a b1       	in	r24, 0x0a	; 10
 838:	80 61       	ori	r24, 0x10	; 16
 83a:	8a b9       	out	0x0a, r24	; 10
 83c:	06 c0       	rjmp	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83e:	82 81       	ldd	r24, Z+2	; 0x02
 840:	81 11       	cpse	r24, r1
 842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	8a b1       	in	r24, 0x0a	; 10
 846:	8f 7e       	andi	r24, 0xEF	; 239
 848:	8a b9       	out	0x0a, r24	; 10
 84a:	84 81       	ldd	r24, Z+4	; 0x04
 84c:	86 30       	cpi	r24, 0x06	; 6
 84e:	21 f4       	brne	.+8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 850:	80 b5       	in	r24, 0x20	; 32
 852:	86 68       	ori	r24, 0x86	; 134
 854:	80 bd       	out	0x20, r24	; 32
 856:	05 c0       	rjmp	.+10     	; 0x862 <__stack+0x3>
 858:	84 30       	cpi	r24, 0x04	; 4
 85a:	19 f4       	brne	.+6      	; 0x862 <__stack+0x3>
 85c:	80 b5       	in	r24, 0x20	; 32
 85e:	86 60       	ori	r24, 0x06	; 6
 860:	80 bd       	out	0x20, r24	; 32
 862:	81 85       	ldd	r24, Z+9	; 0x09
 864:	80 38       	cpi	r24, 0x80	; 128
 866:	21 f4       	brne	.+8      	; 0x870 <__stack+0x11>
 868:	8a b1       	in	r24, 0x0a	; 10
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	8a b9       	out	0x0a, r24	; 10
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
 870:	81 11       	cpse	r24, r1
 872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
 874:	8a b1       	in	r24, 0x0a	; 10
 876:	8f 77       	andi	r24, 0x7F	; 127
 878:	8a b9       	out	0x0a, r24	; 10
 87a:	80 85       	ldd	r24, Z+8	; 0x08
 87c:	80 34       	cpi	r24, 0x40	; 64
 87e:	21 f4       	brne	.+8      	; 0x888 <__stack+0x29>
 880:	8a b1       	in	r24, 0x0a	; 10
 882:	80 64       	ori	r24, 0x40	; 64
 884:	8a b9       	out	0x0a, r24	; 10
 886:	08 95       	ret
 888:	81 11       	cpse	r24, r1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <__stack+0x33>
 88c:	8a b1       	in	r24, 0x0a	; 10
 88e:	8f 7b       	andi	r24, 0xBF	; 191
 890:	8a b9       	out	0x0a, r24	; 10
 892:	08 95       	ret

00000894 <USART_voidTransmit>:
 894:	5d 9b       	sbis	0x0b, 5	; 11
 896:	fe cf       	rjmp	.-4      	; 0x894 <USART_voidTransmit>
 898:	8c b9       	out	0x0c, r24	; 12
 89a:	08 95       	ret

0000089c <USART_u8Receive>:
 89c:	5f 9b       	sbis	0x0b, 7	; 11
 89e:	fe cf       	rjmp	.-4      	; 0x89c <USART_u8Receive>
 8a0:	8c b1       	in	r24, 0x0c	; 12
 8a2:	08 95       	ret

000008a4 <USART_voidRecievePacket>:
 8a4:	df 92       	push	r13
 8a6:	ef 92       	push	r14
 8a8:	ff 92       	push	r15
 8aa:	0f 93       	push	r16
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	8c 01       	movw	r16, r24
 8b4:	d6 2e       	mov	r13, r22
 8b6:	e4 2e       	mov	r14, r20
 8b8:	0e 94 4e 04 	call	0x89c	; 0x89c <USART_u8Receive>
 8bc:	f8 01       	movw	r30, r16
 8be:	80 83       	st	Z, r24
 8c0:	ff 24       	eor	r15, r15
 8c2:	f3 94       	inc	r15
 8c4:	0a c0       	rjmp	.+20     	; 0x8da <USART_voidRecievePacket+0x36>
 8c6:	42 17       	cp	r20, r18
 8c8:	53 07       	cpc	r21, r19
 8ca:	c1 f0       	breq	.+48     	; 0x8fc <USART_voidRecievePacket+0x58>
 8cc:	e8 01       	movw	r28, r16
 8ce:	c8 0f       	add	r28, r24
 8d0:	d9 1f       	adc	r29, r25
 8d2:	0e 94 4e 04 	call	0x89c	; 0x89c <USART_u8Receive>
 8d6:	88 83       	st	Y, r24
 8d8:	f3 94       	inc	r15
 8da:	8f 2d       	mov	r24, r15
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	fc 01       	movw	r30, r24
 8e0:	31 97       	sbiw	r30, 0x01	; 1
 8e2:	e0 0f       	add	r30, r16
 8e4:	f1 1f       	adc	r31, r17
 8e6:	60 81       	ld	r22, Z
 8e8:	6e 15       	cp	r22, r14
 8ea:	41 f0       	breq	.+16     	; 0x8fc <USART_voidRecievePacket+0x58>
 8ec:	ac 01       	movw	r20, r24
 8ee:	2d 2d       	mov	r18, r13
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	21 50       	subi	r18, 0x01	; 1
 8f4:	31 09       	sbc	r19, r1
 8f6:	42 17       	cp	r20, r18
 8f8:	53 07       	cpc	r21, r19
 8fa:	2c f3       	brlt	.-54     	; 0x8c6 <USART_voidRecievePacket+0x22>
 8fc:	6d 30       	cpi	r22, 0x0D	; 13
 8fe:	11 f4       	brne	.+4      	; 0x904 <USART_voidRecievePacket+0x60>
 900:	10 82       	st	Z, r1
 902:	04 c0       	rjmp	.+8      	; 0x90c <USART_voidRecievePacket+0x68>
 904:	f8 01       	movw	r30, r16
 906:	e8 0f       	add	r30, r24
 908:	f9 1f       	adc	r31, r25
 90a:	10 82       	st	Z, r1
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	ff 90       	pop	r15
 916:	ef 90       	pop	r14
 918:	df 90       	pop	r13
 91a:	08 95       	ret

0000091c <USART_voidSendString>:
 91c:	cf 92       	push	r12
 91e:	df 92       	push	r13
 920:	ef 92       	push	r14
 922:	ff 92       	push	r15
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	ec 01       	movw	r28, r24
 92a:	c1 2c       	mov	r12, r1
 92c:	d1 2c       	mov	r13, r1
 92e:	76 01       	movw	r14, r12
 930:	07 c0       	rjmp	.+14     	; 0x940 <USART_voidSendString+0x24>
 932:	0e 94 4a 04 	call	0x894	; 0x894 <USART_voidTransmit>
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	c8 1a       	sub	r12, r24
 93a:	d8 0a       	sbc	r13, r24
 93c:	e8 0a       	sbc	r14, r24
 93e:	f8 0a       	sbc	r15, r24
 940:	fe 01       	movw	r30, r28
 942:	ec 0d       	add	r30, r12
 944:	fd 1d       	adc	r31, r13
 946:	80 81       	ld	r24, Z
 948:	81 11       	cpse	r24, r1
 94a:	f3 cf       	rjmp	.-26     	; 0x932 <USART_voidSendString+0x16>
 94c:	0e 94 4a 04 	call	0x894	; 0x894 <USART_voidTransmit>
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	df 90       	pop	r13
 95a:	cf 90       	pop	r12
 95c:	08 95       	ret

0000095e <__vector_13>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*RX ISR*/
void __vector_13(void)
{
	ptr_To_RX_Int_fun();
 95e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <ptr_To_RX_Int_fun>
 962:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <ptr_To_RX_Int_fun+0x1>
 966:	09 95       	icall
 968:	08 95       	ret

0000096a <__vector_15>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*TX ISR*/
void __vector_15(void)
{
	ptr_To_TX_Int_fun();
 96a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <ptr_To_TX_Int_fun>
 96e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <ptr_To_TX_Int_fun+0x1>
 972:	09 95       	icall
 974:	08 95       	ret

00000976 <ATM_voidSetWaitingState>:
}


static void ATM_voidSetWaitingState(void)
{
	sendStatus = waitingState ;
 976:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <sendStatus>
 97a:	08 95       	ret

0000097c <ATM_voidSetPanSendState>:
}

static void ATM_voidSetPanSendState(void)
{
	sendStatus = sendCardPan ; 
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sendStatus>
 982:	08 95       	ret

00000984 <ATM_voidSetPinSendState>:
}


static void ATM_voidSetPinSendState(void)
{
	sendStatus = sendCardPin ;
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sendStatus>
 98a:	08 95       	ret

0000098c <ATM_voidSetEndOfTransState>:



static void ATM_voidSetEndOfTransState(void)
{
	sendStatus = sendEndOfTransaction ; 
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sendStatus>
 992:	08 95       	ret

00000994 <TERMINAL_init>:
	EEPROM_voidInit();
}

void TERMINAL_init(void)
{
	USART_voidInit(&gstr_USART_Config);
 994:	80 e6       	ldi	r24, 0x60	; 96
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_voidInit>
 99c:	08 95       	ret

0000099e <CARD_init>:
send_req_T sendStatus = waitingState; 


void CARD_init(void)
{	
	Ru8_SREG |= 0x80;
 99e:	8f b7       	in	r24, 0x3f	; 63
 9a0:	80 68       	ori	r24, 0x80	; 128
 9a2:	8f bf       	out	0x3f, r24	; 63
	External_Interrupts_Init(EXTERNAL_INT_00,RISING_EDGE,ATM_voidSetWaitingState) ; 
 9a4:	4b eb       	ldi	r20, 0xBB	; 187
 9a6:	54 e0       	ldi	r21, 0x04	; 4
 9a8:	62 e0       	ldi	r22, 0x02	; 2
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
	External_Interrupts_Init(EXTERNAL_INT_01,RISING_EDGE,ATM_voidSetWaitingState) ;
 9b0:	4b eb       	ldi	r20, 0xBB	; 187
 9b2:	54 e0       	ldi	r21, 0x04	; 4
 9b4:	62 e0       	ldi	r22, 0x02	; 2
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
	DIO_SetPinDirection(PORTB,PIN0,OUTPUT) ;
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	0e 94 19 01 	call	0x232	; 0x232 <DIO_SetPinDirection>
	SPI_init();
 9c6:	0e 94 6f 03 	call	0x6de	; 0x6de <SPI_init>
	TERMINAL_init();
 9ca:	0e 94 ca 04 	call	0x994	; 0x994 <TERMINAL_init>
	EEPROM_voidInit();
 9ce:	0e 94 4e 00 	call	0x9c	; 0x9c <EEPROM_voidInit>
 9d2:	08 95       	ret

000009d4 <TERMINAL_display>:
	USART_voidInit(&gstr_USART_Config);
}

void TERMINAL_display(uint8_t* pu8_stream)
{
	if (pu8_stream != NULL_POINTER)
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	11 f0       	breq	.+4      	; 0x9dc <TERMINAL_display+0x8>
	{
		USART_voidSendString(pu8_stream);
 9d8:	0e 94 8e 04 	call	0x91c	; 0x91c <USART_voidSendString>
 9dc:	08 95       	ret

000009de <TERMINAL_command>:
	}
}

void TERMINAL_command(uint8_t* pu8_buffer, uint8_t u8_arrSize)
{
	USART_voidRecievePacket(pu8_buffer, u8_arrSize, '\r');
 9de:	4d e0       	ldi	r20, 0x0D	; 13
 9e0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <USART_voidRecievePacket>
 9e4:	08 95       	ret

000009e6 <CARD_voidCheckPanValidity>:
}

void CARD_voidCheckPanValidity(uint8_t* pu8_cardPAN, uint8_t* u8_panSize)
{
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	ec 01       	movw	r28, r24
 9f0:	8b 01       	movw	r16, r22
	uint8_t u8_arrIndex    = u8_INTIAL_VAL;
	TERMINAL_display(PAN_REQ_STR);
 9f2:	8b e6       	ldi	r24, 0x6B	; 107
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
	TERMINAL_command(pu8_cardPAN, u8_PAN_MAX_SIZE);
 9fa:	61 e1       	ldi	r22, 0x11	; 17
 9fc:	ce 01       	movw	r24, r28
 9fe:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
	USART_voidRecievePacket(pu8_buffer, u8_arrSize, '\r');
}

void CARD_voidCheckPanValidity(uint8_t* pu8_cardPAN, uint8_t* u8_panSize)
{
	uint8_t u8_arrIndex    = u8_INTIAL_VAL;
 a02:	80 e0       	ldi	r24, 0x00	; 0
	TERMINAL_display(PAN_REQ_STR);
	TERMINAL_command(pu8_cardPAN, u8_PAN_MAX_SIZE);
	do
	{
		if((pu8_cardPAN[u8_arrIndex] >= '0') && (pu8_cardPAN[u8_arrIndex] <= '9'))
 a04:	fe 01       	movw	r30, r28
 a06:	e8 0f       	add	r30, r24
 a08:	f1 1d       	adc	r31, r1
 a0a:	90 81       	ld	r25, Z
 a0c:	90 53       	subi	r25, 0x30	; 48
 a0e:	9a 30       	cpi	r25, 0x0A	; 10
 a10:	10 f4       	brcc	.+4      	; 0xa16 <CARD_voidCheckPanValidity+0x30>
		{
			u8_arrIndex++;
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <CARD_voidCheckPanValidity+0x4a>
		}
		else
		{
			TERMINAL_display(WRONG_PAN_STR);
 a16:	89 e7       	ldi	r24, 0x79	; 121
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(PAN_REQ_STR);
 a1e:	8b e6       	ldi	r24, 0x6B	; 107
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_command(pu8_cardPAN, u8_PAN_MAX_SIZE);
 a26:	61 e1       	ldi	r22, 0x11	; 17
 a28:	ce 01       	movw	r24, r28
 a2a:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
			u8_arrIndex = u8_INTIAL_VAL;
 a2e:	80 e0       	ldi	r24, 0x00	; 0
		}
		if(((pu8_cardPAN[u8_arrIndex] == NULL_CHAR)) && (u8_arrIndex < u8_PAN_MIN_SIZE ))
 a30:	fe 01       	movw	r30, r28
 a32:	e8 0f       	add	r30, r24
 a34:	f1 1d       	adc	r31, r1
 a36:	90 81       	ld	r25, Z
 a38:	91 11       	cpse	r25, r1
 a3a:	0f c0       	rjmp	.+30     	; 0xa5a <CARD_voidCheckPanValidity+0x74>
 a3c:	89 30       	cpi	r24, 0x09	; 9
 a3e:	68 f4       	brcc	.+26     	; 0xa5a <CARD_voidCheckPanValidity+0x74>
		{
			TERMINAL_display(WRONG_PAN_STR);
 a40:	89 e7       	ldi	r24, 0x79	; 121
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(PAN_REQ_STR);
 a48:	8b e6       	ldi	r24, 0x6B	; 107
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_command(pu8_cardPAN, u8_PAN_MAX_SIZE);
 a50:	61 e1       	ldi	r22, 0x11	; 17
 a52:	ce 01       	movw	r24, r28
 a54:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
			u8_arrIndex = u8_INTIAL_VAL;
 a58:	80 e0       	ldi	r24, 0x00	; 0
		}
	}while((pu8_cardPAN[u8_arrIndex] != NULL_CHAR));
 a5a:	fe 01       	movw	r30, r28
 a5c:	e8 0f       	add	r30, r24
 a5e:	f1 1d       	adc	r31, r1
 a60:	90 81       	ld	r25, Z
 a62:	91 11       	cpse	r25, r1
 a64:	cf cf       	rjmp	.-98     	; 0xa04 <CARD_voidCheckPanValidity+0x1e>
	
	*(u8_panSize) = u8_arrIndex;
 a66:	f8 01       	movw	r30, r16
 a68:	80 83       	st	Z, r24
}
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	1f 91       	pop	r17
 a70:	0f 91       	pop	r16
 a72:	08 95       	ret

00000a74 <CARD_voidCheckPinValidity>:

void CARD_voidCheckPinValidity(uint8_t* pu8_cardPIN)
{
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	ec 01       	movw	r28, r24
	uint8_t u8_arrIndex    = u8_INTIAL_VAL;
	TERMINAL_display(PIN_REQ_STR);
 a7a:	8a e8       	ldi	r24, 0x8A	; 138
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
	TERMINAL_command(pu8_cardPIN,u8_PIN_SIZE);
 a82:	65 e0       	ldi	r22, 0x05	; 5
 a84:	ce 01       	movw	r24, r28
 a86:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
	*(u8_panSize) = u8_arrIndex;
}

void CARD_voidCheckPinValidity(uint8_t* pu8_cardPIN)
{
	uint8_t u8_arrIndex    = u8_INTIAL_VAL;
 a8a:	80 e0       	ldi	r24, 0x00	; 0
	TERMINAL_display(PIN_REQ_STR);
	TERMINAL_command(pu8_cardPIN,u8_PIN_SIZE);
	
	do
	{
		if((pu8_cardPIN[u8_arrIndex] >= '0') && (pu8_cardPIN[u8_arrIndex] <= '9'))
 a8c:	fe 01       	movw	r30, r28
 a8e:	e8 0f       	add	r30, r24
 a90:	f1 1d       	adc	r31, r1
 a92:	90 81       	ld	r25, Z
 a94:	90 53       	subi	r25, 0x30	; 48
 a96:	9a 30       	cpi	r25, 0x0A	; 10
 a98:	10 f4       	brcc	.+4      	; 0xa9e <CARD_voidCheckPinValidity+0x2a>
		{
			u8_arrIndex++ ;
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	0d c0       	rjmp	.+26     	; 0xab8 <CARD_voidCheckPinValidity+0x44>
		}
		else
		{
			TERMINAL_display(WRONG_PIN_STR);
 a9e:	88 e9       	ldi	r24, 0x98	; 152
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(PIN_REQ_STR);
 aa6:	8a e8       	ldi	r24, 0x8A	; 138
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_command(pu8_cardPIN,u8_PIN_SIZE);
 aae:	65 e0       	ldi	r22, 0x05	; 5
 ab0:	ce 01       	movw	r24, r28
 ab2:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
			u8_arrIndex = u8_INTIAL_VAL;
 ab6:	80 e0       	ldi	r24, 0x00	; 0
		}
		if(((pu8_cardPIN[u8_arrIndex] == NULL_CHAR)) && ((u8_arrIndex < (u8_PIN_SIZE - 1))))
 ab8:	fe 01       	movw	r30, r28
 aba:	e8 0f       	add	r30, r24
 abc:	f1 1d       	adc	r31, r1
 abe:	90 81       	ld	r25, Z
 ac0:	91 11       	cpse	r25, r1
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <CARD_voidCheckPinValidity+0x6e>
 ac4:	84 30       	cpi	r24, 0x04	; 4
 ac6:	68 f4       	brcc	.+26     	; 0xae2 <CARD_voidCheckPinValidity+0x6e>
		{
			TERMINAL_display(WRONG_PIN_STR);
 ac8:	88 e9       	ldi	r24, 0x98	; 152
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(PIN_REQ_STR);
 ad0:	8a e8       	ldi	r24, 0x8A	; 138
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_command(pu8_cardPIN,u8_PIN_SIZE);
 ad8:	65 e0       	ldi	r22, 0x05	; 5
 ada:	ce 01       	movw	r24, r28
 adc:	0e 94 ef 04 	call	0x9de	; 0x9de <TERMINAL_command>
			u8_arrIndex = u8_INTIAL_VAL;
 ae0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}while((pu8_cardPIN[u8_arrIndex] != NULL_CHAR));
 ae2:	fe 01       	movw	r30, r28
 ae4:	e8 0f       	add	r30, r24
 ae6:	f1 1d       	adc	r31, r1
 ae8:	90 81       	ld	r25, Z
 aea:	91 11       	cpse	r25, r1
 aec:	cf cf       	rjmp	.-98     	; 0xa8c <CARD_voidCheckPinValidity+0x18>
}
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	08 95       	ret

00000af4 <CARD_u8ModeSelection>:

uint8_t CARD_u8ModeSelection(void)
{
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
	uint8_t u8_noChoice = TRUE;
	uint8_t u8_choice   = u8_INTIAL_VAL;
	uint8_t u8_mode     = u8_INTIAL_VAL;
	
	TERMINAL_display("Choose mode\r\n");
 af8:	89 ea       	ldi	r24, 0xA9	; 169
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
	TERMINAL_display("1- Programming mode\r\n");
 b00:	87 eb       	ldi	r24, 0xB7	; 183
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
	TERMINAL_display("2- User mode\r\n");
 b08:	8d ec       	ldi	r24, 0xCD	; 205
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>

uint8_t CARD_u8ModeSelection(void)
{
	uint8_t u8_noChoice = TRUE;
	uint8_t u8_choice   = u8_INTIAL_VAL;
	uint8_t u8_mode     = u8_INTIAL_VAL;
 b10:	d0 e0       	ldi	r29, 0x00	; 0
	}while((pu8_cardPIN[u8_arrIndex] != NULL_CHAR));
}

uint8_t CARD_u8ModeSelection(void)
{
	uint8_t u8_noChoice = TRUE;
 b12:	c1 e0       	ldi	r28, 0x01	; 1
	
	TERMINAL_display("Choose mode\r\n");
	TERMINAL_display("1- Programming mode\r\n");
	TERMINAL_display("2- User mode\r\n");
	
	while(u8_noChoice)
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <CARD_u8ModeSelection+0x4a>
	{
		TERMINAL_display("Choice: ");
 b16:	8c ed       	ldi	r24, 0xDC	; 220
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
		u8_choice = USART_u8Receive();
 b1e:	0e 94 4e 04 	call	0x89c	; 0x89c <USART_u8Receive>
		if(u8_choice == PROGRAMMING_MODE)
 b22:	81 33       	cpi	r24, 0x31	; 49
 b24:	39 f0       	breq	.+14     	; 0xb34 <CARD_u8ModeSelection+0x40>
		{
			u8_noChoice = FALSE;
			u8_mode = ADMIN;
		}
		else if (u8_choice == USER_MODE)
 b26:	82 33       	cpi	r24, 0x32	; 50
 b28:	41 f0       	breq	.+16     	; 0xb3a <CARD_u8ModeSelection+0x46>
			u8_noChoice = FALSE;
			u8_mode = USER;
		}
		else
		{
			TERMINAL_display("WRONG CHOICE!!!\r\n");
 b2a:	85 ee       	ldi	r24, 0xE5	; 229
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
 b32:	05 c0       	rjmp	.+10     	; 0xb3e <CARD_u8ModeSelection+0x4a>
		TERMINAL_display("Choice: ");
		u8_choice = USART_u8Receive();
		if(u8_choice == PROGRAMMING_MODE)
		{
			u8_noChoice = FALSE;
			u8_mode = ADMIN;
 b34:	d0 e0       	ldi	r29, 0x00	; 0
	{
		TERMINAL_display("Choice: ");
		u8_choice = USART_u8Receive();
		if(u8_choice == PROGRAMMING_MODE)
		{
			u8_noChoice = FALSE;
 b36:	c0 e0       	ldi	r28, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <CARD_u8ModeSelection+0x4a>
			u8_mode = ADMIN;
		}
		else if (u8_choice == USER_MODE)
		{
			u8_noChoice = FALSE;
			u8_mode = USER;
 b3a:	d1 e0       	ldi	r29, 0x01	; 1
			u8_noChoice = FALSE;
			u8_mode = ADMIN;
		}
		else if (u8_choice == USER_MODE)
		{
			u8_noChoice = FALSE;
 b3c:	c0 e0       	ldi	r28, 0x00	; 0
	
	TERMINAL_display("Choose mode\r\n");
	TERMINAL_display("1- Programming mode\r\n");
	TERMINAL_display("2- User mode\r\n");
	
	while(u8_noChoice)
 b3e:	c1 11       	cpse	r28, r1
 b40:	ea cf       	rjmp	.-44     	; 0xb16 <CARD_u8ModeSelection+0x22>
		{
			TERMINAL_display("WRONG CHOICE!!!\r\n");
		}
	}
	return u8_mode;
}
 b42:	8d 2f       	mov	r24, r29
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	08 95       	ret

00000b4a <CARD_voidProgram>:
	static uint8_t pu8_cardHolderName[10];
	static uint8_t pu8_cardPAN[u8_PAN_MAX_SIZE];


	
	switch(u8_mode)
 b4a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8_mode>
 b4e:	88 23       	and	r24, r24
 b50:	19 f0       	breq	.+6      	; 0xb58 <CARD_voidProgram+0xe>
 b52:	81 30       	cpi	r24, 0x01	; 1
 b54:	21 f1       	breq	.+72     	; 0xb9e <CARD_voidProgram+0x54>
 b56:	08 95       	ret
	{
		case ADMIN :
		TERMINAL_display(PROG_MODE_STR);
 b58:	87 ef       	ldi	r24, 0xF7	; 247
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
		CARD_voidCheckPanValidity(pu8_cardPAN, &u8_panSize);	
 b60:	64 e4       	ldi	r22, 0x44	; 68
 b62:	71 e0       	ldi	r23, 0x01	; 1
 b64:	85 e4       	ldi	r24, 0x45	; 69
 b66:	91 e0       	ldi	r25, 0x01	; 1
 b68:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <CARD_voidCheckPanValidity>
		EEPROM_u8WriteNeededPartBlock(u8_PAN_PAGE_NUM,u8_PAN_BYTE_NUM,pu8_cardPAN,u8_panSize);
 b6c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <u8_panSize.2009>
 b70:	45 e4       	ldi	r20, 0x45	; 69
 b72:	51 e0       	ldi	r21, 0x01	; 1
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_u8WriteNeededPartBlock>
		CARD_voidCheckPinValidity(pu8_cardPIN);
 b7e:	8f e3       	ldi	r24, 0x3F	; 63
 b80:	91 e0       	ldi	r25, 0x01	; 1
 b82:	0e 94 3a 05 	call	0xa74	; 0xa74 <CARD_voidCheckPinValidity>
		EEPROM_u8WriteNeededPartBlock(u8_PIN_PAGE_NUM,u8_PIN_BYTE_NUM,pu8_cardPIN,u8_PIN_SIZE);
 b86:	25 e0       	ldi	r18, 0x05	; 5
 b88:	4f e3       	ldi	r20, 0x3F	; 63
 b8a:	51 e0       	ldi	r21, 0x01	; 1
 b8c:	64 e1       	ldi	r22, 0x14	; 20
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_u8WriteNeededPartBlock>
		u8_mode = USER;
 b96:	81 e0       	ldi	r24, 0x01	; 1
 b98:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8_mode>
		break;
 b9c:	08 95       	ret
		
		case USER :
		if(FALSE == u8_beginUserMode)
 b9e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_beginUserMode.2004>
 ba2:	81 11       	cpse	r24, r1
 ba4:	26 c0       	rjmp	.+76     	; 0xbf2 <CARD_voidProgram+0xa8>
		{
			TERMINAL_display(NEW_LINE);
 ba6:	84 ef       	ldi	r24, 0xF4	; 244
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(USER_MODE_STR);
 bae:	85 e1       	ldi	r24, 0x15	; 21
 bb0:	91 e0       	ldi	r25, 0x01	; 1
 bb2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			EEPROM_u8ReadNeededPartBlock(u8_PAN_PAGE_NUM, u8_PAN_BYTE_NUM, pu8_cardPAN, u8_panSize);
 bb6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <u8_panSize.2009>
 bba:	45 e4       	ldi	r20, 0x45	; 69
 bbc:	51 e0       	ldi	r21, 0x01	; 1
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 94 9e 00 	call	0x13c	; 0x13c <EEPROM_u8ReadNeededPartBlock>
			External_Interrupts_Init(EXTERNAL_INT_00,RISING_EDGE,ATM_voidSetPanSendState) ; 
 bc8:	4e eb       	ldi	r20, 0xBE	; 190
 bca:	54 e0       	ldi	r21, 0x04	; 4
 bcc:	62 e0       	ldi	r22, 0x02	; 2
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
			TERMINAL_display("\r\n");
 bd4:	84 ef       	ldi	r24, 0xF4	; 244
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display(pu8_cardPAN);
 bdc:	85 e4       	ldi	r24, 0x45	; 69
 bde:	91 e0       	ldi	r25, 0x01	; 1
 be0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			TERMINAL_display("\r\n");
 be4:	84 ef       	ldi	r24, 0xF4	; 244
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TERMINAL_display>
			u8_beginUserMode = TRUE ; 
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_beginUserMode.2004>
		}

		switch(sendStatus)
 bf2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sendStatus>
 bf6:	82 30       	cpi	r24, 0x02	; 2
 bf8:	c1 f0       	breq	.+48     	; 0xc2a <CARD_voidProgram+0xe0>
 bfa:	83 30       	cpi	r24, 0x03	; 3
 bfc:	89 f1       	breq	.+98     	; 0xc60 <CARD_voidProgram+0x116>
 bfe:	81 30       	cpi	r24, 0x01	; 1
 c00:	09 f0       	breq	.+2      	; 0xc04 <CARD_voidProgram+0xba>
 c02:	42 c0       	rjmp	.+132    	; 0xc88 <CARD_voidProgram+0x13e>
		{	
			case sendCardPan:
					SPI_masterTransmitString(pu8_cardPAN);
 c04:	85 e4       	ldi	r24, 0x45	; 69
 c06:	91 e0       	ldi	r25, 0x01	; 1
 c08:	0e 94 a8 03 	call	0x750	; 0x750 <SPI_masterTransmitString>
					External_Interrupts_Init(EXTERNAL_INT_00,RISING_EDGE,ATM_voidSetPinSendState) ; 
 c0c:	42 ec       	ldi	r20, 0xC2	; 194
 c0e:	54 e0       	ldi	r21, 0x04	; 4
 c10:	62 e0       	ldi	r22, 0x02	; 2
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					External_Interrupts_Init(EXTERNAL_INT_01,RISING_EDGE,ATM_voidSetEndOfTransState) ;
 c18:	46 ec       	ldi	r20, 0xC6	; 198
 c1a:	54 e0       	ldi	r21, 0x04	; 4
 c1c:	62 e0       	ldi	r22, 0x02	; 2
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					sendStatus = waitingState ; 
 c24:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <sendStatus>
					break ;
 c28:	08 95       	ret

			case sendCardPin :
					EEPROM_u8ReadNeededPartBlock(u8_PIN_PAGE_NUM, u8_PIN_BYTE_NUM, pu8_cardPIN, u8_PIN_SIZE);
 c2a:	25 e0       	ldi	r18, 0x05	; 5
 c2c:	4f e3       	ldi	r20, 0x3F	; 63
 c2e:	51 e0       	ldi	r21, 0x01	; 1
 c30:	64 e1       	ldi	r22, 0x14	; 20
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 9e 00 	call	0x13c	; 0x13c <EEPROM_u8ReadNeededPartBlock>
					SPI_masterTransmitString(pu8_cardPIN);
 c3a:	8f e3       	ldi	r24, 0x3F	; 63
 c3c:	91 e0       	ldi	r25, 0x01	; 1
 c3e:	0e 94 a8 03 	call	0x750	; 0x750 <SPI_masterTransmitString>
				    External_Interrupts_Init(EXTERNAL_INT_00,RISING_EDGE,ATM_voidSetWaitingState) ;
 c42:	4b eb       	ldi	r20, 0xBB	; 187
 c44:	54 e0       	ldi	r21, 0x04	; 4
 c46:	62 e0       	ldi	r22, 0x02	; 2
 c48:	80 e0       	ldi	r24, 0x00	; 0
 c4a:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					External_Interrupts_Init(EXTERNAL_INT_01,RISING_EDGE,ATM_voidSetEndOfTransState) ; 
 c4e:	46 ec       	ldi	r20, 0xC6	; 198
 c50:	54 e0       	ldi	r21, 0x04	; 4
 c52:	62 e0       	ldi	r22, 0x02	; 2
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					sendStatus = waitingState ;
 c5a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <sendStatus>
					break ; 
 c5e:	08 95       	ret

			case sendEndOfTransaction : 
					u8_mode = CARD_u8ModeSelection();
 c60:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <CARD_u8ModeSelection>
 c64:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8_mode>
					External_Interrupts_Init(EXTERNAL_INT_00,RISING_EDGE,ATM_voidSetWaitingState) ; 
 c68:	4b eb       	ldi	r20, 0xBB	; 187
 c6a:	54 e0       	ldi	r21, 0x04	; 4
 c6c:	62 e0       	ldi	r22, 0x02	; 2
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					External_Interrupts_Init(EXTERNAL_INT_01,RISING_EDGE,ATM_voidSetWaitingState) ;
 c74:	4b eb       	ldi	r20, 0xBB	; 187
 c76:	54 e0       	ldi	r21, 0x04	; 4
 c78:	62 e0       	ldi	r22, 0x02	; 2
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	0e 94 a5 02 	call	0x54a	; 0x54a <External_Interrupts_Init>
					u8_beginUserMode = FALSE;
 c80:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <u8_beginUserMode.2004>
					sendStatus = waitingState;
 c84:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <sendStatus>
 c88:	08 95       	ret

00000c8a <_exit>:
 c8a:	f8 94       	cli

00000c8c <__stop_program>:
 c8c:	ff cf       	rjmp	.-2      	; 0xc8c <__stop_program>
