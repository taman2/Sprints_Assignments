
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b8  00800060  00002606  0000269a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800318  00800318  00002952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000514b  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c4  00000000  00000000  00007fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ef6  00000000  00000000  00009267  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  0000c160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000169f  00000000  00000000  0000cce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003902  00000000  00000000  0000e383  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00011c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_15>
      40:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <KeyPad_U8Data+0x32>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	13 e0       	ldi	r17, 0x03	; 3
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e6 e0       	ldi	r30, 0x06	; 6
      ea:	f6 e2       	ldi	r31, 0x26	; 38
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 31       	cpi	r26, 0x18	; 24
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	a8 e1       	ldi	r26, 0x18	; 24
      fc:	b3 e0       	ldi	r27, 0x03	; 3
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a8 32       	cpi	r26, 0x28	; 40
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:

#define FALSE   				 (0)
#define TRUE	   				 (1)

int main(void )
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	cf 55       	subi	r28, 0x5F	; 95
     11e:	d1 09       	sbc	r29, r1
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_adminChoice		 = u8_INTIAL_VAL ;
	uint8_t u8_digitsCount           = u8_INTIAL_VAL;
	uint8_t u8_panValidity           = ATM_FALSE ;
	uint8_t u8_pinValidity           = ATM_FALSE;
	uint16_t u16_recordNum             = u8_INTIAL_VAL;
	uint16_t u16_searchingPanRecordnum = u8_INTIAL_VAL ;
     12a:	1a 82       	std	Y+2, r1	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pu8_tempRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_maxBalance[u8_MAX_BALANCE_MAX_SIZE];
	uint8_t pu8_arr[3];

	ATM_modes mode = ADMIN;
	ATM_Init();
     12e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <ATM_Init>
	ATM_voidStoreRecNum(u16_recordNum);
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <ATM_voidStoreRecNum>
	EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, u8_MAX_BALANCE, u8_MAX_BALANCE_MAX_SIZE);
     13a:	27 e0       	ldi	r18, 0x07	; 7
     13c:	4b e6       	ldi	r20, 0x6B	; 107
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	69 e1       	ldi	r22, 0x19	; 25
     142:	8e ef       	ldi	r24, 0xFE	; 254
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
	uint8_t pu8_newRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_tempRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_maxBalance[u8_MAX_BALANCE_MAX_SIZE];
	uint8_t pu8_arr[3];

	ATM_modes mode = ADMIN;
     14a:	ee 24       	eor	r14, r14
     14c:	e3 94       	inc	r14
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
	uint8_t u8_chooseState       = FALSE;
	uint8_t u8_recExist          = FALSE;
	uint8_t u8_noChoice          = FALSE;
     14e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
	uint8_t u8_chooseState       = FALSE;
	uint8_t u8_recExist          = FALSE;
     150:	00 e0       	ldi	r16, 0x00	; 0
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
	uint8_t u8_chooseState       = FALSE;
     152:	a1 2c       	mov	r10, r1
int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
     154:	ff 24       	eor	r15, r15
     156:	f3 94       	inc	r15

int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
     158:	dd 24       	eor	r13, r13
     15a:	d3 94       	inc	r13
#define TRUE	   				 (1)

int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
     15c:	cc 24       	eor	r12, r12
     15e:	c3 94       	inc	r12
     160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x52>
						
				}while(u8_noExit);
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
     162:	11 e0       	ldi	r17, 0x01	; 1
						u8_firstLogin = FALSE;
     164:	c1 2c       	mov	r12, r1
	ATM_Init();
	ATM_voidStoreRecNum(u16_recordNum);
	EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, u8_MAX_BALANCE, u8_MAX_BALANCE_MAX_SIZE);
	while (1)
	{
		if(u8_firstLogin)
     166:	cc 20       	and	r12, r12
     168:	41 f1       	breq	.+80     	; 0x1ba <main+0xa6>
		{
			u16_recordNum = ATM_u16GetRecNum(pu8_arr);
     16a:	ce 01       	movw	r24, r28
     16c:	83 5a       	subi	r24, 0xA3	; 163
     16e:	9f 4f       	sbci	r25, 0xFF	; 255
     170:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <ATM_u16GetRecNum>
     174:	4c 01       	movw	r8, r24
			DIO_SetPinValue(PORTD,PIN2,GET_BIT(u16_recordNum,8));
     176:	49 2d       	mov	r20, r9
     178:	41 70       	andi	r20, 0x01	; 1
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN3,GET_BIT(u16_recordNum,9));
     182:	91 fa       	bst	r9, 1
     184:	44 27       	eor	r20, r20
     186:	40 f9       	bld	r20, 0
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN4,GET_BIT(u16_recordNum,10));
     190:	92 fa       	bst	r9, 2
     192:	44 27       	eor	r20, r20
     194:	40 f9       	bld	r20, 0
     196:	64 e0       	ldi	r22, 0x04	; 4
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN5,GET_BIT(u16_recordNum,11)); 
     19e:	93 fa       	bst	r9, 3
     1a0:	44 27       	eor	r20, r20
     1a2:	40 f9       	bld	r20, 0
     1a4:	65 e0       	ldi	r22, 0x05	; 5
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			if(u16_recordNum == u8_EMPTY)
     1ac:	89 28       	or	r8, r9
     1ae:	b9 f5       	brne	.+110    	; 0x21e <main+0x10a>
			{
				TERMINAL_display(PROG_FIRST_STATE_STR);
     1b0:	82 e7       	ldi	r24, 0x72	; 114
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
     1b8:	32 c0       	rjmp	.+100    	; 0x21e <main+0x10a>
			}
		}
		else if(TRUE == u8_chooseState)
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	a8 12       	cpse	r10, r24
     1be:	2f c0       	rjmp	.+94     	; 0x21e <main+0x10a>
		{
		   TERMINAL_display(ADMIN_MODE_STR);
     1c0:	81 ea       	ldi	r24, 0xA1	; 161
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		   TERMINAL_display(USER_MODE_STR);
     1c8:	88 ec       	ldi	r24, 0xC8	; 200
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		   u8_noChoice = TRUE;
     1d0:	11 e0       	ldi	r17, 0x01	; 1
		   u8_chooseState = FALSE;
     1d2:	a1 2c       	mov	r10, r1
     1d4:	24 c0       	rjmp	.+72     	; 0x21e <main+0x10a>
		}
		
		while (u8_noChoice)
		{
			TERMINAL_display(CHOICE_STR);
     1d6:	88 ee       	ldi	r24, 0xE8	; 232
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
			TERMINAL_command(pu8_atmDataBuffer,10);
     1de:	6a e0       	ldi	r22, 0x0A	; 10
     1e0:	ce 01       	movw	r24, r28
     1e2:	89 96       	adiw	r24, 0x29	; 41
     1e4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TERMINAL_command>
			
			if(strcmp(pu8_atmDataBuffer,ADMIN_STR) == u8_EQUAL_STR)
     1e8:	63 ef       	ldi	r22, 0xF3	; 243
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	ce 01       	movw	r24, r28
     1ee:	89 96       	adiw	r24, 0x29	; 41
     1f0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strcmp>
     1f4:	89 2b       	or	r24, r25
     1f6:	69 f0       	breq	.+26     	; 0x212 <main+0xfe>
			{
				mode = ADMIN;
				u8_noChoice = FALSE;
			}
			else if(strcmp(pu8_atmDataBuffer,USER_STR) == u8_EQUAL_STR)
     1f8:	69 ef       	ldi	r22, 0xF9	; 249
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	ce 01       	movw	r24, r28
     1fe:	89 96       	adiw	r24, 0x29	; 41
     200:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strcmp>
     204:	89 2b       	or	r24, r25
     206:	49 f0       	breq	.+18     	; 0x21a <main+0x106>
				mode = USER;
				u8_noChoice = FALSE;
			}
			else
			{
				TERMINAL_display(WRONG_CHOICE_STR);
     208:	8e ef       	ldi	r24, 0xFE	; 254
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
     210:	06 c0       	rjmp	.+12     	; 0x21e <main+0x10a>
			TERMINAL_display(CHOICE_STR);
			TERMINAL_command(pu8_atmDataBuffer,10);
			
			if(strcmp(pu8_atmDataBuffer,ADMIN_STR) == u8_EQUAL_STR)
			{
				mode = ADMIN;
     212:	ee 24       	eor	r14, r14
     214:	e3 94       	inc	r14
				u8_noChoice = FALSE;
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	02 c0       	rjmp	.+4      	; 0x21e <main+0x10a>
			}
			else if(strcmp(pu8_atmDataBuffer,USER_STR) == u8_EQUAL_STR)
			{
				mode = USER;
     21a:	e1 2c       	mov	r14, r1
				u8_noChoice = FALSE;
     21c:	10 e0       	ldi	r17, 0x00	; 0
		   TERMINAL_display(USER_MODE_STR);
		   u8_noChoice = TRUE;
		   u8_chooseState = FALSE;
		}
		
		while (u8_noChoice)
     21e:	11 11       	cpse	r17, r1
     220:	da cf       	rjmp	.-76     	; 0x1d6 <main+0xc2>
			{
				TERMINAL_display(WRONG_CHOICE_STR);
			}
		}
		
		switch(mode)
     222:	ee 20       	and	r14, r14
     224:	29 f0       	breq	.+10     	; 0x230 <main+0x11c>
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	e8 16       	cp	r14, r24
     22a:	09 f4       	brne	.+2      	; 0x22e <main+0x11a>
     22c:	2e c1       	rjmp	.+604    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     22e:	9b cf       	rjmp	.-202    	; 0x166 <main+0x52>
		{
			case USER:
			
			do{              
				        if(u8_flag == TRUE)
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	f8 12       	cpse	r15, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <main+0x126>
						{
							ATM_voidlcdUserInterface();
     236:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ATM_voidlcdUserInterface>
						}
						u8_flag = FALSE;
						u8_keyPadReturnASCII = KeyPad_U8Data();			
     23a:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>
						if(u8_keyPadReturnASCII == '1')
     23e:	81 33       	cpi	r24, 0x31	; 49
     240:	69 f0       	breq	.+26     	; 0x25c <main+0x148>
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
     242:	82 33       	cpi	r24, 0x32	; 50
     244:	81 f0       	breq	.+32     	; 0x266 <main+0x152>
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
     246:	83 33       	cpi	r24, 0x33	; 51
     248:	99 f4       	brne	.+38     	; 0x270 <main+0x15c>
						{
								u8_noExit = FALSE;
								u8_flag   = TRUE;
								u8_chooseState = TRUE;
								LCD_command(DISPLAY_CLEAR);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
						}
						else if (u8_keyPadReturnASCII == '3') 
						{
								u8_noExit = FALSE;
								u8_flag   = TRUE;
								u8_chooseState = TRUE;
     250:	aa 24       	eor	r10, r10
     252:	a3 94       	inc	r10
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
						{
								u8_noExit = FALSE;
								u8_flag   = TRUE;
     254:	ff 24       	eor	r15, r15
     256:	f3 94       	inc	r15
							u8_noExit = TRUE;
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
						{
								u8_noExit = FALSE;
     258:	d1 2c       	mov	r13, r1
								u8_flag   = TRUE;
								u8_chooseState = TRUE;
								LCD_command(DISPLAY_CLEAR);
								break;
     25a:	85 cf       	rjmp	.-246    	; 0x166 <main+0x52>
						u8_flag = FALSE;
						u8_keyPadReturnASCII = KeyPad_U8Data();			
						if(u8_keyPadReturnASCII == '1')
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;
     25c:	ff 24       	eor	r15, r15
     25e:	f3 94       	inc	r15
						}
						u8_flag = FALSE;
						u8_keyPadReturnASCII = KeyPad_U8Data();			
						if(u8_keyPadReturnASCII == '1')
						{
							u8_noExit = TRUE;
     260:	dd 24       	eor	r13, r13
     262:	d3 94       	inc	r13
     264:	06 c0       	rjmp	.+12     	; 0x272 <main+0x15e>
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;	
     266:	ff 24       	eor	r15, r15
     268:	f3 94       	inc	r15
							u8_noExit = TRUE;
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
						{
							u8_noExit = TRUE;
     26a:	dd 24       	eor	r13, r13
     26c:	d3 94       	inc	r13
     26e:	01 c0       	rjmp	.+2      	; 0x272 <main+0x15e>
			do{              
				        if(u8_flag == TRUE)
						{
							ATM_voidlcdUserInterface();
						}
						u8_flag = FALSE;
     270:	f1 2c       	mov	r15, r1
								u8_chooseState = TRUE;
								LCD_command(DISPLAY_CLEAR);
								break;
						}
						
						if(u8_keyPadReturnASCII == '1')
     272:	81 33       	cpi	r24, 0x31	; 49
     274:	09 f0       	breq	.+2      	; 0x278 <main+0x164>
     276:	02 c1       	rjmp	.+516    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
						{
							LCD_command(DISPLAY_CLEAR);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
							LCD_printString(LCD_ENTER_CARD_STR);
     27e:	82 e1       	ldi	r24, 0x12	; 18
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				
							do{
								u8_keyPadReturnASCII = KeyPad_U8Data();
     286:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>

							  }while(u8_keyPadReturnASCII != u8_CARD_PRESSED);
     28a:	83 32       	cpi	r24, 0x23	; 35
     28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x172>
				
							LCD_command(DISPLAY_CLEAR);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
							LCD_printString(PROCESS_WAIT_STR);
     294:	8d e1       	ldi	r24, 0x1D	; 29
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
							DIO_SetPinValue(PORTD,PIN7,HIGH);
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	67 e0       	ldi	r22, 0x07	; 7
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
							SPI_slaveReceiveString(pu8_atmPANBuffer,u8_PAN_MAX_SIZE);
     2a6:	61 e1       	ldi	r22, 0x11	; 17
     2a8:	ce 01       	movw	r24, r28
     2aa:	03 96       	adiw	r24, 0x03	; 3
     2ac:	0e 94 8d 09 	call	0x131a	; 0x131a <SPI_slaveReceiveString>
							DIO_SetPinValue(PORTD,PIN7,LOW);
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	67 e0       	ldi	r22, 0x07	; 7
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
							u8_panValidity = ATM_panValidity(pu8_atmPANBuffer,&u16_searchingPanRecordnum);
     2ba:	be 01       	movw	r22, r28
     2bc:	6f 5f       	subi	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	ce 01       	movw	r24, r28
     2c2:	03 96       	adiw	r24, 0x03	; 3
     2c4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ATM_panValidity>
     2c8:	b8 2e       	mov	r11, r24
							TERMINAL_display("\r\n");
     2ca:	85 ee       	ldi	r24, 0xE5	; 229
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							TERMINAL_display(pu8_atmPANBuffer);
     2d2:	ce 01       	movw	r24, r28
     2d4:	03 96       	adiw	r24, 0x03	; 3
     2d6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							TERMINAL_display("\r\n");
     2da:	85 ee       	ldi	r24, 0xE5	; 229
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							if(u8_panValidity)
     2e2:	bb 20       	and	r11, r11
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <main+0x1d4>
     2e6:	9f c0       	rjmp	.+318    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
							{
								DIO_SetPinValue(PORTD,PIN7,HIGH);
     2e8:	41 e0       	ldi	r20, 0x01	; 1
     2ea:	67 e0       	ldi	r22, 0x07	; 7
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
								SPI_slaveReceiveString(pu8_atmPINBuffer,u8_PIN_SIZE) ;
     2f2:	65 e0       	ldi	r22, 0x05	; 5
     2f4:	ce 01       	movw	r24, r28
     2f6:	44 96       	adiw	r24, 0x14	; 20
     2f8:	0e 94 8d 09 	call	0x131a	; 0x131a <SPI_slaveReceiveString>
								DIO_SetPinValue(PORTD,PIN7,LOW);
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	67 e0       	ldi	r22, 0x07	; 7
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
								LCD_command(DISPLAY_CLEAR) ;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
								LCD_printString(LCD_REQUIRE_PIN_STR);
     30c:	8a e2       	ldi	r24, 0x2A	; 42
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
								LCD_newLine();
     314:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
								u8_pinValidity = ATM_u8PinAccessGrant(pu8_atmPINBuffer) ;
     318:	ce 01       	movw	r24, r28
     31a:	44 96       	adiw	r24, 0x14	; 20
     31c:	0e 94 09 0c 	call	0x1812	; 0x1812 <ATM_u8PinAccessGrant>

								if(u8_pinValidity)
     320:	88 23       	and	r24, r24
     322:	09 f4       	brne	.+2      	; 0x326 <main+0x212>
     324:	59 c0       	rjmp	.+178    	; 0x3d8 <main+0x2c4>
								{
									u8_inputBalValid = ATM_u8checkBalanceValidity(pu8_enteredUserBal);
     326:	ce 01       	movw	r24, r28
     328:	49 96       	adiw	r24, 0x19	; 25
     32a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <ATM_u8checkBalanceValidity>

									if(u8_inputBalValid == u8_BALANCE_VALID )
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	61 f5       	brne	.+88     	; 0x38a <main+0x276>
									{
										u8_accBalValidty = ATM_u8checkAccounBal(pu8_enteredUserBal,pu8_userAccBal,u16_searchingPanRecordnum) ;
     332:	49 81       	ldd	r20, Y+1	; 0x01
     334:	5a 81       	ldd	r21, Y+2	; 0x02
     336:	be 01       	movw	r22, r28
     338:	60 5e       	subi	r22, 0xE0	; 224
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	ce 01       	movw	r24, r28
     33e:	49 96       	adiw	r24, 0x19	; 25
     340:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <ATM_u8checkAccounBal>
     344:	b8 2e       	mov	r11, r24
										LCD_command(DISPLAY_CLEAR);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
										DIO_SetPinValue(PORTD,PIN6,HIGH);
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	66 e0       	ldi	r22, 0x06	; 6
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
										LCD_printString("End of Trans.");
     356:	84 e3       	ldi	r24, 0x34	; 52
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
										TIMER0_msdelay(2000);
     35e:	80 ed       	ldi	r24, 0xD0	; 208
     360:	97 e0       	ldi	r25, 0x07	; 7
     362:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
										DIO_SetPinValue(PORTD,PIN6,LOW);
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	66 e0       	ldi	r22, 0x06	; 6
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
										if(u8_accBalValidty == u8_BALANCE_VALID)
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	b8 12       	cpse	r11, r24
     374:	87 c0       	rjmp	.+270    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
										{
											ATM_voidUpdateBalance(pu8_userAccBal,pu8_enteredUserBal,u16_searchingPanRecordnum);
     376:	49 81       	ldd	r20, Y+1	; 0x01
     378:	5a 81       	ldd	r21, Y+2	; 0x02
     37a:	be 01       	movw	r22, r28
     37c:	67 5e       	subi	r22, 0xE7	; 231
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	ce 01       	movw	r24, r28
     382:	80 96       	adiw	r24, 0x20	; 32
     384:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <ATM_voidUpdateBalance>
     388:	7d c0       	rjmp	.+250    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
										
										
									}
									else
									{
										LCD_command(DISPLAY_CLEAR);
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
										LCD_printString((uint8_t*)"balance entered");
     390:	82 e4       	ldi	r24, 0x42	; 66
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
										LCD_newLine();
     398:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
										LCD_printString((uint8_t*)"incorrect ");
     39c:	82 e5       	ldi	r24, 0x52	; 82
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
										TIMER0_msdelay(2000) ;
     3a4:	80 ed       	ldi	r24, 0xD0	; 208
     3a6:	97 e0       	ldi	r25, 0x07	; 7
     3a8:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
										LCD_command(DISPLAY_CLEAR);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
										DIO_SetPinValue(PORTD,PIN6,HIGH);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	66 e0       	ldi	r22, 0x06	; 6
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
										LCD_printString("End of Trans.");
     3bc:	84 e3       	ldi	r24, 0x34	; 52
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
										TIMER0_msdelay(2000);
     3c4:	80 ed       	ldi	r24, 0xD0	; 208
     3c6:	97 e0       	ldi	r25, 0x07	; 7
     3c8:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
										DIO_SetPinValue(PORTD,PIN6,LOW);											
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	66 e0       	ldi	r22, 0x06	; 6
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     3d6:	56 c0       	rjmp	.+172    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
									}
								}
								else
								{
									LCD_command(DISPLAY_CLEAR) ;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
									LCD_printString((uint8_t*)"PIN Entered") ;
     3de:	8d e5       	ldi	r24, 0x5D	; 93
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
									LCD_newLine() ;
     3e6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
									LCD_printString((uint8_t*)"NOT VALID") ;
     3ea:	89 e6       	ldi	r24, 0x69	; 105
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
									TIMER0_msdelay(2000);
     3f2:	80 ed       	ldi	r24, 0xD0	; 208
     3f4:	97 e0       	ldi	r25, 0x07	; 7
     3f6:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
									DIO_SetPinValue(PORTD,PIN6,HIGH);
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	66 e0       	ldi	r22, 0x06	; 6
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
									LCD_command(DISPLAY_CLEAR);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
									LCD_printString("End of Trans.");
     40a:	84 e3       	ldi	r24, 0x34	; 52
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
									TIMER0_msdelay(2000);
     412:	80 ed       	ldi	r24, 0xD0	; 208
     414:	97 e0       	ldi	r25, 0x07	; 7
     416:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
									DIO_SetPinValue(PORTD,PIN6,LOW);
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	66 e0       	ldi	r22, 0x06	; 6
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     424:	2f c0       	rjmp	.+94     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
								}
							}
							else
							{
								LCD_command(DISPLAY_CLEAR) ;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
								LCD_printString((uint8_t*)"card not");
     42c:	83 e7       	ldi	r24, 0x73	; 115
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
								LCD_newLine();
     434:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
								LCD_printString((uint8_t*)"recognized");
     438:	8c e7       	ldi	r24, 0x7C	; 124
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
								TIMER0_msdelay(2000);
     440:	80 ed       	ldi	r24, 0xD0	; 208
     442:	97 e0       	ldi	r25, 0x07	; 7
     444:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
								TIMER0_msdelay(10);
     448:	8a e0       	ldi	r24, 0x0A	; 10
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
								DIO_SetPinValue(PORTD,PIN6,HIGH);
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	66 e0       	ldi	r22, 0x06	; 6
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
								LCD_command(DISPLAY_CLEAR);
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
								LCD_printString("End of Trans.");
     460:	84 e3       	ldi	r24, 0x34	; 52
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
								TIMER0_msdelay(2000);
     468:	80 ed       	ldi	r24, 0xD0	; 208
     46a:	97 e0       	ldi	r25, 0x07	; 7
     46c:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
								DIO_SetPinValue(PORTD,PIN6,LOW);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	66 e0       	ldi	r22, 0x06	; 6
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
							}
						}
						else if (u8_keyPadReturnASCII == '2')
     47c:	82 33       	cpi	r24, 0x32	; 50
     47e:	11 f4       	brne	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
						{
							ATM_voidShowTemp() ;
     480:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ATM_voidShowTemp>
						}
						
				}while(u8_noExit);
     484:	d1 10       	cpse	r13, r1
     486:	d4 ce       	rjmp	.-600    	; 0x230 <main+0x11c>
     488:	6e ce       	rjmp	.-804    	; 0x166 <main+0x52>
					
			case ADMIN:
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
						u8_accessGranted = ACCESS_grant();
     48a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ACCESS_grant>
     48e:	b8 2e       	mov	r11, r24
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
     490:	cc 24       	eor	r12, r12
     492:	c3 94       	inc	r12
						u8_accessGranted = ACCESS_grant();
						
						while(u8_adminMode && u8_accessGranted)
     494:	b2 c0       	rjmp	.+356    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
						{	
							TERMINAL_display(NEW_LINE);
     496:	85 ee       	ldi	r24, 0xE5	; 229
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
						    TERMINAL_display(NEW_REC_STR);
     49e:	87 e8       	ldi	r24, 0x87	; 135
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							TERMINAL_display(MAX_BAL_STR);
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							TERMINAL_display(EXIT_STR);
     4ae:	8a eb       	ldi	r24, 0xBA	; 186
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							TERMINAL_display(CHOICE_STR);
     4b6:	88 ee       	ldi	r24, 0xE8	; 232
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							
						    u8_adminChoice = USART_u8Receive();
     4be:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <USART_u8Receive>
						
						    if(u8_adminChoice == NEW_REC)
     4c2:	81 33       	cpi	r24, 0x31	; 49
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	59 c0       	rjmp	.+178    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
						    {	
								do 
								{
									TERMINAL_display(NEW_LINE);
     4c8:	85 ee       	ldi	r24, 0xE5	; 229
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
									TERMINAL_display(REQUIRE_PAN_STR);
     4d0:	87 ec       	ldi	r24, 0xC7	; 199
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
									u8_panValid = TERMINAL_u8getInput(pu8_newRecPan, u8_PAN_MAX_SIZE, u8_PAN_MIN_SIZE);
     4d8:	49 e0       	ldi	r20, 0x09	; 9
     4da:	61 e1       	ldi	r22, 0x11	; 17
     4dc:	ce 01       	movw	r24, r28
     4de:	c3 96       	adiw	r24, 0x33	; 51
     4e0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <TERMINAL_u8getInput>
     4e4:	18 2f       	mov	r17, r24
									if (!u8_panValid)
     4e6:	81 11       	cpse	r24, r1
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
									{
										TERMINAL_display(WRONG_PAN_STR);
     4ea:	85 ed       	ldi	r24, 0xD5	; 213
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
									}
								} while(!u8_panValid);
     4f2:	11 23       	and	r17, r17
     4f4:	49 f3       	breq	.-46     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
								
								u16_recordNum = ATM_u16GetRecNum(pu8_arr);
     4f6:	ce 01       	movw	r24, r28
     4f8:	83 5a       	subi	r24, 0xA3	; 163
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <ATM_u16GetRecNum>
								
								EEPROM_u8WriteNeededPartBlock(u16_recordNum, u8_PAN_BYTE_NUM, pu8_newRecPan, u8_PAN_MAX_SIZE);
     500:	21 e1       	ldi	r18, 0x11	; 17
     502:	ae 01       	movw	r20, r28
     504:	4d 5c       	subi	r20, 0xCD	; 205
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
						
								do
								{
									TERMINAL_display(ENTER_BAL_STR);
     50e:	86 ee       	ldi	r24, 0xE6	; 230
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
									u8_balValid = TERMINAL_u8getInput(pu8_tempRecBal,u8_BALANCE_MAX_SIZE, u8_BALANCE_MIN_SIZE);
     516:	42 e0       	ldi	r20, 0x02	; 2
     518:	69 e0       	ldi	r22, 0x09	; 9
     51a:	ce 01       	movw	r24, r28
     51c:	83 5b       	subi	r24, 0xB3	; 179
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	0e 94 aa 0b 	call	0x1754	; 0x1754 <TERMINAL_u8getInput>
     524:	18 2f       	mov	r17, r24
									u8_digitsCount = ATM_u8getArrCount(pu8_tempRecBal);
     526:	ce 01       	movw	r24, r28
     528:	83 5b       	subi	r24, 0xB3	; 179
     52a:	9f 4f       	sbci	r25, 0xFF	; 255
     52c:	0e 94 cd 0b 	call	0x179a	; 0x179a <ATM_u8getArrCount>
     530:	08 2f       	mov	r16, r24
									if(!u8_balValid)
     532:	11 11       	cpse	r17, r1
     534:	04 c0       	rjmp	.+8      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
									{
										TERMINAL_display(WRONG_MAX_BAL_STR);
     536:	88 ef       	ldi	r24, 0xF8	; 248
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
									}
								}while (!u8_balValid);
     53e:	11 23       	and	r17, r17
     540:	31 f3       	breq	.-52     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
								
								ATM_voidstoreBalance(pu8_newRecBal,pu8_tempRecBal,u8_digitsCount);
     542:	40 2f       	mov	r20, r16
     544:	be 01       	movw	r22, r28
     546:	63 5b       	subi	r22, 0xB3	; 179
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	ce 01       	movw	r24, r28
     54c:	8c 5b       	subi	r24, 0xBC	; 188
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <ATM_voidstoreBalance>
								u16_recordNum = ATM_u16GetRecNum(pu8_arr);
     554:	ce 01       	movw	r24, r28
     556:	83 5a       	subi	r24, 0xA3	; 163
     558:	9f 4f       	sbci	r25, 0xFF	; 255
     55a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <ATM_u16GetRecNum>
     55e:	8c 01       	movw	r16, r24
								EEPROM_u8WriteNeededPartBlock(u16_recordNum, u8_BALANCE_BYTE_NUM, pu8_newRecBal, u8_BALANCE_MAX_SIZE);
     560:	29 e0       	ldi	r18, 0x09	; 9
     562:	ae 01       	movw	r20, r28
     564:	4c 5b       	subi	r20, 0xBC	; 188
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	64 e1       	ldi	r22, 0x14	; 20
     56a:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
								u16_recordNum++;
								ATM_voidStoreRecNum(u16_recordNum);
     56e:	c8 01       	movw	r24, r16
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <ATM_voidStoreRecNum>
								u8_recExist = TRUE;
     576:	01 e0       	ldi	r16, 0x01	; 1
     578:	40 c0       	rjmp	.+128    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
								
							}
						    else if(u8_adminChoice == SET_MAX_BAL)
     57a:	82 33       	cpi	r24, 0x32	; 50
     57c:	31 f5       	brne	.+76     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						    {
								TERMINAL_display(NEW_LINE);
     57e:	85 ee       	ldi	r24, 0xE5	; 229
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							    TERMINAL_display(REQUIRE_MAX_BAL_STR);
     586:	8d e0       	ldi	r24, 0x0D	; 13
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							    do
							    {
							    	u8_maxBalValid =  TERMINAL_u8getInput(pu8_maxBalance,u8_MAX_BALANCE_MAX_SIZE, u8_MAX_BALANCE_MIN_SIZE);
     58e:	47 e0       	ldi	r20, 0x07	; 7
     590:	67 e0       	ldi	r22, 0x07	; 7
     592:	ce 01       	movw	r24, r28
     594:	8a 5a       	subi	r24, 0xAA	; 170
     596:	9f 4f       	sbci	r25, 0xFF	; 255
     598:	0e 94 aa 0b 	call	0x1754	; 0x1754 <TERMINAL_u8getInput>
     59c:	18 2f       	mov	r17, r24
							    	if(!u8_maxBalValid)
     59e:	81 11       	cpse	r24, r1
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
							    	{
										TERMINAL_display(WRONG_MAX_BAL_STR);
     5a2:	88 ef       	ldi	r24, 0xF8	; 248
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
										TERMINAL_display(REQUIRE_MAX_BAL_STR);
     5aa:	8d e0       	ldi	r24, 0x0D	; 13
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
							    	}
							    }while(!u8_maxBalValid);
     5b2:	11 23       	and	r17, r17
     5b4:	61 f3       	breq	.-40     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
								
							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
     5b6:	27 e0       	ldi	r18, 0x07	; 7
     5b8:	ae 01       	movw	r20, r28
     5ba:	4a 5a       	subi	r20, 0xAA	; 170
     5bc:	5f 4f       	sbci	r21, 0xFF	; 255
     5be:	69 e1       	ldi	r22, 0x19	; 25
     5c0:	8e ef       	ldi	r24, 0xFE	; 254
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
     5c8:	18 c0       	rjmp	.+48     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
     5ca:	83 33       	cpi	r24, 0x33	; 51
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
     5ce:	01 11       	cpse	r16, r1
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
								u8_adminMode     = FALSE;
								u8_accessGranted = FALSE;
								u8_flag          = TRUE;
								u8_chooseState   = TRUE;
						    }
							else if (u8_adminChoice == EXIT && u8_recExist == FALSE)
     5d2:	83 33       	cpi	r24, 0x33	; 51
     5d4:	39 f4       	brne	.+14     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
     5d6:	01 11       	cpse	r16, r1
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
							{
								TERMINAL_display(NO_REC_TO_EXIT_STR);
     5da:	83 e2       	ldi	r24, 0x23	; 35
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
     5e2:	0b c0       	rjmp	.+22     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
							}
							else 
							{
								TERMINAL_display(WRONG_CHOICE_STR);
     5e4:	8e ef       	ldi	r24, 0xFE	; 254
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
     5ec:	06 c0       	rjmp	.+12     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
						    {
								u8_adminMode     = FALSE;
								u8_accessGranted = FALSE;
     5ee:	b1 2c       	mov	r11, r1
								
							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
						    {
								u8_adminMode     = FALSE;
     5f0:	c1 2c       	mov	r12, r1
								u8_accessGranted = FALSE;
								u8_flag          = TRUE;
								u8_chooseState   = TRUE;
     5f2:	aa 24       	eor	r10, r10
     5f4:	a3 94       	inc	r10
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
						    {
								u8_adminMode     = FALSE;
								u8_accessGranted = FALSE;
								u8_flag          = TRUE;
     5f6:	ff 24       	eor	r15, r15
     5f8:	f3 94       	inc	r15
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
						u8_accessGranted = ACCESS_grant();
						
						while(u8_adminMode && u8_accessGranted)
     5fa:	cc 20       	and	r12, r12
     5fc:	09 f4       	brne	.+2      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
     5fe:	b1 cd       	rjmp	.-1182   	; 0x162 <main+0x4e>
     600:	b1 10       	cpse	r11, r1
     602:	49 cf       	rjmp	.-366    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
						
				}while(u8_noExit);
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
     604:	11 e0       	ldi	r17, 0x01	; 1
						u8_firstLogin = FALSE;
     606:	c1 2c       	mov	r12, r1
     608:	ae cd       	rjmp	.-1188   	; 0x166 <main+0x52>

0000060a <BUZZER_en>:
#include "BUZZER_cfg.h"
#include "BUZZER.h"

void BUZZER_en(void)
{
	DIO_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	63 e0       	ldi	r22, 0x03	; 3
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
     614:	08 95       	ret

00000616 <BUZZER_on>:
}

void BUZZER_on(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	63 e0       	ldi	r22, 0x03	; 3
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     620:	08 95       	ret

00000622 <BUZZER_off>:
}

void BUZZER_off(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     62c:	08 95       	ret

0000062e <EEPROM_voidInit>:
	else
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ;
	}
	return u8_ErrorInArg ;
}
     62e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <I2C_masterInit>
     632:	08 95       	ret

00000634 <EEPROM_u8WriteNeededPartBlock>:
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	e2 2f       	mov	r30, r18
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e6 0f       	add	r30, r22
     646:	f1 1d       	adc	r31, r1
     648:	e0 34       	cpi	r30, 0x40	; 64
     64a:	f1 05       	cpc	r31, r1
     64c:	a4 f5       	brge	.+104    	; 0x6b6 <EEPROM_u8WriteNeededPartBlock+0x82>
     64e:	81 15       	cp	r24, r1
     650:	32 e0       	ldi	r19, 0x02	; 2
     652:	93 07       	cpc	r25, r19
     654:	90 f5       	brcc	.+100    	; 0x6ba <EEPROM_u8WriteNeededPartBlock+0x86>
     656:	41 15       	cp	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	89 f1       	breq	.+98     	; 0x6be <EEPROM_u8WriteNeededPartBlock+0x8a>
     65c:	d2 2f       	mov	r29, r18
     65e:	8a 01       	movw	r16, r20
     660:	c6 2f       	mov	r28, r22
     662:	7c 01       	movw	r14, r24
     664:	0e 94 02 09 	call	0x1204	; 0x1204 <I2C_masterStart>
     668:	80 e5       	ldi	r24, 0x50	; 80
     66a:	0e 94 17 09 	call	0x122e	; 0x122e <I2C_masterWriteToAddress>
     66e:	c7 01       	movw	r24, r14
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
     67c:	8e 2d       	mov	r24, r14
     67e:	82 95       	swap	r24
     680:	88 0f       	add	r24, r24
     682:	88 0f       	add	r24, r24
     684:	80 7c       	andi	r24, 0xC0	; 192
     686:	8c 2b       	or	r24, r28
     688:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <EEPROM_u8WriteNeededPartBlock+0x76>
     690:	f8 01       	movw	r30, r16
     692:	ec 0f       	add	r30, r28
     694:	f1 1d       	adc	r31, r1
     696:	80 81       	ld	r24, Z
     698:	88 23       	and	r24, r24
     69a:	21 f0       	breq	.+8      	; 0x6a4 <EEPROM_u8WriteNeededPartBlock+0x70>
     69c:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
     6a0:	cf 5f       	subi	r28, 0xFF	; 255
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <EEPROM_u8WriteNeededPartBlock+0x76>
     6a4:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <EEPROM_u8WriteNeededPartBlock+0x7a>
     6aa:	cd 17       	cp	r28, r29
     6ac:	88 f3       	brcs	.-30     	; 0x690 <EEPROM_u8WriteNeededPartBlock+0x5c>
     6ae:	0e 94 70 09 	call	0x12e0	; 0x12e0 <I2C_masterStop>
     6b2:	87 e9       	ldi	r24, 0x97	; 151
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <EEPROM_u8WriteNeededPartBlock+0x8c>
     6b6:	86 e9       	ldi	r24, 0x96	; 150
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <EEPROM_u8WriteNeededPartBlock+0x8c>
     6ba:	86 e9       	ldi	r24, 0x96	; 150
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <EEPROM_u8WriteNeededPartBlock+0x8c>
     6be:	86 e9       	ldi	r24, 0x96	; 150
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <EEPROM_u8ReadNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ;
	uint8_t u8_dummy = u8_EEPROM_INTIAL_VAL;
	
	if(((u8_EEPROM_MAX_BYTE_ADDRESS-u8_ByteNum)>=u8_ArrSize)  && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && pu8_ArrWantedToRead!=NULL_POINTER )
     6da:	e0 e4       	ldi	r30, 0x40	; 64
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	e6 1b       	sub	r30, r22
     6e0:	f1 09       	sbc	r31, r1
     6e2:	a2 2f       	mov	r26, r18
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	ea 17       	cp	r30, r26
     6e8:	fb 07       	cpc	r31, r27
     6ea:	bc f1       	brlt	.+110    	; 0x75a <EEPROM_u8ReadNeededPartBlock+0x8c>
     6ec:	81 15       	cp	r24, r1
     6ee:	32 e0       	ldi	r19, 0x02	; 2
     6f0:	93 07       	cpc	r25, r19
     6f2:	a8 f5       	brcc	.+106    	; 0x75e <EEPROM_u8ReadNeededPartBlock+0x90>
     6f4:	41 15       	cp	r20, r1
     6f6:	51 05       	cpc	r21, r1
     6f8:	a1 f1       	breq	.+104    	; 0x762 <EEPROM_u8ReadNeededPartBlock+0x94>
     6fa:	d2 2f       	mov	r29, r18
     6fc:	8a 01       	movw	r16, r20
     6fe:	c6 2f       	mov	r28, r22
     700:	7c 01       	movw	r14, r24
	{
		
		I2C_masterStart();
     702:	0e 94 02 09 	call	0x1204	; 0x1204 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD);
     706:	80 e5       	ldi	r24, 0x50	; 80
     708:	0e 94 17 09 	call	0x122e	; 0x122e <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ;
     70c:	c7 01       	movw	r24, r14
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	96 95       	lsr	r25
     714:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd) ;
     716:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
     71a:	8e 2d       	mov	r24, r14
     71c:	82 95       	swap	r24
     71e:	88 0f       	add	r24, r24
     720:	88 0f       	add	r24, r24
     722:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum|=u8_PageAdd ;
		I2C_masterWriteData(u8_ByteNum) ;
     724:	8c 2b       	or	r24, r28
     726:	0e 94 4f 09 	call	0x129e	; 0x129e <I2C_masterWriteData>
		I2C_repeatedStart();
     72a:	0e 94 0d 09 	call	0x121a	; 0x121a <I2C_repeatedStart>
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
     72e:	80 e5       	ldi	r24, 0x50	; 80
     730:	0e 94 2f 09 	call	0x125e	; 0x125e <I2C_masterReadFromAddress>
		for(u8_ArrIndex = u8_EEPROM_INTIAL_VAL; u8_ArrIndex < u8_ArrSize; u8_ArrIndex++)
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	09 c0       	rjmp	.+18     	; 0x74a <EEPROM_u8ReadNeededPartBlock+0x7c>
		{
			
			pu8_ArrWantedToRead[u8_ArrIndex] = I2C_masterReadData();
     738:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <I2C_masterReadData>
     73c:	f8 01       	movw	r30, r16
     73e:	ec 0f       	add	r30, r28
     740:	f1 1d       	adc	r31, r1
     742:	80 83       	st	Z, r24
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
     744:	88 23       	and	r24, r24
     746:	19 f0       	breq	.+6      	; 0x74e <EEPROM_u8ReadNeededPartBlock+0x80>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ;
		I2C_masterWriteData(u8_ByteNum) ;
		I2C_repeatedStart();
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
		for(u8_ArrIndex = u8_EEPROM_INTIAL_VAL; u8_ArrIndex < u8_ArrSize; u8_ArrIndex++)
     748:	cf 5f       	subi	r28, 0xFF	; 255
     74a:	cd 17       	cp	r28, r29
     74c:	a8 f3       	brcs	.-22     	; 0x738 <EEPROM_u8ReadNeededPartBlock+0x6a>
			{
				
				break;
			}
		}
		u8_dummy = I2C_masterReadFinalData();
     74e:	0e 94 65 09 	call	0x12ca	; 0x12ca <I2C_masterReadFinalData>
		I2C_masterStop();
     752:	0e 94 70 09 	call	0x12e0	; 0x12e0 <I2C_masterStop>

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ;
     756:	87 e9       	ldi	r24, 0x97	; 151
				
				break;
			}
		}
		u8_dummy = I2C_masterReadFinalData();
		I2C_masterStop();
     758:	05 c0       	rjmp	.+10     	; 0x764 <EEPROM_u8ReadNeededPartBlock+0x96>
	}
	else
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ;
     75a:	86 e9       	ldi	r24, 0x96	; 150
     75c:	03 c0       	rjmp	.+6      	; 0x764 <EEPROM_u8ReadNeededPartBlock+0x96>
     75e:	86 e9       	ldi	r24, 0x96	; 150
     760:	01 c0       	rjmp	.+2      	; 0x764 <EEPROM_u8ReadNeededPartBlock+0x96>
     762:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ;
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	08 95       	ret

00000772 <Key_U8Delay>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


uint32_t Key_U8Delay(uint8_t au8_delayper_milli)
{
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17

	uint32_t au32_delay_micro =(uint32_t) au8_delayper_milli *(uint32_t)1000;
     776:	28 2f       	mov	r18, r24
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	a8 ee       	ldi	r26, 0xE8	; 232
     77c:	b3 e0       	ldi	r27, 0x03	; 3
     77e:	0e 94 de 12 	call	0x25bc	; 0x25bc <__umulhisi3>

	uint32_t au32_counter=0;
	au32_counter = au32_delay_micro *8;
     782:	8b 01       	movw	r16, r22
     784:	9c 01       	movw	r18, r24
     786:	00 0f       	add	r16, r16
     788:	11 1f       	adc	r17, r17
     78a:	22 1f       	adc	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	00 0f       	add	r16, r16
     790:	11 1f       	adc	r17, r17
     792:	22 1f       	adc	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	00 0f       	add	r16, r16
     798:	11 1f       	adc	r17, r17
     79a:	22 1f       	adc	r18, r18
     79c:	33 1f       	adc	r19, r19
	for(uint32_t au64_Local_counter =0 ;au64_Local_counter<(au32_counter/8) ;au64_Local_counter++)
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	dc 01       	movw	r26, r24
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <Key_U8Delay+0x3a>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	a1 1d       	adc	r26, r1
     7aa:	b1 1d       	adc	r27, r1
     7ac:	b9 01       	movw	r22, r18
     7ae:	a8 01       	movw	r20, r16
     7b0:	68 94       	set
     7b2:	12 f8       	bld	r1, 2
     7b4:	76 95       	lsr	r23
     7b6:	67 95       	ror	r22
     7b8:	57 95       	ror	r21
     7ba:	47 95       	ror	r20
     7bc:	16 94       	lsr	r1
     7be:	d1 f7       	brne	.-12     	; 0x7b4 <Key_U8Delay+0x42>
     7c0:	84 17       	cp	r24, r20
     7c2:	95 07       	cpc	r25, r21
     7c4:	a6 07       	cpc	r26, r22
     7c6:	b7 07       	cpc	r27, r23
     7c8:	70 f3       	brcs	.-36     	; 0x7a6 <Key_U8Delay+0x34>
	{

	}
	return au32_counter ;
}
     7ca:	c9 01       	movw	r24, r18
     7cc:	b8 01       	movw	r22, r16
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <Keyad_VoidINit>:

void Keyad_VoidINit(void){

	// DIO_SetPortDirection(PORTD ,0b00001111);
	/*all rows inputs */
	DIO_SetPinDirection(PORTC ,PIN2 ,INPUT);
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	62 e0       	ldi	r22, 0x02	; 2
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN3 ,INPUT);
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN4 ,INPUT);
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	64 e0       	ldi	r22, 0x04	; 4
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB ,PIN2 ,INPUT);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>

	/*all columns are outputs*/
	DIO_SetPinDirection(PORTC ,PIN5 ,OUTPUT);
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN6 ,OUTPUT);
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	66 e0       	ldi	r22, 0x06	; 6
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN7 ,OUTPUT);
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	67 e0       	ldi	r22, 0x07	; 7
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB ,PIN3 ,OUTPUT);
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	63 e0       	ldi	r22, 0x03	; 3
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	/*all output high*/
	DIO_SetPinValue(PORTC , PIN5 , HIGH);
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN6 , HIGH);
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	66 e0       	ldi	r22, 0x06	; 6
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN7 , HIGH);
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN3 , HIGH);
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	/*pull up for inputs*/
	DIO_SetPinValue(PORTC , PIN2 , HIGH);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN3 , HIGH);
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN4 , HIGH);
     860:	41 e0       	ldi	r20, 0x01	; 1
     862:	64 e0       	ldi	r22, 0x04	; 4
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN2 , HIGH);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	62 e0       	ldi	r22, 0x02	; 2
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     874:	08 95       	ret

00000876 <KeyPad_U8Data>:
}


uint8_t KeyPad_U8Data(void)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
	uint8_t au8_Copy_Pressed_key=20;
	uint8_t au8_Copy_Colum;
	uint8_t au8_Copy_Row;

	for(au8_Copy_Colum=START_CO;au8_Copy_Colum<=MAX_CO;au8_Copy_Colum++)
     87a:	d5 e0       	ldi	r29, 0x05	; 5
     87c:	70 c0       	rjmp	.+224    	; 0x95e <KeyPad_U8Data+0xe8>
	{
		if(au8_Copy_Colum == 8 )
     87e:	d8 30       	cpi	r29, 0x08	; 8
     880:	39 f4       	brne	.+14     	; 0x890 <KeyPad_U8Data+0x1a>
		{
			DIO_SetPinValue(PORTB , PIN3 , LOW);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN2 , HIGH);
}


uint8_t KeyPad_U8Data(void)
{
     88c:	c2 e0       	ldi	r28, 0x02	; 2
     88e:	56 c0       	rjmp	.+172    	; 0x93c <KeyPad_U8Data+0xc6>
		{
			DIO_SetPinValue(PORTB , PIN3 , LOW);
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), LOW);
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	6d 2f       	mov	r22, r29
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     89a:	f8 cf       	rjmp	.-16     	; 0x88c <KeyPad_U8Data+0x16>
		}
		for(au8_Copy_Row=START_ROW;au8_Copy_Row<=MAX_ROW; au8_Copy_Row++)
		{

			if(au8_Copy_Row <5)
     89c:	c5 30       	cpi	r28, 0x05	; 5
     89e:	30 f5       	brcc	.+76     	; 0x8ec <KeyPad_U8Data+0x76>
			{
				if ((LOW == DIO_GetPinValue(PORTC,(au8_Copy_Row))) )
     8a0:	6c 2f       	mov	r22, r28
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_GetPinValue>
     8a8:	81 11       	cpse	r24, r1
     8aa:	47 c0       	rjmp	.+142    	; 0x93a <KeyPad_U8Data+0xc4>
				{
					Key_U8Delay(40);
     8ac:	88 e2       	ldi	r24, 0x28	; 40
     8ae:	0e 94 b9 03 	call	0x772	; 0x772 <Key_U8Delay>

					while((LOW == DIO_GetPinValue(PORTC,au8_Copy_Row )));
     8b2:	6c 2f       	mov	r22, r28
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_GetPinValue>
     8ba:	88 23       	and	r24, r24
     8bc:	d1 f3       	breq	.-12     	; 0x8b2 <KeyPad_U8Data+0x3c>

					DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	6d 2f       	mov	r22, r29
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
					return g_keymap[au8_Copy_Row-2][au8_Copy_Colum-5];
     8c8:	8c 2f       	mov	r24, r28
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 97       	sbiw	r24, 0x02	; 2
     8ce:	2d 2f       	mov	r18, r29
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	25 50       	subi	r18, 0x05	; 5
     8d4:	31 09       	sbc	r19, r1
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	82 5b       	subi	r24, 0xB2	; 178
     8e0:	9d 4f       	sbci	r25, 0xFD	; 253
     8e2:	fc 01       	movw	r30, r24
     8e4:	e2 0f       	add	r30, r18
     8e6:	f3 1f       	adc	r31, r19
     8e8:	80 81       	ld	r24, Z
     8ea:	3d c0       	rjmp	.+122    	; 0x966 <KeyPad_U8Data+0xf0>
				else
				{/*for MEZRARULE */};
			}
			else
			{
				if ( ( LOW== DIO_GetPinValue(PORTB,PIN2) ) )
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_GetPinValue>
     8f4:	81 11       	cpse	r24, r1
     8f6:	21 c0       	rjmp	.+66     	; 0x93a <KeyPad_U8Data+0xc4>
				{
					Key_U8Delay(20);
     8f8:	84 e1       	ldi	r24, 0x14	; 20
     8fa:	0e 94 b9 03 	call	0x772	; 0x772 <Key_U8Delay>

					while((LOW == DIO_GetPinValue(PORTB,PIN2 ) ))
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <KeyPad_U8Data+0x94>

					DIO_SetPinValue(PORTB , PIN3 , HIGH);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	63 e0       	ldi	r22, 0x03	; 3
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			{
				if ( ( LOW== DIO_GetPinValue(PORTB,PIN2) ) )
				{
					Key_U8Delay(20);

					while((LOW == DIO_GetPinValue(PORTB,PIN2 ) ))
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_GetPinValue>
     912:	88 23       	and	r24, r24
     914:	a9 f3       	breq	.-22     	; 0x900 <KeyPad_U8Data+0x8a>

					DIO_SetPinValue(PORTB , PIN3 , HIGH);

					return g_keymap[au8_Copy_Row-2][au8_Copy_Colum-5];
     916:	8c 2f       	mov	r24, r28
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 97       	sbiw	r24, 0x02	; 2
     91c:	2d 2f       	mov	r18, r29
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	25 50       	subi	r18, 0x05	; 5
     922:	31 09       	sbc	r19, r1
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	82 5b       	subi	r24, 0xB2	; 178
     92e:	9d 4f       	sbci	r25, 0xFD	; 253
     930:	fc 01       	movw	r30, r24
     932:	e2 0f       	add	r30, r18
     934:	f3 1f       	adc	r31, r19
     936:	80 81       	ld	r24, Z
     938:	16 c0       	rjmp	.+44     	; 0x966 <KeyPad_U8Data+0xf0>
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), LOW);
		}
		for(au8_Copy_Row=START_ROW;au8_Copy_Row<=MAX_ROW; au8_Copy_Row++)
     93a:	cf 5f       	subi	r28, 0xFF	; 255
     93c:	c6 30       	cpi	r28, 0x06	; 6
     93e:	08 f4       	brcc	.+2      	; 0x942 <KeyPad_U8Data+0xcc>
     940:	ad cf       	rjmp	.-166    	; 0x89c <KeyPad_U8Data+0x26>
				{/*for MEZRARULE */};
			}


		}
		if(au8_Copy_Colum == 8 )
     942:	d8 30       	cpi	r29, 0x08	; 8
     944:	31 f4       	brne	.+12     	; 0x952 <KeyPad_U8Data+0xdc>
		{
			DIO_SetPinValue(PORTB , PIN3 , HIGH);
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	63 e0       	ldi	r22, 0x03	; 3
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     950:	05 c0       	rjmp	.+10     	; 0x95c <KeyPad_U8Data+0xe6>
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	6d 2f       	mov	r22, r29
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
{
	uint8_t au8_Copy_Pressed_key=20;
	uint8_t au8_Copy_Colum;
	uint8_t au8_Copy_Row;

	for(au8_Copy_Colum=START_CO;au8_Copy_Colum<=MAX_CO;au8_Copy_Colum++)
     95c:	df 5f       	subi	r29, 0xFF	; 255
     95e:	d9 30       	cpi	r29, 0x09	; 9
     960:	08 f4       	brcc	.+2      	; 0x964 <KeyPad_U8Data+0xee>
     962:	8d cf       	rjmp	.-230    	; 0x87e <KeyPad_U8Data+0x8>
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
		}
	}


	return au8_Copy_Pressed_key;
     964:	84 e1       	ldi	r24, 0x14	; 20


}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <LCD_command>:
	LCD_command(0x0C);
	TIMER0_msdelay(10);                                    
}

void LCD_command(uint8_t u8_command)
{	
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
	/**************************************************************/ 
	
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER =  (DATA_REGISTER & (0x0F)) |  (u8_command & (0xF0));
     970:	8b b3       	in	r24, 0x1b	; 27
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	9c 2f       	mov	r25, r28
     976:	90 7f       	andi	r25, 0xF0	; 240
     978:	89 2b       	or	r24, r25
     97a:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,LOW);
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     990:	8a e0       	ldi	r24, 0x0A	; 10
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	63 e0       	ldi	r22, 0x03	; 3
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     9a2:	8a e0       	ldi	r24, 0x0A	; 10
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_command << 4);
     9aa:	2b b3       	in	r18, 0x1b	; 27
     9ac:	30 e1       	ldi	r19, 0x10	; 16
     9ae:	c3 9f       	mul	r28, r19
     9b0:	c0 01       	movw	r24, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	92 2f       	mov	r25, r18
     9b6:	9f 70       	andi	r25, 0x0F	; 15
     9b8:	89 2b       	or	r24, r25
     9ba:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);  /**********************************************************/
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Here we set EN pin to high when reading               */
     9c6:	8a e0       	ldi	r24, 0x0A	; 10
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
     9d8:	8a e0       	ldi	r24, 0x0A	; 10
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
}                                    /**********************************************************/
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <LCD_init>:
#include "../../MCAL/TIMERS/TIMERS.h"
#include "LCD.h"

void LCD_init()
{
	TIMER0_msdelay(100);
     9e4:	84 e6       	ldi	r24, 0x64	; 100
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	/*******************************************************/
	/* Configuring LCD Control and Data pins to be outputs */
	/*******************************************************/
	DIO_SetPinDirection(PORTA,RS,OUTPUT);
     9ec:	41 e0       	ldi	r20, 0x01	; 1
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,RW,OUTPUT);
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	62 e0       	ldi	r22, 0x02	; 2
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,EN,OUTPUT);
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	63 e0       	ldi	r22, 0x03	; 3
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D4,OUTPUT);
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D5,OUTPUT);
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	65 e0       	ldi	r22, 0x05	; 5
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D6,OUTPUT);
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	66 e0       	ldi	r22, 0x06	; 6
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D7,OUTPUT);
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	//TIMER0_msdelay(100);
	
	/********************/
	/* Initial Commands */
	/********************/    
	LCD_command(0x3);
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x3);
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a46:	8a e0       	ldi	r24, 0x0A	; 10
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x3);
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a54:	8a e0       	ldi	r24, 0x0A	; 10
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x2);
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x28);
     a6a:	88 e2       	ldi	r24, 0x28	; 40
     a6c:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x08);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x01);
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x06);
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	LCD_command(0x0C);
     aa2:	8c e0       	ldi	r24, 0x0C	; 12
     aa4:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	TIMER0_msdelay(10);                                    
     aa8:	8a e0       	ldi	r24, 0x0A	; 10
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
     ab0:	08 95       	ret

00000ab2 <LCD_data>:
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
}                                    /**********************************************************/

void LCD_data(uint8_t u8_data)
{	
     ab2:	cf 93       	push	r28
     ab4:	c8 2f       	mov	r28, r24
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data & (0xF0));
     ab6:	8b b3       	in	r24, 0x1b	; 27
     ab8:	8f 70       	andi	r24, 0x0F	; 15
     aba:	9c 2f       	mov	r25, r28
     abc:	90 7f       	andi	r25, 0xF0	; 240
     abe:	89 2b       	or	r24, r25
     ac0:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,HIGH);
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     ae8:	8a e0       	ldi	r24, 0x0A	; 10
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data << 4);
     af0:	2b b3       	in	r18, 0x1b	; 27
     af2:	30 e1       	ldi	r19, 0x10	; 16
     af4:	c3 9f       	mul	r28, r19
     af6:	c0 01       	movw	r24, r0
     af8:	11 24       	eor	r1, r1
     afa:	92 2f       	mov	r25, r18
     afc:	9f 70       	andi	r25, 0x0F	; 15
     afe:	89 2b       	or	r24, r25
     b00:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	63 e0       	ldi	r22, 0x03	; 3
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	63 e0       	ldi	r22, 0x03	; 3
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	TIMER0_msdelay(10); 
     b1e:	8a e0       	ldi	r24, 0x0A	; 10
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
}
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <LCD_printString>:

void LCD_printString(uint8_t* stream)
{
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	8c 01       	movw	r16, r24
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     b32:	c0 e0       	ldi	r28, 0x00	; 0
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <LCD_printString+0x12>
	{
		LCD_data(stream[u8_index]);
     b36:	0e 94 59 05 	call	0xab2	; 0xab2 <LCD_data>

void LCD_printString(uint8_t* stream)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     b3a:	cf 5f       	subi	r28, 0xFF	; 255
     b3c:	f8 01       	movw	r30, r16
     b3e:	ec 0f       	add	r30, r28
     b40:	f1 1d       	adc	r31, r1
     b42:	80 81       	ld	r24, Z
     b44:	81 11       	cpse	r24, r1
     b46:	f7 cf       	rjmp	.-18     	; 0xb36 <LCD_printString+0xc>
	{
		LCD_data(stream[u8_index]);
	}
}
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <LCD_printDigits>:

void LCD_printDigits(uint32_t u32_number)
{	volatile uint8_t  u8_temp;
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	28 97       	sbiw	r28, 0x08	; 8
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t  u8_weight;
	volatile uint8_t  u8_data;
	volatile uint8_t  u8_digits;
	volatile float    f32_temp;
	
	u8_weight = log10(u32_number);
     b6c:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	0e 94 c2 10 	call	0x2184	; 0x2184 <log10>
     b78:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
     b7c:	6a 83       	std	Y+2, r22	; 0x02
	u8_digits = (u8_weight + 1);
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	8c 83       	std	Y+4, r24	; 0x04
	u8_temp   = (u32_number / pow(10,u8_weight));
     b84:	6a 81       	ldd	r22, Y+2	; 0x02
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e2       	ldi	r24, 0x20	; 32
     b9a:	91 e4       	ldi	r25, 0x41	; 65
     b9c:	0e 94 87 11 	call	0x230e	; 0x230e <pow>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__divsf3>
     bac:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
     bb0:	69 83       	std	Y+1, r22	; 0x01
	f32_temp  = ((u32_number*1.0) / pow(10,u8_weight));
     bb2:	6a 81       	ldd	r22, Y+2	; 0x02
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	91 e4       	ldi	r25, 0x41	; 65
     bca:	0e 94 87 11 	call	0x230e	; 0x230e <pow>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__divsf3>
     bda:	6d 83       	std	Y+5, r22	; 0x05
     bdc:	7e 83       	std	Y+6, r23	; 0x06
     bde:	8f 83       	std	Y+7, r24	; 0x07
     be0:	98 87       	std	Y+8, r25	; 0x08
	do
	{
		u8_data  = (u8_temp | (3 << 4));
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 63       	ori	r24, 0x30	; 48
     be6:	8b 83       	std	Y+3, r24	; 0x03
		LCD_data(u8_data);
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	0e 94 59 05 	call	0xab2	; 0xab2 <LCD_data>
		u8_digits--;
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	8c 83       	std	Y+4, r24	; 0x04
		f32_temp = f32_temp - u8_temp;
     bf4:	cd 80       	ldd	r12, Y+5	; 0x05
     bf6:	de 80       	ldd	r13, Y+6	; 0x06
     bf8:	ef 80       	ldd	r14, Y+7	; 0x07
     bfa:	f8 84       	ldd	r15, Y+8	; 0x08
     bfc:	69 81       	ldd	r22, Y+1	; 0x01
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	c7 01       	movw	r24, r14
     c0e:	b6 01       	movw	r22, r12
     c10:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     c14:	6d 83       	std	Y+5, r22	; 0x05
     c16:	7e 83       	std	Y+6, r23	; 0x06
     c18:	8f 83       	std	Y+7, r24	; 0x07
     c1a:	98 87       	std	Y+8, r25	; 0x08
		u8_temp  = (f32_temp * 10);
     c1c:	6d 81       	ldd	r22, Y+5	; 0x05
     c1e:	7e 81       	ldd	r23, Y+6	; 0x06
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	98 85       	ldd	r25, Y+8	; 0x08
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	0e 94 1a 11 	call	0x2234	; 0x2234 <__mulsf3>
     c30:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
     c34:	69 83       	std	Y+1, r22	; 0x01
		f32_temp = (f32_temp *(10*1.0));
     c36:	6d 81       	ldd	r22, Y+5	; 0x05
     c38:	7e 81       	ldd	r23, Y+6	; 0x06
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	0e 94 1a 11 	call	0x2234	; 0x2234 <__mulsf3>
     c4a:	6d 83       	std	Y+5, r22	; 0x05
     c4c:	7e 83       	std	Y+6, r23	; 0x06
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	98 87       	std	Y+8, r25	; 0x08
	} while (u8_digits);
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	81 11       	cpse	r24, r1
     c56:	c5 cf       	rjmp	.-118    	; 0xbe2 <LCD_printDigits+0x92>
}
     c58:	28 96       	adiw	r28, 0x08	; 8
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	08 95       	ret

00000c72 <LCD_cursorMove>:

void LCD_cursorMove(uint8_t u8_direction, uint8_t u8_numOfMoves){
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	d8 2f       	mov	r29, r24
     c7a:	16 2f       	mov	r17, r22
	
uint8_t u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;
for(u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;u8_counterMoveCursor < u8_numOfMoves;u8_counterMoveCursor++)
     c7c:	c0 e0       	ldi	r28, 0x00	; 0
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <LCD_cursorMove+0x36>
{
	if(LEFT == u8_direction){
     c80:	d0 31       	cpi	r29, 0x10	; 16
     c82:	41 f4       	brne	.+16     	; 0xc94 <LCD_cursorMove+0x22>
		LCD_command(LEFT);
     c84:	80 e1       	ldi	r24, 0x10	; 16
     c86:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
		TIMER0_msdelay(5);
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <LCD_cursorMove+0x34>
	}
	else if(RIGHT == u8_direction){
     c94:	d4 31       	cpi	r29, 0x14	; 20
     c96:	39 f4       	brne	.+14     	; 0xca6 <LCD_cursorMove+0x34>
		LCD_command(RIGHT);
     c98:	84 e1       	ldi	r24, 0x14	; 20
     c9a:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
		TIMER0_msdelay(5);
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
}

void LCD_cursorMove(uint8_t u8_direction, uint8_t u8_numOfMoves){
	
uint8_t u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;
for(u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;u8_counterMoveCursor < u8_numOfMoves;u8_counterMoveCursor++)
     ca6:	cf 5f       	subi	r28, 0xFF	; 255
     ca8:	c1 17       	cp	r28, r17
     caa:	50 f3       	brcs	.-44     	; 0xc80 <LCD_cursorMove+0xe>
	else if(RIGHT == u8_direction){
		LCD_command(RIGHT);
		TIMER0_msdelay(5);
	}
}
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	08 95       	ret

00000cb4 <LCD_newLine>:

void LCD_newLine(void)
{
	LCD_command(0xC0);
     cb4:	80 ec       	ldi	r24, 0xC0	; 192
     cb6:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
     cba:	08 95       	ret

00000cbc <LM35_voidInit>:



void LM35_voidInit(void) 
{
	DIO_SetPinDirection(PORTA,PIN0,INPUT);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTA,PIN0,LOW);
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
	ADC_voidInit(); 
     cd0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <ADC_voidInit>
	ADC_voidStartConversion();
     cd4:	0e 94 6e 07 	call	0xedc	; 0xedc <ADC_voidStartConversion>
     cd8:	08 95       	ret

00000cda <LM35_u8GetTempInC>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <LM35_u8GetTempInC+0xa>
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     cea:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16_AdcResult = u8_LM35_INTIALIZE_VAR ;
     cec:	1b 82       	std	Y+3, r1	; 0x03
     cee:	1a 82       	std	Y+2, r1	; 0x02
	if(pu8_ReturnAvgTemp!=NULL_POINTER)
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <LM35_u8GetTempInC+0x1c>
     cf4:	56 c0       	rjmp	.+172    	; 0xda2 <LM35_u8GetTempInC+0xc8>
     cf6:	8c 01       	movw	r16, r24
	{
		ADC_u8GetFlagInt(&u8_AdcIntFlag); 
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_u8GetFlagInt>
		if(u8_AdcIntFlag==u8_ADC_FLAG_RISE )
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	a1 f4       	brne	.+40     	; 0xd2e <LM35_u8GetTempInC+0x54>
		{
			ADC_u8GetResult(&u16_AdcResult) ;
     d06:	ce 01       	movw	r24, r28
     d08:	02 96       	adiw	r24, 0x02	; 2
     d0a:	0e 94 80 07 	call	0xf00	; 0xf00 <ADC_u8GetResult>
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			else if(u8_ADC_VREF== u8_ADC_2560mV_INTERNAL_REF)
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
     d0e:	2a 81       	ldd	r18, Y+2	; 0x02
     d10:	3b 81       	ldd	r19, Y+3	; 0x03
     d12:	a4 ec       	ldi	r26, 0xC4	; 196
     d14:	b9 e0       	ldi	r27, 0x09	; 9
     d16:	0e 94 de 12 	call	0x25bc	; 0x25bc <__umulhisi3>
     d1a:	20 e1       	ldi	r18, 0x10	; 16
     d1c:	37 e2       	ldi	r19, 0x27	; 39
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	0e 94 bc 12 	call	0x2578	; 0x2578 <__udivmodsi4>
     d26:	20 93 1b 03 	sts	0x031B, r18	; 0x80031b <su8_NewTemp3.1638>
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
     d2a:	8d e3       	ldi	r24, 0x3D	; 61
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <LM35_u8GetTempInC+0x56>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     d2e:	8c e3       	ldi	r24, 0x3C	; 60
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
		}
		if(su8_Temp2==0)
     d30:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <su8_Temp2.1637>
     d34:	91 11       	cpse	r25, r1
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <LM35_u8GetTempInC+0x66>
		{
			su8_Temp2 = su8_NewTemp3 ; 
     d38:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <su8_NewTemp3.1638>
     d3c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <su8_Temp2.1637>
		}
		if(su8_Temp1==0)
     d40:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <su8_Temp1.1636>
     d44:	91 11       	cpse	r25, r1
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <LM35_u8GetTempInC+0x76>
		{
			su8_Temp1 = su8_Temp2 ; 
     d48:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <su8_Temp2.1637>
     d4c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <su8_Temp1.1636>
		}
		if(su8_Temp4==0)
     d50:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <__data_end>
     d54:	91 11       	cpse	r25, r1
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <LM35_u8GetTempInC+0x86>
		{
			su8_Temp4 = su8_Temp1;
     d58:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <su8_Temp1.1636>
     d5c:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <__data_end>
		}
		*pu8_ReturnAvgTemp = (su8_Temp1 + su8_Temp2 + su8_Temp4 + su8_NewTemp3) / u8_LM35_NUM_OF_READINGS ; 
     d60:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <su8_Temp1.1636>
     d64:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <su8_Temp2.1637>
     d68:	24 2f       	mov	r18, r20
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	25 0f       	add	r18, r21
     d6e:	31 1d       	adc	r19, r1
     d70:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <__data_end>
     d74:	29 0f       	add	r18, r25
     d76:	31 1d       	adc	r19, r1
     d78:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <su8_NewTemp3.1638>
     d7c:	29 0f       	add	r18, r25
     d7e:	31 1d       	adc	r19, r1
     d80:	33 23       	and	r19, r19
     d82:	14 f4       	brge	.+4      	; 0xd88 <LM35_u8GetTempInC+0xae>
     d84:	2d 5f       	subi	r18, 0xFD	; 253
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	35 95       	asr	r19
     d8a:	27 95       	ror	r18
     d8c:	35 95       	asr	r19
     d8e:	27 95       	ror	r18
     d90:	f8 01       	movw	r30, r16
     d92:	20 83       	st	Z, r18
		su8_Temp4 = su8_Temp1 ; 
     d94:	50 93 18 03 	sts	0x0318, r21	; 0x800318 <__data_end>
		su8_Temp1 = su8_Temp2 ;
     d98:	40 93 19 03 	sts	0x0319, r20	; 0x800319 <su8_Temp1.1636>
		su8_Temp2 = su8_NewTemp3; 
     d9c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <su8_Temp2.1637>
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <LM35_u8GetTempInC+0xca>
	}
	else 
	{
		u8_ErrorState = u8_LM35_NOK ;
     da2:	8e e3       	ldi	r24, 0x3E	; 62
	}
	return u8_ErrorState ; 
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <Motor_setDirection>:
{
	Motor_setDirection(MOTOR_ID_01,u8_Motor01Direction);
	Motor_setDirection(MOTOR_ID_02,u8_Motor02Direction);
	return MOTOR_ERROR_OK;

}
     db4:	84 31       	cpi	r24, 0x14	; 20
     db6:	19 f0       	breq	.+6      	; 0xdbe <Motor_setDirection+0xa>
     db8:	85 31       	cpi	r24, 0x15	; 21
     dba:	d9 f0       	breq	.+54     	; 0xdf2 <Motor_setDirection+0x3e>
     dbc:	34 c0       	rjmp	.+104    	; 0xe26 <Motor_setDirection+0x72>
     dbe:	67 31       	cpi	r22, 0x17	; 23
     dc0:	61 f4       	brne	.+24     	; 0xdda <Motor_setDirection+0x26>
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	63 e0       	ldi	r22, 0x03	; 3
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	08 95       	ret
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	62 e0       	ldi	r22, 0x02	; 2
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	63 e0       	ldi	r22, 0x03	; 3
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	08 95       	ret
     df2:	67 31       	cpi	r22, 0x17	; 23
     df4:	61 f4       	brne	.+24     	; 0xe0e <Motor_setDirection+0x5a>
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	66 e0       	ldi	r22, 0x06	; 6
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	66 e0       	ldi	r22, 0x06	; 6
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	67 e0       	ldi	r22, 0x07	; 7
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	08 95       	ret
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret

00000e2a <motorOn>:
uint8_t motorOn(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     e2a:	84 31       	cpi	r24, 0x14	; 20
     e2c:	19 f0       	breq	.+6      	; 0xe34 <motorOn+0xa>
     e2e:	85 31       	cpi	r24, 0x15	; 21
     e30:	51 f0       	breq	.+20     	; 0xe46 <motorOn+0x1c>
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <motorOn+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     e34:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, HIGH);
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	64 e0       	ldi	r22, 0x04	; 4
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     e46:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Motor_setDirection>
			return MOTOR_ERROR_OK;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     e50:	08 95       	ret

00000e52 <motorOff>:
uint8_t motorOff(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     e52:	84 31       	cpi	r24, 0x14	; 20
     e54:	19 f0       	breq	.+6      	; 0xe5c <motorOff+0xa>
     e56:	85 31       	cpi	r24, 0x15	; 21
     e58:	51 f0       	breq	.+20     	; 0xe6e <motorOff+0x1c>
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <motorOff+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     e5c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, LOW);
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     e6e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Motor_setDirection>
			return MOTOR_ERROR_OK;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     e76:	80 e0       	ldi	r24, 0x00	; 0
	}
	
     e78:	08 95       	ret

00000e7a <ADC_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidSetCallBack(void(*ISRFuncToSet)(void)) 
{
	ADCSetCallBackISR = ISRFuncToSet ;
     e7a:	87 b1       	in	r24, 0x07	; 7
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	87 b9       	out	0x07, r24	; 7
     e80:	87 b1       	in	r24, 0x07	; 7
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	87 b9       	out	0x07, r24	; 7
     e86:	87 b1       	in	r24, 0x07	; 7
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	87 b9       	out	0x07, r24	; 7
     e8c:	87 b1       	in	r24, 0x07	; 7
     e8e:	87 7f       	andi	r24, 0xF7	; 247
     e90:	87 b9       	out	0x07, r24	; 7
     e92:	87 b1       	in	r24, 0x07	; 7
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	87 b9       	out	0x07, r24	; 7
     e98:	87 b1       	in	r24, 0x07	; 7
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	87 b9       	out	0x07, r24	; 7
     e9e:	87 b1       	in	r24, 0x07	; 7
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	87 b9       	out	0x07, r24	; 7
     ea4:	86 b1       	in	r24, 0x06	; 6
     ea6:	80 68       	ori	r24, 0x80	; 128
     ea8:	86 b9       	out	0x06, r24	; 6
     eaa:	86 b1       	in	r24, 0x06	; 6
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	86 b9       	out	0x06, r24	; 6
     eb0:	86 b1       	in	r24, 0x06	; 6
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	86 b9       	out	0x06, r24	; 6
     eb6:	80 b7       	in	r24, 0x30	; 48
     eb8:	8f 77       	andi	r24, 0x7F	; 127
     eba:	80 bf       	out	0x30, r24	; 48
     ebc:	80 b7       	in	r24, 0x30	; 48
     ebe:	8f 7b       	andi	r24, 0xBF	; 191
     ec0:	80 bf       	out	0x30, r24	; 48
     ec2:	80 b7       	in	r24, 0x30	; 48
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	80 bf       	out	0x30, r24	; 48
     ec8:	86 b1       	in	r24, 0x06	; 6
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	86 b9       	out	0x06, r24	; 6
     ece:	86 b1       	in	r24, 0x06	; 6
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	86 b9       	out	0x06, r24	; 6
     ed4:	86 b1       	in	r24, 0x06	; 6
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	86 b9       	out	0x06, r24	; 6
     eda:	08 95       	ret

00000edc <ADC_voidStartConversion>:
     edc:	86 b1       	in	r24, 0x06	; 6
     ede:	80 68       	ori	r24, 0x80	; 128
     ee0:	86 b9       	out	0x06, r24	; 6
     ee2:	86 b1       	in	r24, 0x06	; 6
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	86 b9       	out	0x06, r24	; 6
     ee8:	08 95       	ret

00000eea <ADC_u8GetFlagInt>:
     eea:	fc 01       	movw	r30, r24
     eec:	89 2b       	or	r24, r25
     eee:	31 f0       	breq	.+12     	; 0xefc <ADC_u8GetFlagInt+0x12>
     ef0:	96 b1       	in	r25, 0x06	; 6
     ef2:	92 95       	swap	r25
     ef4:	91 70       	andi	r25, 0x01	; 1
     ef6:	90 83       	st	Z, r25
     ef8:	8e e2       	ldi	r24, 0x2E	; 46
     efa:	08 95       	ret
     efc:	8d e2       	ldi	r24, 0x2D	; 45
     efe:	08 95       	ret

00000f00 <ADC_u8GetResult>:
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	79 f0       	breq	.+30     	; 0xf22 <ADC_u8GetResult+0x22>
     f04:	24 b1       	in	r18, 0x04	; 4
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	fc 01       	movw	r30, r24
     f0a:	31 83       	std	Z+1, r19	; 0x01
     f0c:	20 83       	st	Z, r18
     f0e:	45 b1       	in	r20, 0x05	; 5
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	54 2f       	mov	r21, r20
     f14:	44 27       	eor	r20, r20
     f16:	24 2b       	or	r18, r20
     f18:	35 2b       	or	r19, r21
     f1a:	31 83       	std	Z+1, r19	; 0x01
     f1c:	20 83       	st	Z, r18
     f1e:	8e e2       	ldi	r24, 0x2E	; 46
     f20:	08 95       	ret
     f22:	8d e2       	ldi	r24, 0x2D	; 45
     f24:	08 95       	ret

00000f26 <__vector_16>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_16 (void)      __attribute__((signal));
void __vector_16 (void)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
	if(ADCSetCallBackISR!=NULL_POINTER)
     f48:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <ADCSetCallBackISR>
     f4c:	f0 91 1d 03 	lds	r31, 0x031D	; 0x80031d <ADCSetCallBackISR+0x1>
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	09 f0       	breq	.+2      	; 0xf56 <__vector_16+0x30>
	{
		ADCSetCallBackISR() ;
     f54:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <DIO_SetPinDirection>:
		case PORTD: PORTD_REG=VALUE;break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
			break;
	}//switch
	return au8_errorstate;
}//function
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	31 f1       	breq	.+76     	; 0xfc8 <DIO_SetPinDirection+0x50>
     f7c:	38 f0       	brcs	.+14     	; 0xf8c <DIO_SetPinDirection+0x14>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_SetPinDirection+0xc>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <DIO_SetPinDirection+0x8c>
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	09 f4       	brne	.+2      	; 0xf8a <DIO_SetPinDirection+0x12>
     f88:	5a c0       	rjmp	.+180    	; 0x103e <DIO_SetPinDirection+0xc6>
     f8a:	76 c0       	rjmp	.+236    	; 0x1078 <DIO_SetPinDirection+0x100>
     f8c:	41 11       	cpse	r20, r1
     f8e:	0d c0       	rjmp	.+26     	; 0xfaa <DIO_SetPinDirection+0x32>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_SetPinDirection+0x22>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	6a 95       	dec	r22
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_SetPinDirection+0x1e>
     f9e:	80 95       	com	r24
     fa0:	9a b3       	in	r25, 0x1a	; 26
     fa2:	89 23       	and	r24, r25
     fa4:	8a bb       	out	0x1a, r24	; 26
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	08 95       	ret
     faa:	41 30       	cpi	r20, 0x01	; 1
     fac:	09 f0       	breq	.+2      	; 0xfb0 <DIO_SetPinDirection+0x38>
     fae:	66 c0       	rjmp	.+204    	; 0x107c <DIO_SetPinDirection+0x104>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_SetPinDirection+0x42>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_SetPinDirection+0x3e>
     fbe:	9a b3       	in	r25, 0x1a	; 26
     fc0:	89 2b       	or	r24, r25
     fc2:	8a bb       	out	0x1a, r24	; 26
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	08 95       	ret
     fc8:	41 11       	cpse	r20, r1
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <DIO_SetPinDirection+0x6e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinDirection+0x5e>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	6a 95       	dec	r22
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinDirection+0x5a>
     fda:	80 95       	com	r24
     fdc:	97 b3       	in	r25, 0x17	; 23
     fde:	89 23       	and	r24, r25
     fe0:	87 bb       	out	0x17, r24	; 23
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	08 95       	ret
     fe6:	41 30       	cpi	r20, 0x01	; 1
     fe8:	09 f0       	breq	.+2      	; 0xfec <DIO_SetPinDirection+0x74>
     fea:	4a c0       	rjmp	.+148    	; 0x1080 <DIO_SetPinDirection+0x108>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_SetPinDirection+0x7e>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	6a 95       	dec	r22
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_SetPinDirection+0x7a>
     ffa:	97 b3       	in	r25, 0x17	; 23
     ffc:	89 2b       	or	r24, r25
     ffe:	87 bb       	out	0x17, r24	; 23
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	08 95       	ret
    1004:	41 11       	cpse	r20, r1
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <DIO_SetPinDirection+0xaa>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_SetPinDirection+0x9a>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	6a 95       	dec	r22
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_SetPinDirection+0x96>
    1016:	80 95       	com	r24
    1018:	94 b3       	in	r25, 0x14	; 20
    101a:	89 23       	and	r24, r25
    101c:	84 bb       	out	0x14, r24	; 20
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	08 95       	ret
    1022:	41 30       	cpi	r20, 0x01	; 1
    1024:	79 f5       	brne	.+94     	; 0x1084 <DIO_SetPinDirection+0x10c>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_SetPinDirection+0xb8>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	6a 95       	dec	r22
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_SetPinDirection+0xb4>
    1034:	94 b3       	in	r25, 0x14	; 20
    1036:	89 2b       	or	r24, r25
    1038:	84 bb       	out	0x14, r24	; 20
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	08 95       	ret
    103e:	41 11       	cpse	r20, r1
    1040:	0d c0       	rjmp	.+26     	; 0x105c <DIO_SetPinDirection+0xe4>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_SetPinDirection+0xd4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	6a 95       	dec	r22
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_SetPinDirection+0xd0>
    1050:	80 95       	com	r24
    1052:	91 b3       	in	r25, 0x11	; 17
    1054:	89 23       	and	r24, r25
    1056:	81 bb       	out	0x11, r24	; 17
    1058:	84 e0       	ldi	r24, 0x04	; 4
    105a:	08 95       	ret
    105c:	41 30       	cpi	r20, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <DIO_SetPinDirection+0x110>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_SetPinDirection+0xf2>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	6a 95       	dec	r22
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_SetPinDirection+0xee>
    106e:	91 b3       	in	r25, 0x11	; 17
    1070:	89 2b       	or	r24, r25
    1072:	81 bb       	out	0x11, r24	; 17
    1074:	84 e0       	ldi	r24, 0x04	; 4
    1076:	08 95       	ret
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	08 95       	ret
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	08 95       	ret
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	08 95       	ret
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	08 95       	ret
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	08 95       	ret

0000108c <DIO_SetPinValue>:
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	31 f1       	breq	.+76     	; 0x10dc <DIO_SetPinValue+0x50>
    1090:	38 f0       	brcs	.+14     	; 0x10a0 <DIO_SetPinValue+0x14>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	09 f4       	brne	.+2      	; 0x1098 <DIO_SetPinValue+0xc>
    1096:	40 c0       	rjmp	.+128    	; 0x1118 <DIO_SetPinValue+0x8c>
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	09 f4       	brne	.+2      	; 0x109e <DIO_SetPinValue+0x12>
    109c:	5a c0       	rjmp	.+180    	; 0x1152 <DIO_SetPinValue+0xc6>
    109e:	76 c0       	rjmp	.+236    	; 0x118c <DIO_SetPinValue+0x100>
    10a0:	41 11       	cpse	r20, r1
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <DIO_SetPinValue+0x32>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_SetPinValue+0x22>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	6a 95       	dec	r22
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_SetPinValue+0x1e>
    10b2:	80 95       	com	r24
    10b4:	9b b3       	in	r25, 0x1b	; 27
    10b6:	89 23       	and	r24, r25
    10b8:	8b bb       	out	0x1b, r24	; 27
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	08 95       	ret
    10be:	41 30       	cpi	r20, 0x01	; 1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <DIO_SetPinValue+0x38>
    10c2:	66 c0       	rjmp	.+204    	; 0x1190 <DIO_SetPinValue+0x104>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_SetPinValue+0x42>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	6a 95       	dec	r22
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_SetPinValue+0x3e>
    10d2:	9b b3       	in	r25, 0x1b	; 27
    10d4:	89 2b       	or	r24, r25
    10d6:	8b bb       	out	0x1b, r24	; 27
    10d8:	84 e0       	ldi	r24, 0x04	; 4
    10da:	08 95       	ret
    10dc:	41 11       	cpse	r20, r1
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <DIO_SetPinValue+0x6e>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_SetPinValue+0x5e>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	6a 95       	dec	r22
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_SetPinValue+0x5a>
    10ee:	80 95       	com	r24
    10f0:	98 b3       	in	r25, 0x18	; 24
    10f2:	89 23       	and	r24, r25
    10f4:	88 bb       	out	0x18, r24	; 24
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	08 95       	ret
    10fa:	41 30       	cpi	r20, 0x01	; 1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_SetPinValue+0x74>
    10fe:	4a c0       	rjmp	.+148    	; 0x1194 <DIO_SetPinValue+0x108>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_SetPinValue+0x7e>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	6a 95       	dec	r22
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_SetPinValue+0x7a>
    110e:	98 b3       	in	r25, 0x18	; 24
    1110:	89 2b       	or	r24, r25
    1112:	88 bb       	out	0x18, r24	; 24
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	08 95       	ret
    1118:	41 11       	cpse	r20, r1
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <DIO_SetPinValue+0xaa>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_SetPinValue+0x9a>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	6a 95       	dec	r22
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_SetPinValue+0x96>
    112a:	80 95       	com	r24
    112c:	95 b3       	in	r25, 0x15	; 21
    112e:	89 23       	and	r24, r25
    1130:	85 bb       	out	0x15, r24	; 21
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	08 95       	ret
    1136:	41 30       	cpi	r20, 0x01	; 1
    1138:	79 f5       	brne	.+94     	; 0x1198 <DIO_SetPinValue+0x10c>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_SetPinValue+0xb8>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	6a 95       	dec	r22
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_SetPinValue+0xb4>
    1148:	95 b3       	in	r25, 0x15	; 21
    114a:	89 2b       	or	r24, r25
    114c:	85 bb       	out	0x15, r24	; 21
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	08 95       	ret
    1152:	41 11       	cpse	r20, r1
    1154:	0d c0       	rjmp	.+26     	; 0x1170 <DIO_SetPinValue+0xe4>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_SetPinValue+0xd4>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	6a 95       	dec	r22
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_SetPinValue+0xd0>
    1164:	80 95       	com	r24
    1166:	92 b3       	in	r25, 0x12	; 18
    1168:	89 23       	and	r24, r25
    116a:	82 bb       	out	0x12, r24	; 18
    116c:	84 e0       	ldi	r24, 0x04	; 4
    116e:	08 95       	ret
    1170:	41 30       	cpi	r20, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <DIO_SetPinValue+0x110>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_SetPinValue+0xf2>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	6a 95       	dec	r22
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_SetPinValue+0xee>
    1182:	92 b3       	in	r25, 0x12	; 18
    1184:	89 2b       	or	r24, r25
    1186:	82 bb       	out	0x12, r24	; 18
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	08 95       	ret
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	08 95       	ret
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	08 95       	ret
    1194:	84 e0       	ldi	r24, 0x04	; 4
    1196:	08 95       	ret
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	08 95       	ret
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	08 95       	ret

000011a0 <DIO_GetPinValue>:
uint8_t DIO_GetPinValue(uint8_t au8_PORT,uint8_t PIN)
{
	uint8_t PinValue;
	switch(au8_PORT)
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	79 f0       	breq	.+30     	; 0x11c2 <DIO_GetPinValue+0x22>
    11a4:	28 f0       	brcs	.+10     	; 0x11b0 <DIO_GetPinValue+0x10>
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	a9 f0       	breq	.+42     	; 0x11d4 <DIO_GetPinValue+0x34>
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	e1 f0       	breq	.+56     	; 0x11e6 <DIO_GetPinValue+0x46>
    11ae:	24 c0       	rjmp	.+72     	; 0x11f8 <DIO_GetPinValue+0x58>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
    11b0:	89 b3       	in	r24, 0x19	; 25
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_GetPinValue+0x1a>
    11b6:	95 95       	asr	r25
    11b8:	87 95       	ror	r24
    11ba:	6a 95       	dec	r22
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_GetPinValue+0x16>
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	08 95       	ret
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
    11c2:	86 b3       	in	r24, 0x16	; 22
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_GetPinValue+0x2c>
    11c8:	95 95       	asr	r25
    11ca:	87 95       	ror	r24
    11cc:	6a 95       	dec	r22
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_GetPinValue+0x28>
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	08 95       	ret
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
    11d4:	83 b3       	in	r24, 0x13	; 19
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_GetPinValue+0x3e>
    11da:	95 95       	asr	r25
    11dc:	87 95       	ror	r24
    11de:	6a 95       	dec	r22
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_GetPinValue+0x3a>
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	08 95       	ret
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
    11e6:	80 b3       	in	r24, 0x10	; 16
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_GetPinValue+0x50>
    11ec:	95 95       	asr	r25
    11ee:	87 95       	ror	r24
    11f0:	6a 95       	dec	r22
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_GetPinValue+0x4c>
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	08 95       	ret
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
    11f8:	85 e0       	ldi	r24, 0x05	; 5
			break;
	}//switch
	return PinValue;
}//function
    11fa:	08 95       	ret

000011fc <I2C_masterInit>:
/*                                       Master Transmit/Receive APIs Implementation                                  */
/**********************************************************************************************************************/
//
void I2C_masterInit(void){                                                                                            //
	/************************************************/                           //
	Ru8_TWBR = BIT_RATE;                     /*  1 - Setting Bit Rate                        */                           //
    11fc:	86 e4       	ldi	r24, 0x46	; 70
    11fe:	80 b9       	out	0x00, r24	; 0
	#if PRESCALER == PRESCALER_1         /*                                              */                           //
	Ru8_TWSR = (0 << TWPS1) | (0 << TWPS0);  /*  2 - Prescaler Value Of 1                    */                           //
    1200:	11 b8       	out	0x01, r1	; 1
    1202:	08 95       	ret

00001204 <I2C_masterStart>:
	#endif                                                                                                            //
}                                                                                                                     //
//
void I2C_masterStart(void){                                                                                           //
	
	Ru8_TWCR = 0;                                                 /*****************************************************************/
    1204:	16 be       	out	0x36, r1	; 54
	Ru8_TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C*/
    1206:	84 ea       	ldi	r24, 0xA4	; 164
    1208:	86 bf       	out	0x36, r24	; 54
	while(!(Ru8_TWCR & (1 << TWINT)));                   /* 2 - Stay here until start condition has been transmitted      */
    120a:	06 b6       	in	r0, 0x36	; 54
    120c:	07 fe       	sbrs	r0, 7
    120e:	fd cf       	rjmp	.-6      	; 0x120a <I2C_masterStart+0x6>
	while( (Ru8_TWSR & 0xF8) != MASTER_START);           /* 3 - Check status register that start condition has been sent  */
    1210:	81 b1       	in	r24, 0x01	; 1
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	e1 f7       	brne	.-8      	; 0x1210 <I2C_masterStart+0xc>
	}                                                    /*****************************************************************/
    1218:	08 95       	ret

0000121a <I2C_repeatedStart>:
	////////
	void I2C_repeatedStart(void){                                                                                          ////////
		/*************************************************************************/
		Ru8_TWCR= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C        */
    121a:	84 ea       	ldi	r24, 0xA4	; 164
    121c:	86 bf       	out	0x36, r24	; 54
		while(!(Ru8_TWCR & (1 << TWINT)));                  /* 2 - Stay here until start condition has been transmitted              */
    121e:	06 b6       	in	r0, 0x36	; 54
    1220:	07 fe       	sbrs	r0, 7
    1222:	fd cf       	rjmp	.-6      	; 0x121e <I2C_repeatedStart+0x4>
		while( (Ru8_TWSR & 0xF8) != MASTER_REPEATED_START); /* 3 - Check status register that repeated start condition has been sent */
    1224:	81 b1       	in	r24, 0x01	; 1
    1226:	88 7f       	andi	r24, 0xF8	; 248
    1228:	80 31       	cpi	r24, 0x10	; 16
    122a:	e1 f7       	brne	.-8      	; 0x1224 <I2C_repeatedStart+0xa>
		}                                                   /*************************************************************************//////////////////////////////
    122c:	08 95       	ret

0000122e <I2C_masterWriteToAddress>:
		//////////////////////////////
		void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
    122e:	cf 93       	push	r28
			Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
    1230:	c8 2f       	mov	r28, r24
    1232:	cc 0f       	add	r28, r28
    1234:	c3 b9       	out	0x03, r28	; 3
			Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
    1236:	84 e8       	ldi	r24, 0x84	; 132
    1238:	86 bf       	out	0x36, r24	; 54
			while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
    123a:	06 b6       	in	r0, 0x36	; 54
    123c:	07 fe       	sbrs	r0, 7
    123e:	fd cf       	rjmp	.-6      	; 0x123a <I2C_masterWriteToAddress+0xc>
    1240:	08 c0       	rjmp	.+16     	; 0x1252 <I2C_masterWriteToAddress+0x24>
			while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
			{

				I2C_repeatedStart();
    1242:	0e 94 0d 09 	call	0x121a	; 0x121a <I2C_repeatedStart>
				Ru8_TWDR = (u8_slaveAddress << 1);
    1246:	c3 b9       	out	0x03, r28	; 3
				Ru8_TWCR = (1 << TWINT) | (1 << TWEN);
    1248:	84 e8       	ldi	r24, 0x84	; 132
    124a:	86 bf       	out	0x36, r24	; 54
				while (!(Ru8_TWCR & (1 << TWINT)));
    124c:	06 b6       	in	r0, 0x36	; 54
    124e:	07 fe       	sbrs	r0, 7
    1250:	fd cf       	rjmp	.-6      	; 0x124c <I2C_masterWriteToAddress+0x1e>
		//////////////////////////////
		void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
			Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
			Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
			while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
			while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
    1252:	81 b1       	in	r24, 0x01	; 1
    1254:	88 7f       	andi	r24, 0xF8	; 248
    1256:	88 31       	cpi	r24, 0x18	; 24
    1258:	a1 f7       	brne	.-24     	; 0x1242 <I2C_masterWriteToAddress+0x14>
				I2C_repeatedStart();
				Ru8_TWDR = (u8_slaveAddress << 1);
				Ru8_TWCR = (1 << TWINT) | (1 << TWEN);
				while (!(Ru8_TWCR & (1 << TWINT)));
			}
			}                                                             /********************************************************************************************/
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <I2C_masterReadFromAddress>:
			///
			void I2C_masterReadFromAddress(uint8_t u8_slaveAddress){                                                                                                 ///                                                      /******************************************************************************************///
    125e:	cf 93       	push	r28
				
				Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
    1260:	c8 2f       	mov	r28, r24
    1262:	cc 0f       	add	r28, r28
    1264:	c3 b9       	out	0x03, r28	; 3
				Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
    1266:	83 b1       	in	r24, 0x03	; 3
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	83 b9       	out	0x03, r24	; 3
				Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
    126c:	86 b7       	in	r24, 0x36	; 54
    126e:	84 68       	ori	r24, 0x84	; 132
    1270:	86 bf       	out	0x36, r24	; 54
				while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
    1272:	06 b6       	in	r0, 0x36	; 54
    1274:	07 fe       	sbrs	r0, 7
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <I2C_masterReadFromAddress+0x14>
    1278:	0c c0       	rjmp	.+24     	; 0x1292 <I2C_masterReadFromAddress+0x34>
				while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
				{
					I2C_repeatedStart();
    127a:	0e 94 0d 09 	call	0x121a	; 0x121a <I2C_repeatedStart>
					//I2C_masterReadFromAddress(u8_slaveAddress);
					Ru8_TWDR = (u8_slaveAddress << 1);
    127e:	c3 b9       	out	0x03, r28	; 3
					Ru8_TWDR |= (1 << 0);
    1280:	83 b1       	in	r24, 0x03	; 3
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	83 b9       	out	0x03, r24	; 3
					Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);
    1286:	86 b7       	in	r24, 0x36	; 54
    1288:	84 68       	ori	r24, 0x84	; 132
    128a:	86 bf       	out	0x36, r24	; 54
					while (!(Ru8_TWCR & (1 << TWINT)));
    128c:	06 b6       	in	r0, 0x36	; 54
    128e:	07 fe       	sbrs	r0, 7
    1290:	fd cf       	rjmp	.-6      	; 0x128c <I2C_masterReadFromAddress+0x2e>
				
				Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
				Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
				Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
				while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
				while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
    1292:	81 b1       	in	r24, 0x01	; 1
    1294:	88 7f       	andi	r24, 0xF8	; 248
    1296:	80 34       	cpi	r24, 0x40	; 64
    1298:	81 f7       	brne	.-32     	; 0x127a <I2C_masterReadFromAddress+0x1c>
					Ru8_TWDR = (u8_slaveAddress << 1);
					Ru8_TWDR |= (1 << 0);
					Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);
					while (!(Ru8_TWCR & (1 << TWINT)));
				}
				}                                                             /******************************************************************************************///
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <I2C_masterWriteData>:
				/////////////////
				void I2C_masterWriteData(uint8_t u8_data){                                                                                                 /////////////////
					/*****************************************************************************/
					Ru8_TWDR = u8_data;                                          /* 1 - Load data to be transmitted                                           */
    129e:	83 b9       	out	0x03, r24	; 3
					Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                       /* 2 - Reset I2C interrupt flag and enable I2C operation                     */
    12a0:	84 e8       	ldi	r24, 0x84	; 132
    12a2:	86 bf       	out	0x36, r24	; 54
					while (!(Ru8_TWCR & (1 << TWINT)));                          /* 3 - Stay here until data is transmitted from master                       */
    12a4:	06 b6       	in	r0, 0x36	; 54
    12a6:	07 fe       	sbrs	r0, 7
    12a8:	fd cf       	rjmp	.-6      	; 0x12a4 <I2C_masterWriteData+0x6>
					while ( (Ru8_TWSR & 0xF8) != MASTER_WRITE_DATA_TRANSMITTED);//&& (Ru8_TWSR & 0xF8) != 0x30 ); /* 4 - Check in status register that data has been transmitted               */
    12aa:	81 b1       	in	r24, 0x01	; 1
    12ac:	88 7f       	andi	r24, 0xF8	; 248
    12ae:	88 32       	cpi	r24, 0x28	; 40
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <I2C_masterWriteData+0xc>
					}                                                            /*****************************************************************************/
    12b2:	08 95       	ret

000012b4 <I2C_masterReadData>:
					//
					uint8_t I2C_masterReadData(void){                                                                                                         //
						
						/*******************************************************************************/
						Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);       /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
    12b4:	84 ec       	ldi	r24, 0xC4	; 196
    12b6:	86 bf       	out	0x36, r24	; 54
						while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
    12b8:	06 b6       	in	r0, 0x36	; 54
    12ba:	07 fe       	sbrs	r0, 7
    12bc:	fd cf       	rjmp	.-6      	; 0x12b8 <I2C_masterReadData+0x4>
						while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_ACK);        /* 3 - Check that data has been transmitted to master                          */
    12be:	81 b1       	in	r24, 0x01	; 1
    12c0:	88 7f       	andi	r24, 0xF8	; 248
    12c2:	80 35       	cpi	r24, 0x50	; 80
    12c4:	e1 f7       	brne	.-8      	; 0x12be <I2C_masterReadData+0xa>
						return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
    12c6:	83 b1       	in	r24, 0x03	; 3
						}                                                              /*******************************************************************************/
    12c8:	08 95       	ret

000012ca <I2C_masterReadFinalData>:

						uint8_t I2C_masterReadFinalData(void){                                                                                                         //
							
							/*******************************************************************************/
							Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                     /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
    12ca:	84 e8       	ldi	r24, 0x84	; 132
    12cc:	86 bf       	out	0x36, r24	; 54
							while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
    12ce:	06 b6       	in	r0, 0x36	; 54
    12d0:	07 fe       	sbrs	r0, 7
    12d2:	fd cf       	rjmp	.-6      	; 0x12ce <I2C_masterReadFinalData+0x4>
							while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_NACK);       /* 3 - Check that data has been transmitted to master                          */
    12d4:	81 b1       	in	r24, 0x01	; 1
    12d6:	88 7f       	andi	r24, 0xF8	; 248
    12d8:	88 35       	cpi	r24, 0x58	; 88
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <I2C_masterReadFinalData+0xa>
							return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
    12dc:	83 b1       	in	r24, 0x03	; 3
						}
    12de:	08 95       	ret

000012e0 <I2C_masterStop>:
						//
						void I2C_masterStop(void){                                                                                                                //
							/************************************************************************************/
							Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); /* 1 - Reset I2C interrupt flag, enable I2C operation and transmit a stop condition */
    12e0:	84 e9       	ldi	r24, 0x94	; 148
    12e2:	86 bf       	out	0x36, r24	; 54
							while (!(Ru8_TWCR != (1 << TWSTO)));                  /* 2 - Stay here until stop condition is successfully transmitted                   */
    12e4:	86 b7       	in	r24, 0x36	; 54
    12e6:	80 31       	cpi	r24, 0x10	; 16
    12e8:	e9 f3       	breq	.-6      	; 0x12e4 <I2C_masterStop+0x4>
							}                                                         /************************************************************************************/
    12ea:	08 95       	ret

000012ec <SPI_init>:
	    #else
	        #error "Invalid Data Sampling Setting"
	    #endif
	
	#elif SPI_MODE == SLAVE_MODE
	    DIO_SetPinDirection(PORTB,MISO,OUTPUT);
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	66 e0       	ldi	r22, 0x06	; 6
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	    SPC_R |= (1 << SPE);
    12f6:	8d b1       	in	r24, 0x0d	; 13
    12f8:	80 64       	ori	r24, 0x40	; 64
    12fa:	8d b9       	out	0x0d, r24	; 13
	
	#if SPI_INTERRUPT == ENABLE
		SPC_R    |= (1 << SPIE);
		STATUS_R |= (1 << GLOBAL_INTERRUPT);
	#elif SPI_INTERRUPT == DISABLE
	    SPC_R    &=	~(1 << SPIE);
    12fc:	8d b1       	in	r24, 0x0d	; 13
    12fe:	8f 77       	andi	r24, 0x7F	; 127
    1300:	8d b9       	out	0x0d, r24	; 13
		STATUS_R &= ~(1 << GLOBAL_INTERRUPT);
    1302:	8f b7       	in	r24, 0x3f	; 63
    1304:	8f 77       	andi	r24, 0x7F	; 127
    1306:	8f bf       	out	0x3f, r24	; 63
	#else 
	    #error "Invalid Interrupt Setting"
	#endif
	
	#if DATA_ORDER == MSB_FIRST
	    SPC_R &= ~(1 << DORD);
    1308:	8d b1       	in	r24, 0x0d	; 13
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	8d b9       	out	0x0d, r24	; 13
    130e:	08 95       	ret

00001310 <SPI_tranceiver>:
	#endif
}

uint8_t SPI_tranceiver(uint8_t u8_data){

	SPD_R = u8_data;
    1310:	8f b9       	out	0x0f, r24	; 15
	while(!(SPS_R & (1 << SPIF)));
    1312:	77 9b       	sbis	0x0e, 7	; 14
    1314:	fe cf       	rjmp	.-4      	; 0x1312 <SPI_tranceiver+0x2>
	return SPD_R;
    1316:	8f b1       	in	r24, 0x0f	; 15
}
    1318:	08 95       	ret

0000131a <SPI_slaveReceiveString>:

void SPI_slaveReceiveString(uint8_t* u8_buffer, uint8_t u8_buffSize)
{
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	8c 01       	movw	r16, r24
    1328:	d6 2f       	mov	r29, r22
	uint8_t u8_dummy, u8_buffIndex = 0;
    132a:	c0 e0       	ldi	r28, 0x00	; 0
	do{
		u8_buffer[u8_buffIndex] = SPI_tranceiver(u8_dummy);
    132c:	78 01       	movw	r14, r16
    132e:	ec 0e       	add	r14, r28
    1330:	f1 1c       	adc	r15, r1
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 88 09 	call	0x1310	; 0x1310 <SPI_tranceiver>
    1338:	f7 01       	movw	r30, r14
    133a:	80 83       	st	Z, r24
		u8_buffIndex++;
    133c:	cf 5f       	subi	r28, 0xFF	; 255
	}while(u8_buffer[u8_buffIndex - 1] != '\0' && (u8_buffIndex < u8_buffSize));
    133e:	f8 01       	movw	r30, r16
    1340:	ec 0f       	add	r30, r28
    1342:	f1 1d       	adc	r31, r1
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	80 81       	ld	r24, Z
    1348:	88 23       	and	r24, r24
    134a:	11 f0       	breq	.+4      	; 0x1350 <SPI_slaveReceiveString+0x36>
    134c:	cd 17       	cp	r28, r29
    134e:	70 f3       	brcs	.-36     	; 0x132c <SPI_slaveReceiveString+0x12>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	08 95       	ret

0000135e <__vector_11>:
}

void OCI2_init(void)
{
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <counts>
    1374:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <counts+0x1>
    1378:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <counts+0x2>
    137c:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <counts+0x3>
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	a1 1d       	adc	r26, r1
    1384:	b1 1d       	adc	r27, r1
    1386:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <counts>
    138a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <counts+0x1>
    138e:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <counts+0x2>
    1392:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <counts+0x3>
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <OVI0_init>:
    13a8:	89 b7       	in	r24, 0x39	; 57
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	89 bf       	out	0x39, r24	; 57
    13ae:	8f b7       	in	r24, 0x3f	; 63
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	8f bf       	out	0x3f, r24	; 63
    13b4:	08 95       	ret

000013b6 <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <TIMER0_start+0xe>
	{
		Ru8_TCCR0 |= (1<<CS00);
    13bc:	83 b7       	in	r24, 0x33	; 51
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	83 bf       	out	0x33, r24	; 51
    13c2:	08 95       	ret
	}
	else if (8 == u16_prescale)
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	91 05       	cpc	r25, r1
    13c8:	21 f4       	brne	.+8      	; 0x13d2 <TIMER0_start+0x1c>
	{
		Ru8_TCCR0 |= (1<<CS01);	
    13ca:	83 b7       	in	r24, 0x33	; 51
    13cc:	82 60       	ori	r24, 0x02	; 2
    13ce:	83 bf       	out	0x33, r24	; 51
    13d0:	08 95       	ret
	}
	else if (32 == u16_prescale)
    13d2:	80 32       	cpi	r24, 0x20	; 32
    13d4:	91 05       	cpc	r25, r1
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <TIMER0_start+0x2a>
	{
		Ru8_TCCR0 |= (1<<CS01) | (1<<CS00);
    13d8:	83 b7       	in	r24, 0x33	; 51
    13da:	83 60       	ori	r24, 0x03	; 3
    13dc:	83 bf       	out	0x33, r24	; 51
    13de:	08 95       	ret
	}
	else if (64 == u16_prescale)
    13e0:	80 34       	cpi	r24, 0x40	; 64
    13e2:	91 05       	cpc	r25, r1
    13e4:	21 f4       	brne	.+8      	; 0x13ee <TIMER0_start+0x38>
	{
		Ru8_TCCR0 |= (1<<CS02);
    13e6:	83 b7       	in	r24, 0x33	; 51
    13e8:	84 60       	ori	r24, 0x04	; 4
    13ea:	83 bf       	out	0x33, r24	; 51
    13ec:	08 95       	ret
	}
	else if (128 == u16_prescale)
    13ee:	80 38       	cpi	r24, 0x80	; 128
    13f0:	91 05       	cpc	r25, r1
    13f2:	21 f4       	brne	.+8      	; 0x13fc <TIMER0_start+0x46>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS00);
    13f4:	83 b7       	in	r24, 0x33	; 51
    13f6:	85 60       	ori	r24, 0x05	; 5
    13f8:	83 bf       	out	0x33, r24	; 51
    13fa:	08 95       	ret
	}
	else if (256 == u16_prescale)
    13fc:	81 15       	cp	r24, r1
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	92 07       	cpc	r25, r18
    1402:	21 f4       	brne	.+8      	; 0x140c <TIMER0_start+0x56>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01);
    1404:	83 b7       	in	r24, 0x33	; 51
    1406:	86 60       	ori	r24, 0x06	; 6
    1408:	83 bf       	out	0x33, r24	; 51
    140a:	08 95       	ret
	}
	else if (1024 == u16_prescale)
    140c:	81 15       	cp	r24, r1
    140e:	94 40       	sbci	r25, 0x04	; 4
    1410:	19 f4       	brne	.+6      	; 0x1418 <TIMER0_start+0x62>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
    1412:	83 b7       	in	r24, 0x33	; 51
    1414:	87 60       	ori	r24, 0x07	; 7
    1416:	83 bf       	out	0x33, r24	; 51
    1418:	08 95       	ret

0000141a <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	Ru8_TCCR0 = 0;
    141a:	13 be       	out	0x33, r1	; 51
    141c:	08 95       	ret

0000141e <TIMER0_msdelay>:
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <TIMER0_msdelay+0xe>
    142c:	00 d0       	rcall	.+0      	; 0x142e <TIMER0_msdelay+0x10>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <TIMER0_msdelay+0x12>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
    1434:	bc 01       	movw	r22, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    143e:	2f e6       	ldi	r18, 0x6F	; 111
    1440:	32 e1       	ldi	r19, 0x12	; 18
    1442:	43 e8       	ldi	r20, 0x83	; 131
    1444:	5a e3       	ldi	r21, 0x3A	; 58
    1446:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__divsf3>
    144a:	6b 01       	movw	r12, r22
    144c:	7c 01       	movw	r14, r24
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	53 e4       	ldi	r21, 0x43	; 67
    1456:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__divsf3>
    145a:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
    145e:	69 83       	std	Y+1, r22	; 0x01
    1460:	7a 83       	std	Y+2, r23	; 0x02
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
    1466:	29 81       	ldd	r18, Y+1	; 0x01
    1468:	3a 81       	ldd	r19, Y+2	; 0x02
    146a:	4b 81       	ldd	r20, Y+3	; 0x03
    146c:	5c 81       	ldd	r21, Y+4	; 0x04
    146e:	af ef       	ldi	r26, 0xFF	; 255
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	0e 94 ed 12 	call	0x25da	; 0x25da <__muluhisi3>
    1476:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	c7 01       	movw	r24, r14
    1480:	b6 01       	movw	r22, r12
    1482:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
    1486:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
    148a:	7e 83       	std	Y+6, r23	; 0x06
    148c:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init();                                         //Enabling system interrupt and flag for overflow int timer 0
    148e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <OVI0_init>
	TIMER0_start(8);                                     //Prescaler of one that yields 8MHz frequency
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 db 09 	call	0x13b6	; 0x13b6 <TIMER0_start>
	while (counts < ticks)
    149a:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <counts>
    149e:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <counts+0x1>
    14a2:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <counts+0x2>
    14a6:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <counts+0x3>
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	ab 81       	ldd	r26, Y+3	; 0x03
    14b0:	bc 81       	ldd	r27, Y+4	; 0x04
    14b2:	48 17       	cp	r20, r24
    14b4:	59 07       	cpc	r21, r25
    14b6:	6a 07       	cpc	r22, r26
    14b8:	7b 07       	cpc	r23, r27
    14ba:	78 f3       	brcs	.-34     	; 0x149a <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	Ru8_TCNT0 = (255-remainder);                      //Compensation of ticks remaining fraction to increase accuracy
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	80 95       	com	r24
    14c2:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
    14c4:	0e 94 0d 0a 	call	0x141a	; 0x141a <TIMER0_stop>
	counts = 0; 
    14c8:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <counts>
    14cc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <counts+0x1>
    14d0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <counts+0x2>
    14d4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counts+0x3>
}
    14d8:	26 96       	adiw	r28, 0x06	; 6
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	08 95       	ret

000014f2 <USART_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void USART_TX_Int_CallBack_fun(void (*ptr_To_Fun)(void))
{
	ptr_To_TX_Int_fun=ptr_To_Fun;
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	81 11       	cpse	r24, r1
    14f8:	0a c0       	rjmp	.+20     	; 0x150e <USART_voidInit+0x1c>
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	91 11       	cpse	r25, r1
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <USART_voidInit+0x1c>
    1500:	83 e3       	ldi	r24, 0x33	; 51
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <MYUBRR+0x1>
    1508:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <MYUBRR>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <USART_voidInit+0x44>
    150e:	81 11       	cpse	r24, r1
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <USART_voidInit+0x34>
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	91 30       	cpi	r25, 0x01	; 1
    1516:	39 f4       	brne	.+14     	; 0x1526 <USART_voidInit+0x34>
    1518:	87 e6       	ldi	r24, 0x67	; 103
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <MYUBRR+0x1>
    1520:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <MYUBRR>
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <USART_voidInit+0x44>
    1526:	80 34       	cpi	r24, 0x40	; 64
    1528:	31 f4       	brne	.+12     	; 0x1536 <USART_voidInit+0x44>
    152a:	8f e9       	ldi	r24, 0x9F	; 159
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <MYUBRR+0x1>
    1532:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <MYUBRR>
    1536:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <MYUBRR>
    153a:	89 b9       	out	0x09, r24	; 9
    153c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <MYUBRR+0x1>
    1540:	80 bd       	out	0x20, r24	; 32
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	21 f4       	brne	.+8      	; 0x1550 <USART_voidInit+0x5e>
    1548:	8a b1       	in	r24, 0x0a	; 10
    154a:	88 60       	ori	r24, 0x08	; 8
    154c:	8a b9       	out	0x0a, r24	; 10
    154e:	05 c0       	rjmp	.+10     	; 0x155a <USART_voidInit+0x68>
    1550:	81 11       	cpse	r24, r1
    1552:	03 c0       	rjmp	.+6      	; 0x155a <USART_voidInit+0x68>
    1554:	8a b1       	in	r24, 0x0a	; 10
    1556:	87 7f       	andi	r24, 0xF7	; 247
    1558:	8a b9       	out	0x0a, r24	; 10
    155a:	83 81       	ldd	r24, Z+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	21 f4       	brne	.+8      	; 0x1568 <USART_voidInit+0x76>
    1560:	8a b1       	in	r24, 0x0a	; 10
    1562:	80 61       	ori	r24, 0x10	; 16
    1564:	8a b9       	out	0x0a, r24	; 10
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <USART_voidInit+0x82>
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	81 11       	cpse	r24, r1
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <USART_voidInit+0x82>
    156e:	8a b1       	in	r24, 0x0a	; 10
    1570:	8f 7e       	andi	r24, 0xEF	; 239
    1572:	8a b9       	out	0x0a, r24	; 10
    1574:	84 81       	ldd	r24, Z+4	; 0x04
    1576:	86 30       	cpi	r24, 0x06	; 6
    1578:	21 f4       	brne	.+8      	; 0x1582 <USART_voidInit+0x90>
    157a:	80 b5       	in	r24, 0x20	; 32
    157c:	86 68       	ori	r24, 0x86	; 134
    157e:	80 bd       	out	0x20, r24	; 32
    1580:	05 c0       	rjmp	.+10     	; 0x158c <USART_voidInit+0x9a>
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	19 f4       	brne	.+6      	; 0x158c <USART_voidInit+0x9a>
    1586:	80 b5       	in	r24, 0x20	; 32
    1588:	86 60       	ori	r24, 0x06	; 6
    158a:	80 bd       	out	0x20, r24	; 32
    158c:	81 85       	ldd	r24, Z+9	; 0x09
    158e:	80 38       	cpi	r24, 0x80	; 128
    1590:	21 f4       	brne	.+8      	; 0x159a <USART_voidInit+0xa8>
    1592:	8a b1       	in	r24, 0x0a	; 10
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	8a b9       	out	0x0a, r24	; 10
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <USART_voidInit+0xb2>
    159a:	81 11       	cpse	r24, r1
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <USART_voidInit+0xb2>
    159e:	8a b1       	in	r24, 0x0a	; 10
    15a0:	8f 77       	andi	r24, 0x7F	; 127
    15a2:	8a b9       	out	0x0a, r24	; 10
    15a4:	80 85       	ldd	r24, Z+8	; 0x08
    15a6:	80 34       	cpi	r24, 0x40	; 64
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <USART_voidInit+0xc0>
    15aa:	8a b1       	in	r24, 0x0a	; 10
    15ac:	80 64       	ori	r24, 0x40	; 64
    15ae:	8a b9       	out	0x0a, r24	; 10
    15b0:	08 95       	ret
    15b2:	81 11       	cpse	r24, r1
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <USART_voidInit+0xca>
    15b6:	8a b1       	in	r24, 0x0a	; 10
    15b8:	8f 7b       	andi	r24, 0xBF	; 191
    15ba:	8a b9       	out	0x0a, r24	; 10
    15bc:	08 95       	ret

000015be <USART_voidTransmit>:
    15be:	5d 9b       	sbis	0x0b, 5	; 11
    15c0:	fe cf       	rjmp	.-4      	; 0x15be <USART_voidTransmit>
    15c2:	8c b9       	out	0x0c, r24	; 12
    15c4:	08 95       	ret

000015c6 <USART_u8Receive>:
    15c6:	5f 9b       	sbis	0x0b, 7	; 11
    15c8:	fe cf       	rjmp	.-4      	; 0x15c6 <USART_u8Receive>
    15ca:	8c b1       	in	r24, 0x0c	; 12
    15cc:	08 95       	ret

000015ce <USART_voidRecievePacket>:
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	8c 01       	movw	r16, r24
    15de:	d6 2e       	mov	r13, r22
    15e0:	e4 2e       	mov	r14, r20
    15e2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <USART_u8Receive>
    15e6:	f8 01       	movw	r30, r16
    15e8:	80 83       	st	Z, r24
    15ea:	ff 24       	eor	r15, r15
    15ec:	f3 94       	inc	r15
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <USART_voidRecievePacket+0x36>
    15f0:	42 17       	cp	r20, r18
    15f2:	53 07       	cpc	r21, r19
    15f4:	c1 f0       	breq	.+48     	; 0x1626 <USART_voidRecievePacket+0x58>
    15f6:	e8 01       	movw	r28, r16
    15f8:	c8 0f       	add	r28, r24
    15fa:	d9 1f       	adc	r29, r25
    15fc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <USART_u8Receive>
    1600:	88 83       	st	Y, r24
    1602:	f3 94       	inc	r15
    1604:	8f 2d       	mov	r24, r15
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	fc 01       	movw	r30, r24
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	e0 0f       	add	r30, r16
    160e:	f1 1f       	adc	r31, r17
    1610:	60 81       	ld	r22, Z
    1612:	6e 15       	cp	r22, r14
    1614:	41 f0       	breq	.+16     	; 0x1626 <USART_voidRecievePacket+0x58>
    1616:	ac 01       	movw	r20, r24
    1618:	2d 2d       	mov	r18, r13
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	31 09       	sbc	r19, r1
    1620:	42 17       	cp	r20, r18
    1622:	53 07       	cpc	r21, r19
    1624:	2c f3       	brlt	.-54     	; 0x15f0 <USART_voidRecievePacket+0x22>
    1626:	6d 30       	cpi	r22, 0x0D	; 13
    1628:	11 f4       	brne	.+4      	; 0x162e <USART_voidRecievePacket+0x60>
    162a:	10 82       	st	Z, r1
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <USART_voidRecievePacket+0x68>
    162e:	f8 01       	movw	r30, r16
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	10 82       	st	Z, r1
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	df 90       	pop	r13
    1644:	08 95       	ret

00001646 <USART_voidSendString>:
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	c1 2c       	mov	r12, r1
    1656:	d1 2c       	mov	r13, r1
    1658:	76 01       	movw	r14, r12
    165a:	07 c0       	rjmp	.+14     	; 0x166a <USART_voidSendString+0x24>
    165c:	0e 94 df 0a 	call	0x15be	; 0x15be <USART_voidTransmit>
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	c8 1a       	sub	r12, r24
    1664:	d8 0a       	sbc	r13, r24
    1666:	e8 0a       	sbc	r14, r24
    1668:	f8 0a       	sbc	r15, r24
    166a:	fe 01       	movw	r30, r28
    166c:	ec 0d       	add	r30, r12
    166e:	fd 1d       	adc	r31, r13
    1670:	80 81       	ld	r24, Z
    1672:	81 11       	cpse	r24, r1
    1674:	f3 cf       	rjmp	.-26     	; 0x165c <USART_voidSendString+0x16>
    1676:	0e 94 df 0a 	call	0x15be	; 0x15be <USART_voidTransmit>
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	08 95       	ret

00001688 <__vector_13>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*RX ISR*/
void __vector_13(void)
{
	ptr_To_RX_Int_fun();
    1688:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <ptr_To_RX_Int_fun>
    168c:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <ptr_To_RX_Int_fun+0x1>
    1690:	09 95       	icall
    1692:	08 95       	ret

00001694 <__vector_15>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*TX ISR*/
void __vector_15(void)
{
	ptr_To_TX_Int_fun();
    1694:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <ptr_To_TX_Int_fun>
    1698:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <ptr_To_TX_Int_fun+0x1>
    169c:	09 95       	icall
    169e:	08 95       	ret

000016a0 <TERMINAL_init>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_init(void)
{
	USART_voidInit(&gstr_USART_Config);
    16a0:	80 e6       	ldi	r24, 0x60	; 96
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <USART_voidInit>
    16a8:	08 95       	ret

000016aa <ATM_Init>:
extern struct gstr_USART_Config_t gstr_USART_Config;


void ATM_Init(void)
{
	DIO_SetPinDirection(PORTD,PIN7,OUTPUT);
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	67 e0       	ldi	r22, 0x07	; 7
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,PIN6,OUTPUT);
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	66 e0       	ldi	r22, 0x06	; 6
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_SetPinDirection>
	EEPROM_voidInit();
    16be:	0e 94 17 03 	call	0x62e	; 0x62e <EEPROM_voidInit>
	LM35_voidInit();
    16c2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LM35_voidInit>
	Keyad_VoidINit();
    16c6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Keyad_VoidINit>
	LCD_init();
    16ca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_init>
	TERMINAL_init();
    16ce:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TERMINAL_init>
	BUZZER_en();
    16d2:	0e 94 05 03 	call	0x60a	; 0x60a <BUZZER_en>
	SPI_init();
    16d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <SPI_init>
    16da:	08 95       	ret

000016dc <TERMINAL_display>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_display(uint8_t* u8_stream)
{
	if (u8_stream != NULL_POINTER)
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	11 f0       	breq	.+4      	; 0x16e4 <TERMINAL_display+0x8>
	{
		USART_voidSendString(u8_stream);
    16e0:	0e 94 23 0b 	call	0x1646	; 0x1646 <USART_voidSendString>
    16e4:	08 95       	ret

000016e6 <TERMINAL_command>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_command(uint8_t* u8_buffer, uint8_t u8_arrSize)
{
	USART_voidRecievePacket(u8_buffer, u8_arrSize, '\r');
    16e6:	4d e0       	ldi	r20, 0x0D	; 13
    16e8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <USART_voidRecievePacket>
    16ec:	08 95       	ret

000016ee <ACCESS_grant>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ACCESS_grant(void)
{
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <ACCESS_grant+0xa>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <ACCESS_grant+0xc>
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_passCorrect = ATM_FALSE;
	uint8_t u8_trials      = u8_INTIAL_VAL;
    1700:	10 e0       	ldi	r17, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ACCESS_grant(void)
{
	uint8_t u8_passCorrect = ATM_FALSE;
    1702:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t u8_trials      = u8_INTIAL_VAL;
	uint8_t pu8_adminPass[u8_ADMIN_PASS_SIZE];
	
	while(!u8_passCorrect && (u8_trials < u8_MAX_TRIALS))
    1704:	18 c0       	rjmp	.+48     	; 0x1736 <ACCESS_grant+0x48>
	{
		u8_trials++;
    1706:	1f 5f       	subi	r17, 0xFF	; 255
		TERMINAL_display(REQUIRE_PASS_STR);
    1708:	8e e5       	ldi	r24, 0x5E	; 94
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		TERMINAL_command(pu8_adminPass,u8_ADMIN_PASS_SIZE);
    1710:	65 e0       	ldi	r22, 0x05	; 5
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TERMINAL_command>
		
		if(strcmp(pu8_adminPass,ADMIN_PASS) == u8_EQUAL_STR)
    171a:	61 e7       	ldi	r22, 0x71	; 113
    171c:	72 e0       	ldi	r23, 0x02	; 2
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strcmp>
    1726:	89 2b       	or	r24, r25
    1728:	29 f0       	breq	.+10     	; 0x1734 <ACCESS_grant+0x46>
		{
			u8_passCorrect = ATM_TRUE;
		}
		else
		{
			TERMINAL_display(WRONG_PASS_STR);
    172a:	86 e7       	ldi	r24, 0x76	; 118
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <ACCESS_grant+0x48>
		TERMINAL_display(REQUIRE_PASS_STR);
		TERMINAL_command(pu8_adminPass,u8_ADMIN_PASS_SIZE);
		
		if(strcmp(pu8_adminPass,ADMIN_PASS) == u8_EQUAL_STR)
		{
			u8_passCorrect = ATM_TRUE;
    1734:	01 e0       	ldi	r16, 0x01	; 1
{
	uint8_t u8_passCorrect = ATM_FALSE;
	uint8_t u8_trials      = u8_INTIAL_VAL;
	uint8_t pu8_adminPass[u8_ADMIN_PASS_SIZE];
	
	while(!u8_passCorrect && (u8_trials < u8_MAX_TRIALS))
    1736:	01 11       	cpse	r16, r1
    1738:	02 c0       	rjmp	.+4      	; 0x173e <ACCESS_grant+0x50>
    173a:	13 30       	cpi	r17, 0x03	; 3
    173c:	20 f3       	brcs	.-56     	; 0x1706 <ACCESS_grant+0x18>
		{
			TERMINAL_display(WRONG_PASS_STR);
		}
	}
	return u8_passCorrect;
}
    173e:	80 2f       	mov	r24, r16
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <TERMINAL_u8getInput>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
    175c:	14 2f       	mov	r17, r20
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_inputValid = ATM_TRUE;
	TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
    175e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TERMINAL_command>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
    1762:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t u8_inputValid = ATM_TRUE;
	TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
	do
	{
		if((pu8_inputBuff[u8_indexArr] >= '0') && (pu8_inputBuff[u8_indexArr] <= '9'))
    1764:	fe 01       	movw	r30, r28
    1766:	e8 0f       	add	r30, r24
    1768:	f1 1d       	adc	r31, r1
    176a:	90 81       	ld	r25, Z
    176c:	90 53       	subi	r25, 0x30	; 48
    176e:	9a 30       	cpi	r25, 0x0A	; 10
    1770:	68 f4       	brcc	.+26     	; 0x178c <TERMINAL_u8getInput+0x38>
		{
			u8_indexArr++;
    1772:	8f 5f       	subi	r24, 0xFF	; 255
		else
		{
			u8_inputValid = ATM_FALSE;
			break;
		}
		if((pu8_inputBuff[u8_indexArr] == NULL_CHAR) && (u8_indexArr < u8_minBuffSize))
    1774:	fe 01       	movw	r30, r28
    1776:	e8 0f       	add	r30, r24
    1778:	f1 1d       	adc	r31, r1
    177a:	90 81       	ld	r25, Z
    177c:	91 11       	cpse	r25, r1
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <TERMINAL_u8getInput+0x30>
    1780:	81 17       	cp	r24, r17
    1782:	30 f0       	brcs	.+12     	; 0x1790 <TERMINAL_u8getInput+0x3c>
		{
			u8_inputValid = ATM_FALSE;
			break;
		}
	}while(pu8_inputBuff[u8_indexArr] != NULL_CHAR);
    1784:	91 11       	cpse	r25, r1
    1786:	ee cf       	rjmp	.-36     	; 0x1764 <TERMINAL_u8getInput+0x10>
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_inputValid = ATM_TRUE;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <TERMINAL_u8getInput+0x3e>
		{
			u8_indexArr++;
		}
		else
		{
			u8_inputValid = ATM_FALSE;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <TERMINAL_u8getInput+0x3e>
			break;
		}
		if((pu8_inputBuff[u8_indexArr] == NULL_CHAR) && (u8_indexArr < u8_minBuffSize))
		{
			u8_inputValid = ATM_FALSE;
    1790:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}while(pu8_inputBuff[u8_indexArr] != NULL_CHAR);
	return u8_inputValid ;
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	08 95       	ret

0000179a <ATM_u8getArrCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8getArrCount(uint8_t* pu8_inputBuff)
{
    179a:	9c 01       	movw	r18, r24
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
    179c:	80 e0       	ldi	r24, 0x00	; 0
	while(pu8_inputBuff[u8_indexArr] != NULL_CHAR)
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <ATM_u8getArrCount+0x8>
	{
		++u8_indexArr ;
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8getArrCount(uint8_t* pu8_inputBuff)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	while(pu8_inputBuff[u8_indexArr] != NULL_CHAR)
    17a2:	f9 01       	movw	r30, r18
    17a4:	e8 0f       	add	r30, r24
    17a6:	f1 1d       	adc	r31, r1
    17a8:	90 81       	ld	r25, Z
    17aa:	91 11       	cpse	r25, r1
    17ac:	f9 cf       	rjmp	.-14     	; 0x17a0 <ATM_u8getArrCount+0x6>
	{
		++u8_indexArr ;
	}
	return u8_indexArr ;
}
    17ae:	08 95       	ret

000017b0 <ATM_voidstoreBalance>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
    17b0:	dc 01       	movw	r26, r24
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
    17b2:	38 e0       	ldi	r19, 0x08	; 8
    17b4:	34 1b       	sub	r19, r20
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
    17b6:	20 e0       	ldi	r18, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
    17b8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
	while(u8_indexArr < u8_BALANCE_MAX_SIZE)
    17ba:	12 c0       	rjmp	.+36     	; 0x17e0 <ATM_voidstoreBalance+0x30>
	{
		if(u8_indexArr < u8_startingIndex)
    17bc:	93 17       	cp	r25, r19
    17be:	30 f4       	brcc	.+12     	; 0x17cc <ATM_voidstoreBalance+0x1c>
		{
			pu8_newRecBal[u8_indexArr] = '0';
    17c0:	80 e3       	ldi	r24, 0x30	; 48
    17c2:	fd 01       	movw	r30, r26
    17c4:	e9 0f       	add	r30, r25
    17c6:	f1 1d       	adc	r31, r1
    17c8:	80 83       	st	Z, r24
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <ATM_voidstoreBalance+0x2e>
		}
		else
		{
			pu8_newRecBal[u8_indexArr] = pu8_tempRecBal[u8_indexArr2];
    17cc:	fb 01       	movw	r30, r22
    17ce:	e2 0f       	add	r30, r18
    17d0:	f1 1d       	adc	r31, r1
    17d2:	80 81       	ld	r24, Z
    17d4:	fd 01       	movw	r30, r26
    17d6:	e9 0f       	add	r30, r25
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 83       	st	Z, r24
			u8_indexArr2++;
    17dc:	2f 5f       	subi	r18, 0xFF	; 255
		}
		u8_indexArr++;
    17de:	9f 5f       	subi	r25, 0xFF	; 255
void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
	while(u8_indexArr < u8_BALANCE_MAX_SIZE)
    17e0:	99 30       	cpi	r25, 0x09	; 9
    17e2:	60 f3       	brcs	.-40     	; 0x17bc <ATM_voidstoreBalance+0xc>
			pu8_newRecBal[u8_indexArr] = pu8_tempRecBal[u8_indexArr2];
			u8_indexArr2++;
		}
		u8_indexArr++;
	}
}
    17e4:	08 95       	ret

000017e6 <ATM_voidlcdUserInterface>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidlcdUserInterface(void)
{
	LCD_command(DISPLAY_CLEAR);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	LCD_printString(LCD_INSERT_CARD_STR);
    17ec:	89 e8       	ldi	r24, 0x89	; 137
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_newLine();
    17f4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
	LCD_printString(LCD_SHOW_TEMP_OPTION_STR);
    17f8:	87 e9       	ldi	r24, 0x97	; 151
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_cursorMove(RIGHT, 2);
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	84 e1       	ldi	r24, 0x14	; 20
    1804:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_cursorMove>
	LCD_printString(LCD_EXIT_OPTION_STR);
    1808:	8e e9       	ldi	r24, 0x9E	; 158
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
    1810:	08 95       	ret

00001812 <ATM_u8PinAccessGrant>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	6c 01       	movw	r12, r24
	uint8_t u8_pinValidity = ATM_TRUE;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
    1824:	00 e0       	ldi	r16, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
	uint8_t u8_pinValidity = ATM_TRUE;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
    1826:	f1 2c       	mov	r15, r1
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
	uint8_t u8_pinValidity = ATM_TRUE;
    1828:	ee 24       	eor	r14, r14
    182a:	e3 94       	inc	r14
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
	uint8_t pu8_atmPinBuffer[u8_PIN_SIZE] ;
	while((pu8_cardPin[u8_indexArr] != NULL_CHAR) && (u8_countWrongEnteredTimes < u8_MAX_ENTERED_PIN_TIMES))
    182c:	31 c0       	rjmp	.+98     	; 0x1890 <ATM_u8PinAccessGrant+0x7e>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data();
    182e:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>
    1832:	18 2f       	mov	r17, r24
		if(u8_keyPadReturnASCII!= u8_KEYPAD_NOT_PRESSED)
    1834:	84 31       	cpi	r24, 0x14	; 20
    1836:	61 f1       	breq	.+88     	; 0x1890 <ATM_u8PinAccessGrant+0x7e>
		{
			if(u8_keyPadReturnASCII<='9' && u8_keyPadReturnASCII>='0')
    1838:	80 ed       	ldi	r24, 0xD0	; 208
    183a:	81 0f       	add	r24, r17
    183c:	8a 30       	cpi	r24, 0x0A	; 10
    183e:	40 f4       	brcc	.+16     	; 0x1850 <ATM_u8PinAccessGrant+0x3e>
			{
				LCD_data('*') ;
    1840:	8a e2       	ldi	r24, 0x2A	; 42
    1842:	0e 94 59 05 	call	0xab2	; 0xab2 <LCD_data>
				pu8_atmPinBuffer[u8_indexArr] = u8_keyPadReturnASCII ;
				if(pu8_atmPinBuffer[u8_indexArr] !=  pu8_cardPin[u8_indexArr])
    1846:	88 81       	ld	r24, Y
    1848:	18 13       	cpse	r17, r24
				{
					u8_pinValidity = ATM_FALSE ;
    184a:	e1 2c       	mov	r14, r1
				}
				u8_indexArr++;
    184c:	f3 94       	inc	r15
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <ATM_u8PinAccessGrant+0x40>
			}
			else
			{
				u8_pinValidity = ATM_FALSE;
    1850:	e1 2c       	mov	r14, r1
			}

			if(u8_pinValidity== ATM_FALSE && u8_indexArr == (u8_PIN_SIZE - 1)) 
    1852:	e1 10       	cpse	r14, r1
    1854:	1d c0       	rjmp	.+58     	; 0x1890 <ATM_u8PinAccessGrant+0x7e>
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	f8 12       	cpse	r15, r24
    185a:	1a c0       	rjmp	.+52     	; 0x1890 <ATM_u8PinAccessGrant+0x7e>
			{
				u8_pinValidity = ATM_TRUE ;
				LCD_command(DISPLAY_CLEAR) ;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
				LCD_printString(LCD_WRONG_PIN_STR);
    1862:	85 ea       	ldi	r24, 0xA5	; 165
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				TIMER0_msdelay(1000) ;
    186a:	88 ee       	ldi	r24, 0xE8	; 232
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
				LCD_command(DISPLAY_CLEAR) ;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
				u8_countWrongEnteredTimes++ ;
    1878:	0f 5f       	subi	r16, 0xFF	; 255
				if(u8_countWrongEnteredTimes < 3)
    187a:	03 30       	cpi	r16, 0x03	; 3
    187c:	20 f4       	brcc	.+8      	; 0x1886 <ATM_u8PinAccessGrant+0x74>
				{
					LCD_printString(LCD_REQUIRE_PIN_STR);
    187e:	8a e2       	ldi	r24, 0x2A	; 42
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				}
				LCD_newLine();
    1886:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
				u8_indexArr = u8_INTIAL_VAL ;
    188a:	f1 2c       	mov	r15, r1
				u8_pinValidity = ATM_FALSE;
			}

			if(u8_pinValidity== ATM_FALSE && u8_indexArr == (u8_PIN_SIZE - 1)) 
			{
				u8_pinValidity = ATM_TRUE ;
    188c:	ee 24       	eor	r14, r14
    188e:	e3 94       	inc	r14
	uint8_t u8_pinValidity = ATM_TRUE;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
	uint8_t pu8_atmPinBuffer[u8_PIN_SIZE] ;
	while((pu8_cardPin[u8_indexArr] != NULL_CHAR) && (u8_countWrongEnteredTimes < u8_MAX_ENTERED_PIN_TIMES))
    1890:	e6 01       	movw	r28, r12
    1892:	cf 0d       	add	r28, r15
    1894:	d1 1d       	adc	r29, r1
    1896:	88 81       	ld	r24, Y
    1898:	88 23       	and	r24, r24
    189a:	11 f0       	breq	.+4      	; 0x18a0 <ATM_u8PinAccessGrant+0x8e>
    189c:	03 30       	cpi	r16, 0x03	; 3
    189e:	38 f2       	brcs	.-114    	; 0x182e <ATM_u8PinAccessGrant+0x1c>
			}

		}

	}
	if(u8_countWrongEnteredTimes == 3)
    18a0:	03 30       	cpi	r16, 0x03	; 3
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <ATM_u8PinAccessGrant+0x94>
	{
		u8_pinValidity = ATM_FALSE ;
    18a4:	e1 2c       	mov	r14, r1
	}
	return u8_pinValidity ;
}
    18a6:	8e 2d       	mov	r24, r14
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	08 95       	ret

000018ba <ATM_u8checkBalanceValidity>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	27 97       	sbiw	r28, 0x07	; 7
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	6c 01       	movw	r12, r24
	uint8_t u8_balanceValidity = u8_BALANCE_VALID;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE];
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_countWrongBalInput = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED;
	LCD_command(DISPLAY_CLEAR);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	LCD_printString(LCD_REQUIRE_USER_BAL_STR);
    18e0:	80 eb       	ldi	r24, 0xB0	; 176
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_newLine();
    18e8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR);
    18ec:	80 ec       	ldi	r24, 0xC0	; 192
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_cursorMove(LEFT,7);
    18f4:	67 e0       	ldi	r22, 0x07	; 7
    18f6:	80 e1       	ldi	r24, 0x10	; 16
    18f8:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_cursorMove>
uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE];
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_countWrongBalInput = u8_INTIAL_VAL;
    18fc:	f1 2c       	mov	r15, r1

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE];
	uint8_t u8_indexArr = u8_INTIAL_VAL;
    18fe:	00 e0       	ldi	r16, 0x00	; 0
	LCD_printString(LCD_REQUIRE_USER_BAL_STR);
	LCD_newLine();
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR);
	LCD_cursorMove(LEFT,7);

	while((u8_countWrongBalInput < u8_MAX_TIMES_WRONG_AMOUNT) && (u8_indexArr < (u8_MAX_BALANCE_MAX_SIZE-1)))
    1900:	3c c0       	rjmp	.+120    	; 0x197a <ATM_u8checkBalanceValidity+0xc0>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data();
    1902:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>
    1906:	18 2f       	mov	r17, r24
		if(u8_keyPadReturnASCII != u8_KEYPAD_NOT_PRESSED)
    1908:	84 31       	cpi	r24, 0x14	; 20
    190a:	b9 f1       	breq	.+110    	; 0x197a <ATM_u8checkBalanceValidity+0xc0>
		{
			if(u8_keyPadReturnASCII<='9' && u8_keyPadReturnASCII>='0' )
    190c:	80 ed       	ldi	r24, 0xD0	; 208
    190e:	81 0f       	add	r24, r17
    1910:	8a 30       	cpi	r24, 0x0A	; 10
    1912:	78 f4       	brcc	.+30     	; 0x1932 <ATM_u8checkBalanceValidity+0x78>
			{
				pu8_userInputBal[u8_indexArr] = u8_keyPadReturnASCII;
    1914:	f6 01       	movw	r30, r12
    1916:	e0 0f       	add	r30, r16
    1918:	f1 1d       	adc	r31, r1
    191a:	10 83       	st	Z, r17
				if(u8_indexArr == 4)
    191c:	04 30       	cpi	r16, 0x04	; 4
    191e:	21 f4       	brne	.+8      	; 0x1928 <ATM_u8checkBalanceValidity+0x6e>
				{
					LCD_cursorMove(RIGHT,1);
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	84 e1       	ldi	r24, 0x14	; 20
    1924:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_cursorMove>
				}
				LCD_data(u8_keyPadReturnASCII);
    1928:	81 2f       	mov	r24, r17
    192a:	0e 94 59 05 	call	0xab2	; 0xab2 <LCD_data>
				u8_indexArr++;
    192e:	0f 5f       	subi	r16, 0xFF	; 255
    1930:	24 c0       	rjmp	.+72     	; 0x197a <ATM_u8checkBalanceValidity+0xc0>
			}
			else
			{
				LCD_command(DISPLAY_CLEAR);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
				LCD_printString((uint8_t*)"Enter a valid");
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				LCD_newLine();
    1940:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
				LCD_printString((uint8_t*)"number");
    1944:	86 ed       	ldi	r24, 0xD6	; 214
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				TIMER0_msdelay(1000);
    194c:	88 ee       	ldi	r24, 0xE8	; 232
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
				LCD_command(DISPLAY_CLEAR);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
				LCD_printString(LCD_REQUIRE_USER_BAL_STR);
    195a:	80 eb       	ldi	r24, 0xB0	; 176
    195c:	92 e0       	ldi	r25, 0x02	; 2
    195e:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				LCD_newLine();
    1962:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
				LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR);
    1966:	80 ec       	ldi	r24, 0xC0	; 192
    1968:	92 e0       	ldi	r25, 0x02	; 2
    196a:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
				LCD_cursorMove(LEFT,7);
    196e:	67 e0       	ldi	r22, 0x07	; 7
    1970:	80 e1       	ldi	r24, 0x10	; 16
    1972:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_cursorMove>
				u8_indexArr = u8_INTIAL_VAL;
				++u8_countWrongBalInput;
    1976:	f3 94       	inc	r15
				LCD_command(DISPLAY_CLEAR);
				LCD_printString(LCD_REQUIRE_USER_BAL_STR);
				LCD_newLine();
				LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR);
				LCD_cursorMove(LEFT,7);
				u8_indexArr = u8_INTIAL_VAL;
    1978:	00 e0       	ldi	r16, 0x00	; 0
	LCD_printString(LCD_REQUIRE_USER_BAL_STR);
	LCD_newLine();
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR);
	LCD_cursorMove(LEFT,7);

	while((u8_countWrongBalInput < u8_MAX_TIMES_WRONG_AMOUNT) && (u8_indexArr < (u8_MAX_BALANCE_MAX_SIZE-1)))
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	8f 15       	cp	r24, r15
    197e:	18 f0       	brcs	.+6      	; 0x1986 <ATM_u8checkBalanceValidity+0xcc>
    1980:	06 30       	cpi	r16, 0x06	; 6
    1982:	08 f4       	brcc	.+2      	; 0x1986 <ATM_u8checkBalanceValidity+0xcc>
    1984:	be cf       	rjmp	.-132    	; 0x1902 <ATM_u8checkBalanceValidity+0x48>
				++u8_countWrongBalInput;
			}
		}
	}

	pu8_userInputBal[u8_indexArr] = NULL_CHAR;
    1986:	f6 01       	movw	r30, r12
    1988:	e0 0f       	add	r30, r16
    198a:	f1 1d       	adc	r31, r1
    198c:	10 82       	st	Z, r1

	if(u8_countWrongBalInput<u8_MAX_TIMES_WRONG_AMOUNT)
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	8f 15       	cp	r24, r15
    1992:	08 f1       	brcs	.+66     	; 0x19d6 <ATM_u8checkBalanceValidity+0x11c>
	{

		EEPROM_u8ReadNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM,pu8_atmMaxBal,u8_MAX_BALANCE_MAX_SIZE);
    1994:	27 e0       	ldi	r18, 0x07	; 7
    1996:	ae 01       	movw	r20, r28
    1998:	4f 5f       	subi	r20, 0xFF	; 255
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	69 e1       	ldi	r22, 0x19	; 25
    199e:	8e ef       	ldi	r24, 0xFE	; 254
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	0e 94 67 03 	call	0x6ce	; 0x6ce <EEPROM_u8ReadNeededPartBlock>
		u8_indexArr = u8_INTIAL_VAL;
    19a6:	80 e0       	ldi	r24, 0x00	; 0

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
    19a8:	0c c0       	rjmp	.+24     	; 0x19c2 <ATM_u8checkBalanceValidity+0x108>
		{
			if(pu8_atmMaxBal[u8_indexArr]>pu8_userInputBal[u8_indexArr])
    19aa:	e1 e0       	ldi	r30, 0x01	; 1
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	ec 0f       	add	r30, r28
    19b0:	fd 1f       	adc	r31, r29
    19b2:	e8 0f       	add	r30, r24
    19b4:	f1 1d       	adc	r31, r1
    19b6:	20 81       	ld	r18, Z
    19b8:	92 17       	cp	r25, r18
    19ba:	78 f0       	brcs	.+30     	; 0x19da <ATM_u8checkBalanceValidity+0x120>
			{
				u8_balanceValidity = u8_BALANCE_VALID;
				break;
			}
			else if(pu8_atmMaxBal[u8_indexArr]<pu8_userInputBal[u8_indexArr])
    19bc:	29 17       	cp	r18, r25
    19be:	78 f0       	brcs	.+30     	; 0x19de <ATM_u8checkBalanceValidity+0x124>
				u8_balanceValidity = u8_BALANCE_NOT_VALID;
				break;
			}
			else
			{
				u8_indexArr++;
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
	{

		EEPROM_u8ReadNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM,pu8_atmMaxBal,u8_MAX_BALANCE_MAX_SIZE);
		u8_indexArr = u8_INTIAL_VAL;

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
    19c2:	86 30       	cpi	r24, 0x06	; 6
    19c4:	70 f4       	brcc	.+28     	; 0x19e2 <ATM_u8checkBalanceValidity+0x128>
    19c6:	f6 01       	movw	r30, r12
    19c8:	e8 0f       	add	r30, r24
    19ca:	f1 1d       	adc	r31, r1
    19cc:	90 81       	ld	r25, Z
    19ce:	91 11       	cpse	r25, r1
    19d0:	ec cf       	rjmp	.-40     	; 0x19aa <ATM_u8checkBalanceValidity+0xf0>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <ATM_u8checkBalanceValidity+0x12a>
			}
		}
	}
	else
	{
		u8_balanceValidity= u8_BALANCE_NOT_VALID;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <ATM_u8checkBalanceValidity+0x12a>

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
		{
			if(pu8_atmMaxBal[u8_indexArr]>pu8_userInputBal[u8_indexArr])
			{
				u8_balanceValidity = u8_BALANCE_VALID;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <ATM_u8checkBalanceValidity+0x12a>
				break;
			}
			else if(pu8_atmMaxBal[u8_indexArr]<pu8_userInputBal[u8_indexArr])
			{
				u8_balanceValidity = u8_BALANCE_NOT_VALID;
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <ATM_u8checkBalanceValidity+0x12a>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		u8_balanceValidity= u8_BALANCE_NOT_VALID;
	}
	return u8_balanceValidity;
}
    19e4:	27 96       	adiw	r28, 0x07	; 7
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	08 95       	ret

00001a00 <ATM_voidShowTemp>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidShowTemp(void)
{
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_tempNow, u8_keyPadReturnASCII;
	LCD_command(DISPLAY_CLEAR);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	LCD_printString(LCD_EXIT_TO_MAIN_STR);
    1a12:	8d ed       	ldi	r24, 0xDD	; 221
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_newLine();
    1a1a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
	LCD_printString(LCD_SHOW_TEMP_STR);
    1a1e:	84 ee       	ldi	r24, 0xE4	; 228
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	u8_keyPadReturnASCII = KeyPad_U8Data();
    1a26:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>
    1a2a:	18 2f       	mov	r17, r24
	while (u8_keyPadReturnASCII != '1' )
    1a2c:	19 c0       	rjmp	.+50     	; 0x1a60 <ATM_voidShowTemp+0x60>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data();
    1a2e:	0e 94 3b 04 	call	0x876	; 0x876 <KeyPad_U8Data>
    1a32:	18 2f       	mov	r17, r24
		LM35_u8GetTempInC(&u8_tempNow);
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 6d 06 	call	0xcda	; 0xcda <LM35_u8GetTempInC>
		LCD_printDigits(u8_tempNow);
    1a3c:	69 81       	ldd	r22, Y+1	; 0x01
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 a8 05 	call	0xb50	; 0xb50 <LCD_printDigits>
		LCD_cursorMove(LEFT,2);
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	80 e1       	ldi	r24, 0x10	; 16
    1a4c:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_cursorMove>
		if(u8_tempNow>u8_MAX_TEMP)
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	84 32       	cpi	r24, 0x24	; 36
    1a54:	18 f0       	brcs	.+6      	; 0x1a5c <ATM_voidShowTemp+0x5c>
		{
			BUZZER_on();
    1a56:	0e 94 0b 03 	call	0x616	; 0x616 <BUZZER_on>
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <ATM_voidShowTemp+0x60>
		}
		else
		{
			BUZZER_off();
    1a5c:	0e 94 11 03 	call	0x622	; 0x622 <BUZZER_off>
	LCD_command(DISPLAY_CLEAR);
	LCD_printString(LCD_EXIT_TO_MAIN_STR);
	LCD_newLine();
	LCD_printString(LCD_SHOW_TEMP_STR);
	u8_keyPadReturnASCII = KeyPad_U8Data();
	while (u8_keyPadReturnASCII != '1' )
    1a60:	11 33       	cpi	r17, 0x31	; 49
    1a62:	29 f7       	brne	.-54     	; 0x1a2e <ATM_voidShowTemp+0x2e>
		else
		{
			BUZZER_off();
		}
	}
}
    1a64:	0f 90       	pop	r0
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	08 95       	ret

00001a6e <ATM_voidGetCash>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidGetCash(void)
{
	LCD_command(DISPLAY_CLEAR);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
	LCD_printString(LCD_WAIT_CASH_STR);
    1a74:	8f ee       	ldi	r24, 0xEF	; 239
    1a76:	92 e0       	ldi	r25, 0x02	; 2
    1a78:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
	LCD_newLine();
    1a7c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
	motorOn(MOTOR_ID_01,FORWARD);
    1a80:	67 e1       	ldi	r22, 0x17	; 23
    1a82:	84 e1       	ldi	r24, 0x14	; 20
    1a84:	0e 94 15 07 	call	0xe2a	; 0xe2a <motorOn>
	TIMER0_msdelay(1000);
    1a88:	88 ee       	ldi	r24, 0xE8	; 232
    1a8a:	93 e0       	ldi	r25, 0x03	; 3
    1a8c:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
	motorOff(MOTOR_ID_01,FORWARD);
    1a90:	67 e1       	ldi	r22, 0x17	; 23
    1a92:	84 e1       	ldi	r24, 0x14	; 20
    1a94:	0e 94 29 07 	call	0xe52	; 0xe52 <motorOff>
	LCD_command(DISPLAY_CLEAR);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
    1a9e:	08 95       	ret

00001aa0 <ATM_u8checkAccounBal>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	8c 01       	movw	r16, r24
    1aae:	eb 01       	movw	r28, r22
    1ab0:	ca 01       	movw	r24, r20
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE);
    1ab2:	29 e0       	ldi	r18, 0x09	; 9
    1ab4:	ab 01       	movw	r20, r22
    1ab6:	64 e1       	ldi	r22, 0x14	; 20
    1ab8:	0e 94 67 03 	call	0x6ce	; 0x6ce <EEPROM_u8ReadNeededPartBlock>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL;
    1abc:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE);
	//cashing first non-zero number in user Account balance
	while(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <ATM_u8checkAccounBal+0x26>
	{
		if(pu8_returnUserBal[u8_indexReturnUserBal] > '0')
    1ac0:	91 33       	cpi	r25, 0x31	; 49
    1ac2:	38 f4       	brcc	.+14     	; 0x1ad2 <ATM_u8checkAccounBal+0x32>
		{
			break;
		}
		else
		{
			u8_indexReturnUserBal++;
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE);
	//cashing first non-zero number in user Account balance
	while(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e8 0f       	add	r30, r24
    1aca:	f1 1d       	adc	r31, r1
    1acc:	90 81       	ld	r25, Z
    1ace:	91 11       	cpse	r25, r1
    1ad0:	f7 cf       	rjmp	.-18     	; 0x1ac0 <ATM_u8checkAccounBal+0x20>
		{
			u8_indexReturnUserBal++;
		}
	}

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    1ad2:	91 11       	cpse	r25, r1
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <ATM_u8checkAccounBal+0x42>
			LCD_command(DISPLAY_CLEAR) ;
		}
	}
	else
	{
		u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1ad6:	c0 e0       	ldi	r28, 0x00	; 0
    1ad8:	6b c0       	rjmp	.+214    	; 0x1bb0 <ATM_u8checkAccounBal+0x110>

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
	{
		while(pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR )
		{
			if(pu8_balanceWanted[u8_indexBalWanted]>'0')
    1ada:	21 33       	cpi	r18, 0x31	; 49
    1adc:	48 f4       	brcc	.+18     	; 0x1af0 <ATM_u8checkAccounBal+0x50>
			{
				break;
			}
			else
			{
				++u8_indexBalWanted;
    1ade:	9f 5f       	subi	r25, 0xFF	; 255
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <ATM_u8checkAccounBal+0x44>
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
	{
		while(pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR )
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	e9 0f       	add	r30, r25
    1ae8:	f1 1d       	adc	r31, r1
    1aea:	20 81       	ld	r18, Z
    1aec:	21 11       	cpse	r18, r1
    1aee:	f5 cf       	rjmp	.-22     	; 0x1ada <ATM_u8checkAccounBal+0x3a>
			else
			{
				++u8_indexBalWanted;
			}
		}
		if( ((u8_BALANCE_MAX_SIZE - u8_indexReturnUserBal) == (u8_MAX_BALANCE_MAX_SIZE - u8_indexBalWanted - 2)) )
    1af0:	49 e0       	ldi	r20, 0x09	; 9
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	48 1b       	sub	r20, r24
    1af6:	51 09       	sbc	r21, r1
    1af8:	25 e0       	ldi	r18, 0x05	; 5
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	29 1b       	sub	r18, r25
    1afe:	31 09       	sbc	r19, r1
    1b00:	42 17       	cp	r20, r18
    1b02:	53 07       	cpc	r21, r19
    1b04:	c9 f5       	brne	.+114    	; 0x1b78 <ATM_u8checkAccounBal+0xd8>
    1b06:	1c c0       	rjmp	.+56     	; 0x1b40 <ATM_u8checkAccounBal+0xa0>
		{
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
			{
				if(pu8_balanceWanted[u8_indexBalWanted] < pu8_returnUserBal[u8_indexReturnUserBal])
    1b08:	32 17       	cp	r19, r18
    1b0a:	48 f1       	brcs	.+82     	; 0x1b5e <ATM_u8checkAccounBal+0xbe>
				{
					//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
					u8_checkAccBalValdity = u8_BALANCE_VALID;
					break;
				}
				else if(pu8_balanceWanted[u8_indexBalWanted] > pu8_returnUserBal[u8_indexReturnUserBal])
    1b0c:	23 17       	cp	r18, r19
    1b0e:	b0 f4       	brcc	.+44     	; 0x1b3c <ATM_u8checkAccounBal+0x9c>
				{
					//print user has no enough balance terminate the process
					u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
					LCD_command(DISPLAY_CLEAR);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
					LCD_printString((uint8_t*)"Not Enough");
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
					LCD_newLine();
    1b1e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
					LCD_printString((uint8_t*)"Account Bal.");
    1b22:	8b e0       	ldi	r24, 0x0B	; 11
    1b24:	93 e0       	ldi	r25, 0x03	; 3
    1b26:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
					TIMER0_msdelay(1000);
    1b2a:	88 ee       	ldi	r24, 0xE8	; 232
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
					LCD_command(DISPLAY_CLEAR);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
					break;
				}
				else if(pu8_balanceWanted[u8_indexBalWanted] > pu8_returnUserBal[u8_indexReturnUserBal])
				{
					//print user has no enough balance terminate the process
					u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
    1b38:	c0 e0       	ldi	r28, 0x00	; 0
					LCD_printString((uint8_t*)"Not Enough");
					LCD_newLine();
					LCD_printString((uint8_t*)"Account Bal.");
					TIMER0_msdelay(1000);
					LCD_command(DISPLAY_CLEAR);
					break;
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <ATM_u8checkAccounBal+0xc4>
				}
				else
				{
					++u8_indexBalWanted;
    1b3c:	9f 5f       	subi	r25, 0xFF	; 255
					++u8_indexReturnUserBal;
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
				++u8_indexBalWanted;
			}
		}
		if( ((u8_BALANCE_MAX_SIZE - u8_indexReturnUserBal) == (u8_MAX_BALANCE_MAX_SIZE - u8_indexBalWanted - 2)) )
		{
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
    1b40:	7e 01       	movw	r14, r28
    1b42:	e8 0e       	add	r14, r24
    1b44:	f1 1c       	adc	r15, r1
    1b46:	f7 01       	movw	r30, r14
    1b48:	20 81       	ld	r18, Z
    1b4a:	22 23       	and	r18, r18
    1b4c:	51 f0       	breq	.+20     	; 0x1b62 <ATM_u8checkAccounBal+0xc2>
    1b4e:	f8 01       	movw	r30, r16
    1b50:	e9 0f       	add	r30, r25
    1b52:	f1 1d       	adc	r31, r1
    1b54:	30 81       	ld	r19, Z
    1b56:	31 11       	cpse	r19, r1
    1b58:	d7 cf       	rjmp	.-82     	; 0x1b08 <ATM_u8checkAccounBal+0x68>
uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
    1b5a:	c0 e0       	ldi	r28, 0x00	; 0
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <ATM_u8checkAccounBal+0xc4>
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
			{
				if(pu8_balanceWanted[u8_indexBalWanted] < pu8_returnUserBal[u8_indexReturnUserBal])
				{
					//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
					u8_checkAccBalValdity = u8_BALANCE_VALID;
    1b5e:	c1 e0       	ldi	r28, 0x01	; 1
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <ATM_u8checkAccounBal+0xc4>
uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID;
    1b62:	c0 e0       	ldi	r28, 0x00	; 0
				{
					++u8_indexBalWanted;
					++u8_indexReturnUserBal;
				}
			}
			if(pu8_returnUserBal[u8_indexReturnUserBal] == NULL_CHAR)
    1b64:	f7 01       	movw	r30, r14
    1b66:	80 81       	ld	r24, Z
    1b68:	81 11       	cpse	r24, r1
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <ATM_u8checkAccounBal+0xce>
			{
				u8_checkAccBalValdity = u8_BALANCE_VALID;
    1b6c:	c1 e0       	ldi	r28, 0x01	; 1
			}
			if(u8_checkAccBalValdity == u8_BALANCE_VALID)
    1b6e:	c1 30       	cpi	r28, 0x01	; 1
    1b70:	f9 f4       	brne	.+62     	; 0x1bb0 <ATM_u8checkAccounBal+0x110>
			{
				//balance of user is exactly as he wanted , rotate the motor for 1 sec, update balance,and terminate process
				ATM_voidGetCash() ;
    1b72:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <ATM_voidGetCash>
    1b76:	1c c0       	rjmp	.+56     	; 0x1bb0 <ATM_u8checkAccounBal+0x110>
			}
		}
		else if ( ((u8_BALANCE_MAX_SIZE-u8_indexReturnUserBal) > (u8_MAX_BALANCE_MAX_SIZE-u8_indexBalWanted - 2)) )
    1b78:	24 17       	cp	r18, r20
    1b7a:	35 07       	cpc	r19, r21
    1b7c:	24 f4       	brge	.+8      	; 0x1b86 <ATM_u8checkAccounBal+0xe6>
		{
			//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
			u8_checkAccBalValdity = u8_BALANCE_VALID ;
			ATM_voidGetCash() ;
    1b7e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <ATM_voidGetCash>
			}
		}
		else if ( ((u8_BALANCE_MAX_SIZE-u8_indexReturnUserBal) > (u8_MAX_BALANCE_MAX_SIZE-u8_indexBalWanted - 2)) )
		{
			//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
			u8_checkAccBalValdity = u8_BALANCE_VALID ;
    1b82:	c1 e0       	ldi	r28, 0x01	; 1
    1b84:	15 c0       	rjmp	.+42     	; 0x1bb0 <ATM_u8checkAccounBal+0x110>
		}
		else
		{
			//process termination due to user has no enough balance
			u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
			LCD_command(DISPLAY_CLEAR) ;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
			LCD_printString((uint8_t*)"Not Enough");
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
			LCD_newLine() ;
    1b94:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_newLine>
			LCD_printString((uint8_t*)"Account Bal.");
    1b98:	8b e0       	ldi	r24, 0x0B	; 11
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 95 05 	call	0xb2a	; 0xb2a <LCD_printString>
			TIMER0_msdelay(1000) ;
    1ba0:	88 ee       	ldi	r24, 0xE8	; 232
    1ba2:	93 e0       	ldi	r25, 0x03	; 3
    1ba4:	0e 94 0f 0a 	call	0x141e	; 0x141e <TIMER0_msdelay>
			LCD_command(DISPLAY_CLEAR) ;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_command>
			ATM_voidGetCash() ;
		}
		else
		{
			//process termination due to user has no enough balance
			u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1bae:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
	}
	return u8_checkAccBalValdity;
}
    1bb0:	8c 2f       	mov	r24, r28
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	08 95       	ret

00001bc0 <ATM_voidStoreRecNum>:

void ATM_voidStoreRecNum(uint16_t u16_recNum)
{
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <ATM_voidStoreRecNum+0x6>
    1bc6:	1f 92       	push	r1
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_highNipple, u8_lowNipple;
	uint8_t array[3];
	u8_lowNipple = (uint8_t)(u16_recNum);
	u8_highNipple = (uint8_t)(u16_recNum >> 8);
	array[0] = u8_lowNipple;
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	array[1] = u8_highNipple;
    1bce:	9a 83       	std	Y+2, r25	; 0x02
	array[2] = NULL_CHAR;
    1bd0:	1b 82       	std	Y+3, r1	; 0x03
	EEPROM_u8WriteNeededPartBlock(u8_RECORDS_PAGE_NUM,u8_RECORDS_FIRST_BYTE_NUM, array,3);
    1bd2:	23 e0       	ldi	r18, 0x03	; 3
    1bd4:	ae 01       	movw	r20, r28
    1bd6:	4f 5f       	subi	r20, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bda:	63 e2       	ldi	r22, 0x23	; 35
    1bdc:	8e ef       	ldi	r24, 0xFE	; 254
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <ATM_u16GetRecNum>:

uint16_t ATM_u16GetRecNum(uint8_t* arr)
{
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24
	uint8_t u8_highNipple, u8_lowNipple;
	uint16_t u16_recNum;
	EEPROM_u8ReadNeededPartBlock(u8_RECORDS_PAGE_NUM,u8_RECORDS_FIRST_BYTE_NUM,arr,3);
    1bf6:	23 e0       	ldi	r18, 0x03	; 3
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	63 e2       	ldi	r22, 0x23	; 35
    1bfc:	8e ef       	ldi	r24, 0xFE	; 254
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 67 03 	call	0x6ce	; 0x6ce <EEPROM_u8ReadNeededPartBlock>
	u8_lowNipple = arr[0];
    1c04:	28 81       	ld	r18, Y
	u8_highNipple = arr[1];
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
	u16_recNum = ((uint16_t)(u8_highNipple << 8)|(uint16_t)(u8_lowNipple));
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	88 27       	eor	r24, r24
	return u16_recNum;
}
    1c0e:	82 2b       	or	r24, r18
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <ATM_panValidity>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	64 97       	sbiw	r28, 0x14	; 20
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	6c 01       	movw	r12, r24
    1c3c:	5b 01       	movw	r10, r22
	uint8_t u8_PANstate    = ATM_FALSE  ;
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	uint8_t pu8_arr[3];
	u16_recordNum = ATM_u16GetRecNum(pu8_arr);
    1c3e:	ce 01       	movw	r24, r28
    1c40:	42 96       	adiw	r24, 0x12	; 18
    1c42:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <ATM_u16GetRecNum>
    1c46:	7c 01       	movw	r14, r24
//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
	uint8_t u8_PANstate    = ATM_FALSE  ;
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
    1c48:	00 e0       	ldi	r16, 0x00	; 0
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	uint8_t pu8_arr[3];
	u16_recordNum = ATM_u16GetRecNum(pu8_arr);
	while(u16_RecCount < u16_recordNum)
    1c4c:	22 c0       	rjmp	.+68     	; 0x1c92 <ATM_panValidity+0x7c>
	{
		EEPROM_u8ReadNeededPartBlock(u16_RecCount,u8_PAN_BYTE_NUM,pu8_atmServerPAN,u8_PAN_MAX_SIZE) ;
    1c4e:	21 e1       	ldi	r18, 0x11	; 17
    1c50:	ae 01       	movw	r20, r28
    1c52:	4f 5f       	subi	r20, 0xFF	; 255
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	c8 01       	movw	r24, r16
    1c5a:	0e 94 67 03 	call	0x6ce	; 0x6ce <EEPROM_u8ReadNeededPartBlock>
		TERMINAL_display("\r\n");
    1c5e:	85 ee       	ldi	r24, 0xE5	; 229
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		TERMINAL_display(pu8_atmServerPAN);
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		TERMINAL_display("\r\n");
    1c6e:	85 ee       	ldi	r24, 0xE5	; 229
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
		if(strcmp(pu8_atmServerPAN,pu8_panWantedBuffer) == u8_EQUAL_STR)
    1c76:	b6 01       	movw	r22, r12
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strcmp>
    1c80:	89 2b       	or	r24, r25
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <ATM_panValidity+0x78>
		{
			u8_PANstate = ATM_TRUE;
			*pu16_wantedPanRecordnum = u16_RecCount ;
    1c84:	f5 01       	movw	r30, r10
    1c86:	11 83       	std	Z+1, r17	; 0x01
    1c88:	00 83       	st	Z, r16
		TERMINAL_display("\r\n");
		TERMINAL_display(pu8_atmServerPAN);
		TERMINAL_display("\r\n");
		if(strcmp(pu8_atmServerPAN,pu8_panWantedBuffer) == u8_EQUAL_STR)
		{
			u8_PANstate = ATM_TRUE;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
			*pu16_wantedPanRecordnum = u16_RecCount ;
			break;
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <ATM_panValidity+0x84>
		}
		u16_RecCount++ ;
    1c8e:	0f 5f       	subi	r16, 0xFF	; 255
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	uint8_t pu8_arr[3];
	u16_recordNum = ATM_u16GetRecNum(pu8_arr);
	while(u16_RecCount < u16_recordNum)
    1c92:	0e 15       	cp	r16, r14
    1c94:	1f 05       	cpc	r17, r15
    1c96:	d8 f2       	brcs	.-74     	; 0x1c4e <ATM_panValidity+0x38>
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
	uint8_t u8_PANstate    = ATM_FALSE  ;
    1c98:	80 e0       	ldi	r24, 0x00	; 0
		}
		u16_RecCount++ ;
	}
	
	return u8_PANstate ;
}
    1c9a:	64 96       	adiw	r28, 0x14	; 20
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	08 95       	ret

00001cbc <ATM_u32extractNumbers>:
	u16_recNum = ((uint16_t)(u8_highNipple << 8)|(uint16_t)(u8_lowNipple));
	return u16_recNum;
}

uint32_t ATM_u32extractNumbers(uint8_t* au8_buffer, uint8_t u8_buffSize)
{
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	7c 01       	movw	r14, r24
    1cdc:	d6 2e       	mov	r13, r22
	uint8_t u8_index = u8_INTIAL_VAL, u8_weight;
	uint32_t u32_number = u8_INTIAL_VAL;
	u8_weight = u8_buffSize - 1;
    1cde:	0f ef       	ldi	r16, 0xFF	; 255
    1ce0:	06 0f       	add	r16, r22
}

uint32_t ATM_u32extractNumbers(uint8_t* au8_buffer, uint8_t u8_buffSize)
{
	uint8_t u8_index = u8_INTIAL_VAL, u8_weight;
	uint32_t u32_number = u8_INTIAL_VAL;
    1ce2:	81 2c       	mov	r8, r1
    1ce4:	91 2c       	mov	r9, r1
    1ce6:	54 01       	movw	r10, r8
	return u16_recNum;
}

uint32_t ATM_u32extractNumbers(uint8_t* au8_buffer, uint8_t u8_buffSize)
{
	uint8_t u8_index = u8_INTIAL_VAL, u8_weight;
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
	uint32_t u32_number = u8_INTIAL_VAL;
	u8_weight = u8_buffSize - 1;
	while((u8_index < u8_buffSize) && (au8_buffer[u8_index]) != NULL_CHAR)
    1cea:	2c c0       	rjmp	.+88     	; 0x1d44 <ATM_u32extractNumbers+0x88>
	{
		u32_number += ( (au8_buffer[u8_index] - '0' ) * pow(10,u8_weight) );
    1cec:	d0 e0       	ldi	r29, 0x00	; 0
    1cee:	e0 97       	sbiw	r28, 0x30	; 48
    1cf0:	60 2f       	mov	r22, r16
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1cfc:	9b 01       	movw	r18, r22
    1cfe:	ac 01       	movw	r20, r24
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	80 e2       	ldi	r24, 0x20	; 32
    1d06:	91 e4       	ldi	r25, 0x41	; 65
    1d08:	0e 94 87 11 	call	0x230e	; 0x230e <pow>
    1d0c:	2b 01       	movw	r4, r22
    1d0e:	3c 01       	movw	r6, r24
    1d10:	be 01       	movw	r22, r28
    1d12:	dd 0f       	add	r29, r29
    1d14:	88 0b       	sbc	r24, r24
    1d16:	99 0b       	sbc	r25, r25
    1d18:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
    1d1c:	a3 01       	movw	r20, r6
    1d1e:	92 01       	movw	r18, r4
    1d20:	0e 94 1a 11 	call	0x2234	; 0x2234 <__mulsf3>
    1d24:	2b 01       	movw	r4, r22
    1d26:	3c 01       	movw	r6, r24
    1d28:	c5 01       	movw	r24, r10
    1d2a:	b4 01       	movw	r22, r8
    1d2c:	0e 94 34 10 	call	0x2068	; 0x2068 <__floatunsisf>
    1d30:	a3 01       	movw	r20, r6
    1d32:	92 01       	movw	r18, r4
    1d34:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
    1d38:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
    1d3c:	4b 01       	movw	r8, r22
    1d3e:	5c 01       	movw	r10, r24
		u8_weight--;
    1d40:	01 50       	subi	r16, 0x01	; 1
		u8_index++;
    1d42:	1f 5f       	subi	r17, 0xFF	; 255
uint32_t ATM_u32extractNumbers(uint8_t* au8_buffer, uint8_t u8_buffSize)
{
	uint8_t u8_index = u8_INTIAL_VAL, u8_weight;
	uint32_t u32_number = u8_INTIAL_VAL;
	u8_weight = u8_buffSize - 1;
	while((u8_index < u8_buffSize) && (au8_buffer[u8_index]) != NULL_CHAR)
    1d44:	1d 15       	cp	r17, r13
    1d46:	30 f4       	brcc	.+12     	; 0x1d54 <ATM_u32extractNumbers+0x98>
    1d48:	f7 01       	movw	r30, r14
    1d4a:	e1 0f       	add	r30, r17
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	c0 81       	ld	r28, Z
    1d50:	c1 11       	cpse	r28, r1
    1d52:	cc cf       	rjmp	.-104    	; 0x1cec <ATM_u32extractNumbers+0x30>
		u32_number += ( (au8_buffer[u8_index] - '0' ) * pow(10,u8_weight) );
		u8_weight--;
		u8_index++;
	}
	return u32_number;
}
    1d54:	c5 01       	movw	r24, r10
    1d56:	b4 01       	movw	r22, r8
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	9f 90       	pop	r9
    1d6c:	8f 90       	pop	r8
    1d6e:	7f 90       	pop	r7
    1d70:	6f 90       	pop	r6
    1d72:	5f 90       	pop	r5
    1d74:	4f 90       	pop	r4
    1d76:	08 95       	ret

00001d78 <ATM_voidUpdateBalance>:

void ATM_voidUpdateBalance(uint8_t* pu8_userBalance ,uint8_t* pu8_balanceWanted, uint16_t u16_recordNum)
{
    1d78:	8f 92       	push	r8
    1d7a:	9f 92       	push	r9
    1d7c:	af 92       	push	r10
    1d7e:	bf 92       	push	r11
    1d80:	ef 92       	push	r14
    1d82:	ff 92       	push	r15
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	29 97       	sbiw	r28, 0x09	; 9
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	8c 01       	movw	r16, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	7a 01       	movw	r14, r20
	uint32_t u32_balanceWanted, u32_userBalance, u32_updatedBalance;
	uint8_t pu8_updatedBalance[u8_BALANCE_MAX_SIZE];
	uint8_t u8_digit; 
	uint8_t u8_index   = u8_BALANCE_MAX_SIZE;
	u32_balanceWanted  = ATM_u32extractNumbers(pu8_balanceWanted, (u8_MAX_BALANCE_MAX_SIZE - 3));
    1da2:	64 e0       	ldi	r22, 0x04	; 4
    1da4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ATM_u32extractNumbers>
    1da8:	4b 01       	movw	r8, r22
    1daa:	5c 01       	movw	r10, r24
	u32_userBalance    = ATM_u32extractNumbers(pu8_userBalance, u8_BALANCE_MAX_SIZE - 1);
    1dac:	68 e0       	ldi	r22, 0x08	; 8
    1dae:	c8 01       	movw	r24, r16
    1db0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ATM_u32extractNumbers>
	pu8_updatedBalance[u8_index - 1] = NULL_CHAR;
    1db4:	19 86       	std	Y+9, r1	; 0x09
	u8_index--; 
	u32_updatedBalance = u32_userBalance - u32_balanceWanted;
    1db6:	9b 01       	movw	r18, r22
    1db8:	ac 01       	movw	r20, r24
    1dba:	28 19       	sub	r18, r8
    1dbc:	39 09       	sbc	r19, r9
    1dbe:	4a 09       	sbc	r20, r10
    1dc0:	5b 09       	sbc	r21, r11
	uint8_t u8_digit; 
	uint8_t u8_index   = u8_BALANCE_MAX_SIZE;
	u32_balanceWanted  = ATM_u32extractNumbers(pu8_balanceWanted, (u8_MAX_BALANCE_MAX_SIZE - 3));
	u32_userBalance    = ATM_u32extractNumbers(pu8_userBalance, u8_BALANCE_MAX_SIZE - 1);
	pu8_updatedBalance[u8_index - 1] = NULL_CHAR;
	u8_index--; 
    1dc2:	18 e0       	ldi	r17, 0x08	; 8
	u32_updatedBalance = u32_userBalance - u32_balanceWanted;
	do
	{
		if(u32_updatedBalance != NULL)
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	b1 f0       	breq	.+44     	; 0x1df6 <ATM_voidUpdateBalance+0x7e>
		{
			u8_digit = u32_updatedBalance % 10;
			u32_updatedBalance /= 10;
    1dca:	ca 01       	movw	r24, r20
    1dcc:	b9 01       	movw	r22, r18
    1dce:	2a e0       	ldi	r18, 0x0A	; 10
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	0e 94 bc 12 	call	0x2578	; 0x2578 <__udivmodsi4>
			pu8_updatedBalance[u8_index - 1] = u8_digit + '0';
    1dda:	e1 2f       	mov	r30, r17
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	31 97       	sbiw	r30, 0x01	; 1
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	8c 0f       	add	r24, r28
    1de6:	9d 1f       	adc	r25, r29
    1de8:	e8 0f       	add	r30, r24
    1dea:	f9 1f       	adc	r31, r25
    1dec:	80 e3       	ldi	r24, 0x30	; 48
    1dee:	86 0f       	add	r24, r22
    1df0:	80 83       	st	Z, r24
			u8_index--;
    1df2:	11 50       	subi	r17, 0x01	; 1
    1df4:	0c c0       	rjmp	.+24     	; 0x1e0e <ATM_voidUpdateBalance+0x96>
		}
		else
		{
			pu8_updatedBalance[u8_index - 1] = '0';
    1df6:	e1 2f       	mov	r30, r17
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	31 97       	sbiw	r30, 0x01	; 1
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	8c 0f       	add	r24, r28
    1e02:	9d 1f       	adc	r25, r29
    1e04:	e8 0f       	add	r30, r24
    1e06:	f9 1f       	adc	r31, r25
    1e08:	80 e3       	ldi	r24, 0x30	; 48
    1e0a:	80 83       	st	Z, r24
			u8_index--;
    1e0c:	11 50       	subi	r17, 0x01	; 1
		}
	}while(u8_index > 0); 
    1e0e:	11 11       	cpse	r17, r1
    1e10:	d9 cf       	rjmp	.-78     	; 0x1dc4 <ATM_voidUpdateBalance+0x4c>
	EEPROM_u8WriteNeededPartBlock(u16_recordNum, u8_BALANCE_BYTE_NUM, pu8_updatedBalance, u8_BALANCE_MAX_SIZE);
    1e12:	29 e0       	ldi	r18, 0x09	; 9
    1e14:	ae 01       	movw	r20, r28
    1e16:	4f 5f       	subi	r20, 0xFF	; 255
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	64 e1       	ldi	r22, 0x14	; 20
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	0e 94 1a 03 	call	0x634	; 0x634 <EEPROM_u8WriteNeededPartBlock>
	TERMINAL_display(pu8_updatedBalance);
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TERMINAL_display>
}
    1e2a:	29 96       	adiw	r28, 0x09	; 9
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	bf 90       	pop	r11
    1e44:	af 90       	pop	r10
    1e46:	9f 90       	pop	r9
    1e48:	8f 90       	pop	r8
    1e4a:	08 95       	ret

00001e4c <__subsf3>:
    1e4c:	50 58       	subi	r21, 0x80	; 128

00001e4e <__addsf3>:
    1e4e:	bb 27       	eor	r27, r27
    1e50:	aa 27       	eor	r26, r26
    1e52:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3x>
    1e56:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_round>
    1e5a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscA>
    1e5e:	38 f0       	brcs	.+14     	; 0x1e6e <__addsf3+0x20>
    1e60:	0e 94 81 10 	call	0x2102	; 0x2102 <__fp_pscB>
    1e64:	20 f0       	brcs	.+8      	; 0x1e6e <__addsf3+0x20>
    1e66:	39 f4       	brne	.+14     	; 0x1e76 <__addsf3+0x28>
    1e68:	9f 3f       	cpi	r25, 0xFF	; 255
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <__addsf3+0x24>
    1e6c:	26 f4       	brtc	.+8      	; 0x1e76 <__addsf3+0x28>
    1e6e:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>
    1e72:	0e f4       	brtc	.+2      	; 0x1e76 <__addsf3+0x28>
    1e74:	e0 95       	com	r30
    1e76:	e7 fb       	bst	r30, 7
    1e78:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>

00001e7c <__addsf3x>:
    1e7c:	e9 2f       	mov	r30, r25
    1e7e:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_split3>
    1e82:	58 f3       	brcs	.-42     	; 0x1e5a <__addsf3+0xc>
    1e84:	ba 17       	cp	r27, r26
    1e86:	62 07       	cpc	r22, r18
    1e88:	73 07       	cpc	r23, r19
    1e8a:	84 07       	cpc	r24, r20
    1e8c:	95 07       	cpc	r25, r21
    1e8e:	20 f0       	brcs	.+8      	; 0x1e98 <__addsf3x+0x1c>
    1e90:	79 f4       	brne	.+30     	; 0x1eb0 <__addsf3x+0x34>
    1e92:	a6 f5       	brtc	.+104    	; 0x1efc <__addsf3x+0x80>
    1e94:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__fp_zero>
    1e98:	0e f4       	brtc	.+2      	; 0x1e9c <__addsf3x+0x20>
    1e9a:	e0 95       	com	r30
    1e9c:	0b 2e       	mov	r0, r27
    1e9e:	ba 2f       	mov	r27, r26
    1ea0:	a0 2d       	mov	r26, r0
    1ea2:	0b 01       	movw	r0, r22
    1ea4:	b9 01       	movw	r22, r18
    1ea6:	90 01       	movw	r18, r0
    1ea8:	0c 01       	movw	r0, r24
    1eaa:	ca 01       	movw	r24, r20
    1eac:	a0 01       	movw	r20, r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	ff 27       	eor	r31, r31
    1eb2:	59 1b       	sub	r21, r25
    1eb4:	99 f0       	breq	.+38     	; 0x1edc <__addsf3x+0x60>
    1eb6:	59 3f       	cpi	r21, 0xF9	; 249
    1eb8:	50 f4       	brcc	.+20     	; 0x1ece <__addsf3x+0x52>
    1eba:	50 3e       	cpi	r21, 0xE0	; 224
    1ebc:	68 f1       	brcs	.+90     	; 0x1f18 <__addsf3x+0x9c>
    1ebe:	1a 16       	cp	r1, r26
    1ec0:	f0 40       	sbci	r31, 0x00	; 0
    1ec2:	a2 2f       	mov	r26, r18
    1ec4:	23 2f       	mov	r18, r19
    1ec6:	34 2f       	mov	r19, r20
    1ec8:	44 27       	eor	r20, r20
    1eca:	58 5f       	subi	r21, 0xF8	; 248
    1ecc:	f3 cf       	rjmp	.-26     	; 0x1eb4 <__addsf3x+0x38>
    1ece:	46 95       	lsr	r20
    1ed0:	37 95       	ror	r19
    1ed2:	27 95       	ror	r18
    1ed4:	a7 95       	ror	r26
    1ed6:	f0 40       	sbci	r31, 0x00	; 0
    1ed8:	53 95       	inc	r21
    1eda:	c9 f7       	brne	.-14     	; 0x1ece <__addsf3x+0x52>
    1edc:	7e f4       	brtc	.+30     	; 0x1efc <__addsf3x+0x80>
    1ede:	1f 16       	cp	r1, r31
    1ee0:	ba 0b       	sbc	r27, r26
    1ee2:	62 0b       	sbc	r22, r18
    1ee4:	73 0b       	sbc	r23, r19
    1ee6:	84 0b       	sbc	r24, r20
    1ee8:	ba f0       	brmi	.+46     	; 0x1f18 <__addsf3x+0x9c>
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	a1 f0       	breq	.+40     	; 0x1f16 <__addsf3x+0x9a>
    1eee:	ff 0f       	add	r31, r31
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	66 1f       	adc	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	c2 f7       	brpl	.-16     	; 0x1eea <__addsf3x+0x6e>
    1efa:	0e c0       	rjmp	.+28     	; 0x1f18 <__addsf3x+0x9c>
    1efc:	ba 0f       	add	r27, r26
    1efe:	62 1f       	adc	r22, r18
    1f00:	73 1f       	adc	r23, r19
    1f02:	84 1f       	adc	r24, r20
    1f04:	48 f4       	brcc	.+18     	; 0x1f18 <__addsf3x+0x9c>
    1f06:	87 95       	ror	r24
    1f08:	77 95       	ror	r23
    1f0a:	67 95       	ror	r22
    1f0c:	b7 95       	ror	r27
    1f0e:	f7 95       	ror	r31
    1f10:	9e 3f       	cpi	r25, 0xFE	; 254
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <__addsf3x+0x9a>
    1f14:	b0 cf       	rjmp	.-160    	; 0x1e76 <__addsf3+0x28>
    1f16:	93 95       	inc	r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <__addsf3x+0xa2>
    1f1c:	99 27       	eor	r25, r25
    1f1e:	ee 0f       	add	r30, r30
    1f20:	97 95       	ror	r25
    1f22:	87 95       	ror	r24
    1f24:	08 95       	ret

00001f26 <__divsf3>:
    1f26:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__divsf3x>
    1f2a:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_round>
    1f2e:	0e 94 81 10 	call	0x2102	; 0x2102 <__fp_pscB>
    1f32:	58 f0       	brcs	.+22     	; 0x1f4a <__divsf3+0x24>
    1f34:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscA>
    1f38:	40 f0       	brcs	.+16     	; 0x1f4a <__divsf3+0x24>
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <__divsf3+0x20>
    1f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__divsf3+0x24>
    1f40:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    1f44:	51 11       	cpse	r21, r1
    1f46:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_szero>
    1f4a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>

00001f4e <__divsf3x>:
    1f4e:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_split3>
    1f52:	68 f3       	brcs	.-38     	; 0x1f2e <__divsf3+0x8>

00001f54 <__divsf3_pse>:
    1f54:	99 23       	and	r25, r25
    1f56:	b1 f3       	breq	.-20     	; 0x1f44 <__divsf3+0x1e>
    1f58:	55 23       	and	r21, r21
    1f5a:	91 f3       	breq	.-28     	; 0x1f40 <__divsf3+0x1a>
    1f5c:	95 1b       	sub	r25, r21
    1f5e:	55 0b       	sbc	r21, r21
    1f60:	bb 27       	eor	r27, r27
    1f62:	aa 27       	eor	r26, r26
    1f64:	62 17       	cp	r22, r18
    1f66:	73 07       	cpc	r23, r19
    1f68:	84 07       	cpc	r24, r20
    1f6a:	38 f0       	brcs	.+14     	; 0x1f7a <__divsf3_pse+0x26>
    1f6c:	9f 5f       	subi	r25, 0xFF	; 255
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	22 0f       	add	r18, r18
    1f72:	33 1f       	adc	r19, r19
    1f74:	44 1f       	adc	r20, r20
    1f76:	aa 1f       	adc	r26, r26
    1f78:	a9 f3       	breq	.-22     	; 0x1f64 <__divsf3_pse+0x10>
    1f7a:	35 d0       	rcall	.+106    	; 0x1fe6 <__divsf3_pse+0x92>
    1f7c:	0e 2e       	mov	r0, r30
    1f7e:	3a f0       	brmi	.+14     	; 0x1f8e <__divsf3_pse+0x3a>
    1f80:	e0 e8       	ldi	r30, 0x80	; 128
    1f82:	32 d0       	rcall	.+100    	; 0x1fe8 <__divsf3_pse+0x94>
    1f84:	91 50       	subi	r25, 0x01	; 1
    1f86:	50 40       	sbci	r21, 0x00	; 0
    1f88:	e6 95       	lsr	r30
    1f8a:	00 1c       	adc	r0, r0
    1f8c:	ca f7       	brpl	.-14     	; 0x1f80 <__divsf3_pse+0x2c>
    1f8e:	2b d0       	rcall	.+86     	; 0x1fe6 <__divsf3_pse+0x92>
    1f90:	fe 2f       	mov	r31, r30
    1f92:	29 d0       	rcall	.+82     	; 0x1fe6 <__divsf3_pse+0x92>
    1f94:	66 0f       	add	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	26 17       	cp	r18, r22
    1f9e:	37 07       	cpc	r19, r23
    1fa0:	48 07       	cpc	r20, r24
    1fa2:	ab 07       	cpc	r26, r27
    1fa4:	b0 e8       	ldi	r27, 0x80	; 128
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__divsf3_pse+0x56>
    1fa8:	bb 0b       	sbc	r27, r27
    1faa:	80 2d       	mov	r24, r0
    1fac:	bf 01       	movw	r22, r30
    1fae:	ff 27       	eor	r31, r31
    1fb0:	93 58       	subi	r25, 0x83	; 131
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	3a f0       	brmi	.+14     	; 0x1fc4 <__divsf3_pse+0x70>
    1fb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb8:	51 05       	cpc	r21, r1
    1fba:	78 f0       	brcs	.+30     	; 0x1fda <__divsf3_pse+0x86>
    1fbc:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    1fc0:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_szero>
    1fc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc6:	e4 f3       	brlt	.-8      	; 0x1fc0 <__divsf3_pse+0x6c>
    1fc8:	98 3e       	cpi	r25, 0xE8	; 232
    1fca:	d4 f3       	brlt	.-12     	; 0x1fc0 <__divsf3_pse+0x6c>
    1fcc:	86 95       	lsr	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	b7 95       	ror	r27
    1fd4:	f7 95       	ror	r31
    1fd6:	9f 5f       	subi	r25, 0xFF	; 255
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <__divsf3_pse+0x78>
    1fda:	88 0f       	add	r24, r24
    1fdc:	91 1d       	adc	r25, r1
    1fde:	96 95       	lsr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	97 f9       	bld	r25, 7
    1fe4:	08 95       	ret
    1fe6:	e1 e0       	ldi	r30, 0x01	; 1
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	62 17       	cp	r22, r18
    1ff2:	73 07       	cpc	r23, r19
    1ff4:	84 07       	cpc	r24, r20
    1ff6:	ba 07       	cpc	r27, r26
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__divsf3_pse+0xae>
    1ffa:	62 1b       	sub	r22, r18
    1ffc:	73 0b       	sbc	r23, r19
    1ffe:	84 0b       	sbc	r24, r20
    2000:	ba 0b       	sbc	r27, r26
    2002:	ee 1f       	adc	r30, r30
    2004:	88 f7       	brcc	.-30     	; 0x1fe8 <__divsf3_pse+0x94>
    2006:	e0 95       	com	r30
    2008:	08 95       	ret

0000200a <__fixunssfsi>:
    200a:	0e 94 a1 10 	call	0x2142	; 0x2142 <__fp_splitA>
    200e:	88 f0       	brcs	.+34     	; 0x2032 <__fixunssfsi+0x28>
    2010:	9f 57       	subi	r25, 0x7F	; 127
    2012:	98 f0       	brcs	.+38     	; 0x203a <__fixunssfsi+0x30>
    2014:	b9 2f       	mov	r27, r25
    2016:	99 27       	eor	r25, r25
    2018:	b7 51       	subi	r27, 0x17	; 23
    201a:	b0 f0       	brcs	.+44     	; 0x2048 <__fixunssfsi+0x3e>
    201c:	e1 f0       	breq	.+56     	; 0x2056 <__fixunssfsi+0x4c>
    201e:	66 0f       	add	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	1a f0       	brmi	.+6      	; 0x202e <__fixunssfsi+0x24>
    2028:	ba 95       	dec	r27
    202a:	c9 f7       	brne	.-14     	; 0x201e <__fixunssfsi+0x14>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <__fixunssfsi+0x4c>
    202e:	b1 30       	cpi	r27, 0x01	; 1
    2030:	91 f0       	breq	.+36     	; 0x2056 <__fixunssfsi+0x4c>
    2032:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_zero>
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	08 95       	ret
    203a:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__fp_zero>
    203e:	67 2f       	mov	r22, r23
    2040:	78 2f       	mov	r23, r24
    2042:	88 27       	eor	r24, r24
    2044:	b8 5f       	subi	r27, 0xF8	; 248
    2046:	39 f0       	breq	.+14     	; 0x2056 <__fixunssfsi+0x4c>
    2048:	b9 3f       	cpi	r27, 0xF9	; 249
    204a:	cc f3       	brlt	.-14     	; 0x203e <__fixunssfsi+0x34>
    204c:	86 95       	lsr	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	b3 95       	inc	r27
    2054:	d9 f7       	brne	.-10     	; 0x204c <__fixunssfsi+0x42>
    2056:	3e f4       	brtc	.+14     	; 0x2066 <__fixunssfsi+0x5c>
    2058:	90 95       	com	r25
    205a:	80 95       	com	r24
    205c:	70 95       	com	r23
    205e:	61 95       	neg	r22
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	08 95       	ret

00002068 <__floatunsisf>:
    2068:	e8 94       	clt
    206a:	09 c0       	rjmp	.+18     	; 0x207e <__floatsisf+0x12>

0000206c <__floatsisf>:
    206c:	97 fb       	bst	r25, 7
    206e:	3e f4       	brtc	.+14     	; 0x207e <__floatsisf+0x12>
    2070:	90 95       	com	r25
    2072:	80 95       	com	r24
    2074:	70 95       	com	r23
    2076:	61 95       	neg	r22
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	8f 4f       	sbci	r24, 0xFF	; 255
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	99 23       	and	r25, r25
    2080:	a9 f0       	breq	.+42     	; 0x20ac <__floatsisf+0x40>
    2082:	f9 2f       	mov	r31, r25
    2084:	96 e9       	ldi	r25, 0x96	; 150
    2086:	bb 27       	eor	r27, r27
    2088:	93 95       	inc	r25
    208a:	f6 95       	lsr	r31
    208c:	87 95       	ror	r24
    208e:	77 95       	ror	r23
    2090:	67 95       	ror	r22
    2092:	b7 95       	ror	r27
    2094:	f1 11       	cpse	r31, r1
    2096:	f8 cf       	rjmp	.-16     	; 0x2088 <__floatsisf+0x1c>
    2098:	fa f4       	brpl	.+62     	; 0x20d8 <__floatsisf+0x6c>
    209a:	bb 0f       	add	r27, r27
    209c:	11 f4       	brne	.+4      	; 0x20a2 <__floatsisf+0x36>
    209e:	60 ff       	sbrs	r22, 0
    20a0:	1b c0       	rjmp	.+54     	; 0x20d8 <__floatsisf+0x6c>
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	16 c0       	rjmp	.+44     	; 0x20d8 <__floatsisf+0x6c>
    20ac:	88 23       	and	r24, r24
    20ae:	11 f0       	breq	.+4      	; 0x20b4 <__floatsisf+0x48>
    20b0:	96 e9       	ldi	r25, 0x96	; 150
    20b2:	11 c0       	rjmp	.+34     	; 0x20d6 <__floatsisf+0x6a>
    20b4:	77 23       	and	r23, r23
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <__floatsisf+0x54>
    20b8:	9e e8       	ldi	r25, 0x8E	; 142
    20ba:	87 2f       	mov	r24, r23
    20bc:	76 2f       	mov	r23, r22
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <__floatsisf+0x5e>
    20c0:	66 23       	and	r22, r22
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <__floatsisf+0x74>
    20c4:	96 e8       	ldi	r25, 0x86	; 134
    20c6:	86 2f       	mov	r24, r22
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	2a f0       	brmi	.+10     	; 0x20d8 <__floatsisf+0x6c>
    20ce:	9a 95       	dec	r25
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	88 1f       	adc	r24, r24
    20d6:	da f7       	brpl	.-10     	; 0x20ce <__floatsisf+0x62>
    20d8:	88 0f       	add	r24, r24
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <__fp_inf>:
    20e2:	97 f9       	bld	r25, 7
    20e4:	9f 67       	ori	r25, 0x7F	; 127
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	08 95       	ret

000020ee <__fp_nan>:
    20ee:	9f ef       	ldi	r25, 0xFF	; 255
    20f0:	80 ec       	ldi	r24, 0xC0	; 192
    20f2:	08 95       	ret

000020f4 <__fp_pscA>:
    20f4:	00 24       	eor	r0, r0
    20f6:	0a 94       	dec	r0
    20f8:	16 16       	cp	r1, r22
    20fa:	17 06       	cpc	r1, r23
    20fc:	18 06       	cpc	r1, r24
    20fe:	09 06       	cpc	r0, r25
    2100:	08 95       	ret

00002102 <__fp_pscB>:
    2102:	00 24       	eor	r0, r0
    2104:	0a 94       	dec	r0
    2106:	12 16       	cp	r1, r18
    2108:	13 06       	cpc	r1, r19
    210a:	14 06       	cpc	r1, r20
    210c:	05 06       	cpc	r0, r21
    210e:	08 95       	ret

00002110 <__fp_round>:
    2110:	09 2e       	mov	r0, r25
    2112:	03 94       	inc	r0
    2114:	00 0c       	add	r0, r0
    2116:	11 f4       	brne	.+4      	; 0x211c <__fp_round+0xc>
    2118:	88 23       	and	r24, r24
    211a:	52 f0       	brmi	.+20     	; 0x2130 <__fp_round+0x20>
    211c:	bb 0f       	add	r27, r27
    211e:	40 f4       	brcc	.+16     	; 0x2130 <__fp_round+0x20>
    2120:	bf 2b       	or	r27, r31
    2122:	11 f4       	brne	.+4      	; 0x2128 <__fp_round+0x18>
    2124:	60 ff       	sbrs	r22, 0
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <__fp_round+0x20>
    2128:	6f 5f       	subi	r22, 0xFF	; 255
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	8f 4f       	sbci	r24, 0xFF	; 255
    212e:	9f 4f       	sbci	r25, 0xFF	; 255
    2130:	08 95       	ret

00002132 <__fp_split3>:
    2132:	57 fd       	sbrc	r21, 7
    2134:	90 58       	subi	r25, 0x80	; 128
    2136:	44 0f       	add	r20, r20
    2138:	55 1f       	adc	r21, r21
    213a:	59 f0       	breq	.+22     	; 0x2152 <__fp_splitA+0x10>
    213c:	5f 3f       	cpi	r21, 0xFF	; 255
    213e:	71 f0       	breq	.+28     	; 0x215c <__fp_splitA+0x1a>
    2140:	47 95       	ror	r20

00002142 <__fp_splitA>:
    2142:	88 0f       	add	r24, r24
    2144:	97 fb       	bst	r25, 7
    2146:	99 1f       	adc	r25, r25
    2148:	61 f0       	breq	.+24     	; 0x2162 <__fp_splitA+0x20>
    214a:	9f 3f       	cpi	r25, 0xFF	; 255
    214c:	79 f0       	breq	.+30     	; 0x216c <__fp_splitA+0x2a>
    214e:	87 95       	ror	r24
    2150:	08 95       	ret
    2152:	12 16       	cp	r1, r18
    2154:	13 06       	cpc	r1, r19
    2156:	14 06       	cpc	r1, r20
    2158:	55 1f       	adc	r21, r21
    215a:	f2 cf       	rjmp	.-28     	; 0x2140 <__fp_split3+0xe>
    215c:	46 95       	lsr	r20
    215e:	f1 df       	rcall	.-30     	; 0x2142 <__fp_splitA>
    2160:	08 c0       	rjmp	.+16     	; 0x2172 <__fp_splitA+0x30>
    2162:	16 16       	cp	r1, r22
    2164:	17 06       	cpc	r1, r23
    2166:	18 06       	cpc	r1, r24
    2168:	99 1f       	adc	r25, r25
    216a:	f1 cf       	rjmp	.-30     	; 0x214e <__fp_splitA+0xc>
    216c:	86 95       	lsr	r24
    216e:	71 05       	cpc	r23, r1
    2170:	61 05       	cpc	r22, r1
    2172:	08 94       	sec
    2174:	08 95       	ret

00002176 <__fp_zero>:
    2176:	e8 94       	clt

00002178 <__fp_szero>:
    2178:	bb 27       	eor	r27, r27
    217a:	66 27       	eor	r22, r22
    217c:	77 27       	eor	r23, r23
    217e:	cb 01       	movw	r24, r22
    2180:	97 f9       	bld	r25, 7
    2182:	08 95       	ret

00002184 <log10>:
    2184:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <log>
    2188:	29 ed       	ldi	r18, 0xD9	; 217
    218a:	3b e5       	ldi	r19, 0x5B	; 91
    218c:	4e ed       	ldi	r20, 0xDE	; 222
    218e:	5e e3       	ldi	r21, 0x3E	; 62
    2190:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__mulsf3>
    2194:	16 f0       	brts	.+4      	; 0x219a <log10+0x16>
    2196:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_mpack>
    219a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>
    219e:	68 94       	set
    21a0:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>

000021a4 <log>:
    21a4:	0e 94 a1 10 	call	0x2142	; 0x2142 <__fp_splitA>
    21a8:	a8 f3       	brcs	.-22     	; 0x2194 <log10+0x10>
    21aa:	99 23       	and	r25, r25
    21ac:	c1 f3       	breq	.-16     	; 0x219e <log10+0x1a>
    21ae:	ae f3       	brts	.-22     	; 0x219a <log10+0x16>
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	1f 93       	push	r17
    21b6:	0f 93       	push	r16
    21b8:	ff 92       	push	r15
    21ba:	c9 2f       	mov	r28, r25
    21bc:	dd 27       	eor	r29, r29
    21be:	88 23       	and	r24, r24
    21c0:	2a f0       	brmi	.+10     	; 0x21cc <log+0x28>
    21c2:	21 97       	sbiw	r28, 0x01	; 1
    21c4:	66 0f       	add	r22, r22
    21c6:	77 1f       	adc	r23, r23
    21c8:	88 1f       	adc	r24, r24
    21ca:	da f7       	brpl	.-10     	; 0x21c2 <log+0x1e>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f eb       	ldi	r21, 0xBF	; 191
    21d4:	9f e3       	ldi	r25, 0x3F	; 63
    21d6:	88 39       	cpi	r24, 0x98	; 152
    21d8:	20 f0       	brcs	.+8      	; 0x21e2 <log+0x3e>
    21da:	80 3e       	cpi	r24, 0xE0	; 224
    21dc:	38 f0       	brcs	.+14     	; 0x21ec <log+0x48>
    21de:	21 96       	adiw	r28, 0x01	; 1
    21e0:	8f 77       	andi	r24, 0x7F	; 127
    21e2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
    21e6:	e4 e5       	ldi	r30, 0x54	; 84
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	04 c0       	rjmp	.+8      	; 0x21f4 <log+0x50>
    21ec:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
    21f0:	e1 e8       	ldi	r30, 0x81	; 129
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	0e 94 1f 12 	call	0x243e	; 0x243e <__fp_powser>
    21f8:	8b 01       	movw	r16, r22
    21fa:	be 01       	movw	r22, r28
    21fc:	ec 01       	movw	r28, r24
    21fe:	fb 2e       	mov	r15, r27
    2200:	6f 57       	subi	r22, 0x7F	; 127
    2202:	71 09       	sbc	r23, r1
    2204:	75 95       	asr	r23
    2206:	77 1f       	adc	r23, r23
    2208:	88 0b       	sbc	r24, r24
    220a:	99 0b       	sbc	r25, r25
    220c:	0e 94 36 10 	call	0x206c	; 0x206c <__floatsisf>
    2210:	28 e1       	ldi	r18, 0x18	; 24
    2212:	32 e7       	ldi	r19, 0x72	; 114
    2214:	41 e3       	ldi	r20, 0x31	; 49
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3x>
    221c:	af 2d       	mov	r26, r15
    221e:	98 01       	movw	r18, r16
    2220:	ae 01       	movw	r20, r28
    2222:	ff 90       	pop	r15
    2224:	0f 91       	pop	r16
    2226:	1f 91       	pop	r17
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3x>
    2230:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_round>

00002234 <__mulsf3>:
    2234:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3x>
    2238:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_round>
    223c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscA>
    2240:	38 f0       	brcs	.+14     	; 0x2250 <__mulsf3+0x1c>
    2242:	0e 94 81 10 	call	0x2102	; 0x2102 <__fp_pscB>
    2246:	20 f0       	brcs	.+8      	; 0x2250 <__mulsf3+0x1c>
    2248:	95 23       	and	r25, r21
    224a:	11 f0       	breq	.+4      	; 0x2250 <__mulsf3+0x1c>
    224c:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    2250:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>
    2254:	11 24       	eor	r1, r1
    2256:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_szero>

0000225a <__mulsf3x>:
    225a:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_split3>
    225e:	70 f3       	brcs	.-36     	; 0x223c <__mulsf3+0x8>

00002260 <__mulsf3_pse>:
    2260:	95 9f       	mul	r25, r21
    2262:	c1 f3       	breq	.-16     	; 0x2254 <__mulsf3+0x20>
    2264:	95 0f       	add	r25, r21
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	55 1f       	adc	r21, r21
    226a:	62 9f       	mul	r22, r18
    226c:	f0 01       	movw	r30, r0
    226e:	72 9f       	mul	r23, r18
    2270:	bb 27       	eor	r27, r27
    2272:	f0 0d       	add	r31, r0
    2274:	b1 1d       	adc	r27, r1
    2276:	63 9f       	mul	r22, r19
    2278:	aa 27       	eor	r26, r26
    227a:	f0 0d       	add	r31, r0
    227c:	b1 1d       	adc	r27, r1
    227e:	aa 1f       	adc	r26, r26
    2280:	64 9f       	mul	r22, r20
    2282:	66 27       	eor	r22, r22
    2284:	b0 0d       	add	r27, r0
    2286:	a1 1d       	adc	r26, r1
    2288:	66 1f       	adc	r22, r22
    228a:	82 9f       	mul	r24, r18
    228c:	22 27       	eor	r18, r18
    228e:	b0 0d       	add	r27, r0
    2290:	a1 1d       	adc	r26, r1
    2292:	62 1f       	adc	r22, r18
    2294:	73 9f       	mul	r23, r19
    2296:	b0 0d       	add	r27, r0
    2298:	a1 1d       	adc	r26, r1
    229a:	62 1f       	adc	r22, r18
    229c:	83 9f       	mul	r24, r19
    229e:	a0 0d       	add	r26, r0
    22a0:	61 1d       	adc	r22, r1
    22a2:	22 1f       	adc	r18, r18
    22a4:	74 9f       	mul	r23, r20
    22a6:	33 27       	eor	r19, r19
    22a8:	a0 0d       	add	r26, r0
    22aa:	61 1d       	adc	r22, r1
    22ac:	23 1f       	adc	r18, r19
    22ae:	84 9f       	mul	r24, r20
    22b0:	60 0d       	add	r22, r0
    22b2:	21 1d       	adc	r18, r1
    22b4:	82 2f       	mov	r24, r18
    22b6:	76 2f       	mov	r23, r22
    22b8:	6a 2f       	mov	r22, r26
    22ba:	11 24       	eor	r1, r1
    22bc:	9f 57       	subi	r25, 0x7F	; 127
    22be:	50 40       	sbci	r21, 0x00	; 0
    22c0:	9a f0       	brmi	.+38     	; 0x22e8 <__mulsf3_pse+0x88>
    22c2:	f1 f0       	breq	.+60     	; 0x2300 <__mulsf3_pse+0xa0>
    22c4:	88 23       	and	r24, r24
    22c6:	4a f0       	brmi	.+18     	; 0x22da <__mulsf3_pse+0x7a>
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	bb 1f       	adc	r27, r27
    22ce:	66 1f       	adc	r22, r22
    22d0:	77 1f       	adc	r23, r23
    22d2:	88 1f       	adc	r24, r24
    22d4:	91 50       	subi	r25, 0x01	; 1
    22d6:	50 40       	sbci	r21, 0x00	; 0
    22d8:	a9 f7       	brne	.-22     	; 0x22c4 <__mulsf3_pse+0x64>
    22da:	9e 3f       	cpi	r25, 0xFE	; 254
    22dc:	51 05       	cpc	r21, r1
    22de:	80 f0       	brcs	.+32     	; 0x2300 <__mulsf3_pse+0xa0>
    22e0:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    22e4:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_szero>
    22e8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ea:	e4 f3       	brlt	.-8      	; 0x22e4 <__mulsf3_pse+0x84>
    22ec:	98 3e       	cpi	r25, 0xE8	; 232
    22ee:	d4 f3       	brlt	.-12     	; 0x22e4 <__mulsf3_pse+0x84>
    22f0:	86 95       	lsr	r24
    22f2:	77 95       	ror	r23
    22f4:	67 95       	ror	r22
    22f6:	b7 95       	ror	r27
    22f8:	f7 95       	ror	r31
    22fa:	e7 95       	ror	r30
    22fc:	9f 5f       	subi	r25, 0xFF	; 255
    22fe:	c1 f7       	brne	.-16     	; 0x22f0 <__mulsf3_pse+0x90>
    2300:	fe 2b       	or	r31, r30
    2302:	88 0f       	add	r24, r24
    2304:	91 1d       	adc	r25, r1
    2306:	96 95       	lsr	r25
    2308:	87 95       	ror	r24
    230a:	97 f9       	bld	r25, 7
    230c:	08 95       	ret

0000230e <pow>:
    230e:	fa 01       	movw	r30, r20
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	30 96       	adiw	r30, 0x00	; 0
    2316:	21 05       	cpc	r18, r1
    2318:	31 05       	cpc	r19, r1
    231a:	a1 f1       	breq	.+104    	; 0x2384 <pow+0x76>
    231c:	61 15       	cp	r22, r1
    231e:	71 05       	cpc	r23, r1
    2320:	61 f4       	brne	.+24     	; 0x233a <pow+0x2c>
    2322:	80 38       	cpi	r24, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	9b 07       	cpc	r25, r27
    2328:	49 f1       	breq	.+82     	; 0x237c <pow+0x6e>
    232a:	68 94       	set
    232c:	90 38       	cpi	r25, 0x80	; 128
    232e:	81 05       	cpc	r24, r1
    2330:	61 f0       	breq	.+24     	; 0x234a <pow+0x3c>
    2332:	80 38       	cpi	r24, 0x80	; 128
    2334:	bf ef       	ldi	r27, 0xFF	; 255
    2336:	9b 07       	cpc	r25, r27
    2338:	41 f0       	breq	.+16     	; 0x234a <pow+0x3c>
    233a:	99 23       	and	r25, r25
    233c:	4a f5       	brpl	.+82     	; 0x2390 <pow+0x82>
    233e:	ff 3f       	cpi	r31, 0xFF	; 255
    2340:	e1 05       	cpc	r30, r1
    2342:	31 05       	cpc	r19, r1
    2344:	21 05       	cpc	r18, r1
    2346:	19 f1       	breq	.+70     	; 0x238e <pow+0x80>
    2348:	e8 94       	clt
    234a:	08 94       	sec
    234c:	e7 95       	ror	r30
    234e:	d9 01       	movw	r26, r18
    2350:	aa 23       	and	r26, r26
    2352:	29 f4       	brne	.+10     	; 0x235e <pow+0x50>
    2354:	ab 2f       	mov	r26, r27
    2356:	be 2f       	mov	r27, r30
    2358:	f8 5f       	subi	r31, 0xF8	; 248
    235a:	d0 f3       	brcs	.-12     	; 0x2350 <pow+0x42>
    235c:	10 c0       	rjmp	.+32     	; 0x237e <pow+0x70>
    235e:	ff 5f       	subi	r31, 0xFF	; 255
    2360:	70 f4       	brcc	.+28     	; 0x237e <pow+0x70>
    2362:	a6 95       	lsr	r26
    2364:	e0 f7       	brcc	.-8      	; 0x235e <pow+0x50>
    2366:	f7 39       	cpi	r31, 0x97	; 151
    2368:	50 f0       	brcs	.+20     	; 0x237e <pow+0x70>
    236a:	19 f0       	breq	.+6      	; 0x2372 <pow+0x64>
    236c:	ff 3a       	cpi	r31, 0xAF	; 175
    236e:	38 f4       	brcc	.+14     	; 0x237e <pow+0x70>
    2370:	9f 77       	andi	r25, 0x7F	; 127
    2372:	9f 93       	push	r25
    2374:	0d d0       	rcall	.+26     	; 0x2390 <pow+0x82>
    2376:	0f 90       	pop	r0
    2378:	07 fc       	sbrc	r0, 7
    237a:	90 58       	subi	r25, 0x80	; 128
    237c:	08 95       	ret
    237e:	46 f0       	brts	.+16     	; 0x2390 <pow+0x82>
    2380:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	80 e8       	ldi	r24, 0x80	; 128
    238a:	9f e3       	ldi	r25, 0x3F	; 63
    238c:	08 95       	ret
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	9f 77       	andi	r25, 0x7F	; 127
    2392:	5f 93       	push	r21
    2394:	4f 93       	push	r20
    2396:	3f 93       	push	r19
    2398:	2f 93       	push	r18
    239a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <log>
    239e:	2f 91       	pop	r18
    23a0:	3f 91       	pop	r19
    23a2:	4f 91       	pop	r20
    23a4:	5f 91       	pop	r21
    23a6:	0e 94 1a 11 	call	0x2234	; 0x2234 <__mulsf3>
    23aa:	0c 94 df 11 	jmp	0x23be	; 0x23be <exp>
    23ae:	29 f4       	brne	.+10     	; 0x23ba <pow+0xac>
    23b0:	16 f0       	brts	.+4      	; 0x23b6 <pow+0xa8>
    23b2:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    23b6:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__fp_zero>
    23ba:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__fp_nan>

000023be <exp>:
    23be:	0e 94 a1 10 	call	0x2142	; 0x2142 <__fp_splitA>
    23c2:	a8 f3       	brcs	.-22     	; 0x23ae <pow+0xa0>
    23c4:	96 38       	cpi	r25, 0x86	; 134
    23c6:	a0 f7       	brcc	.-24     	; 0x23b0 <pow+0xa2>
    23c8:	07 f8       	bld	r0, 7
    23ca:	0f 92       	push	r0
    23cc:	e8 94       	clt
    23ce:	2b e3       	ldi	r18, 0x3B	; 59
    23d0:	3a ea       	ldi	r19, 0xAA	; 170
    23d2:	48 eb       	ldi	r20, 0xB8	; 184
    23d4:	5f e7       	ldi	r21, 0x7F	; 127
    23d6:	0e 94 30 11 	call	0x2260	; 0x2260 <__mulsf3_pse>
    23da:	0f 92       	push	r0
    23dc:	0f 92       	push	r0
    23de:	0f 92       	push	r0
    23e0:	4d b7       	in	r20, 0x3d	; 61
    23e2:	5e b7       	in	r21, 0x3e	; 62
    23e4:	0f 92       	push	r0
    23e6:	0e 94 88 12 	call	0x2510	; 0x2510 <modf>
    23ea:	ee ea       	ldi	r30, 0xAE	; 174
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	0e 94 1f 12 	call	0x243e	; 0x243e <__fp_powser>
    23f2:	4f 91       	pop	r20
    23f4:	5f 91       	pop	r21
    23f6:	ef 91       	pop	r30
    23f8:	ff 91       	pop	r31
    23fa:	e5 95       	asr	r30
    23fc:	ee 1f       	adc	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	49 f0       	breq	.+18     	; 0x2414 <exp+0x56>
    2402:	fe 57       	subi	r31, 0x7E	; 126
    2404:	e0 68       	ori	r30, 0x80	; 128
    2406:	44 27       	eor	r20, r20
    2408:	ee 0f       	add	r30, r30
    240a:	44 1f       	adc	r20, r20
    240c:	fa 95       	dec	r31
    240e:	e1 f7       	brne	.-8      	; 0x2408 <exp+0x4a>
    2410:	41 95       	neg	r20
    2412:	55 0b       	sbc	r21, r21
    2414:	0e 94 52 12 	call	0x24a4	; 0x24a4 <ldexp>
    2418:	0f 90       	pop	r0
    241a:	07 fe       	sbrs	r0, 7
    241c:	0c 94 46 12 	jmp	0x248c	; 0x248c <inverse>
    2420:	08 95       	ret

00002422 <__fp_mpack>:
    2422:	9f 3f       	cpi	r25, 0xFF	; 255
    2424:	31 f0       	breq	.+12     	; 0x2432 <__fp_mpack_finite+0xc>

00002426 <__fp_mpack_finite>:
    2426:	91 50       	subi	r25, 0x01	; 1
    2428:	20 f4       	brcc	.+8      	; 0x2432 <__fp_mpack_finite+0xc>
    242a:	87 95       	ror	r24
    242c:	77 95       	ror	r23
    242e:	67 95       	ror	r22
    2430:	b7 95       	ror	r27
    2432:	88 0f       	add	r24, r24
    2434:	91 1d       	adc	r25, r1
    2436:	96 95       	lsr	r25
    2438:	87 95       	ror	r24
    243a:	97 f9       	bld	r25, 7
    243c:	08 95       	ret

0000243e <__fp_powser>:
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	1f 93       	push	r17
    2444:	0f 93       	push	r16
    2446:	ff 92       	push	r15
    2448:	ef 92       	push	r14
    244a:	df 92       	push	r13
    244c:	7b 01       	movw	r14, r22
    244e:	8c 01       	movw	r16, r24
    2450:	68 94       	set
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <__fp_powser+0x22>
    2454:	da 2e       	mov	r13, r26
    2456:	ef 01       	movw	r28, r30
    2458:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3x>
    245c:	fe 01       	movw	r30, r28
    245e:	e8 94       	clt
    2460:	a5 91       	lpm	r26, Z+
    2462:	25 91       	lpm	r18, Z+
    2464:	35 91       	lpm	r19, Z+
    2466:	45 91       	lpm	r20, Z+
    2468:	55 91       	lpm	r21, Z+
    246a:	a6 f3       	brts	.-24     	; 0x2454 <__fp_powser+0x16>
    246c:	ef 01       	movw	r28, r30
    246e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3x>
    2472:	fe 01       	movw	r30, r28
    2474:	97 01       	movw	r18, r14
    2476:	a8 01       	movw	r20, r16
    2478:	da 94       	dec	r13
    247a:	69 f7       	brne	.-38     	; 0x2456 <__fp_powser+0x18>
    247c:	df 90       	pop	r13
    247e:	ef 90       	pop	r14
    2480:	ff 90       	pop	r15
    2482:	0f 91       	pop	r16
    2484:	1f 91       	pop	r17
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <inverse>:
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	80 e8       	ldi	r24, 0x80	; 128
    2496:	9f e3       	ldi	r25, 0x3F	; 63
    2498:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__divsf3>
    249c:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_inf>
    24a0:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_mpack>

000024a4 <ldexp>:
    24a4:	0e 94 a1 10 	call	0x2142	; 0x2142 <__fp_splitA>
    24a8:	d8 f3       	brcs	.-10     	; 0x24a0 <inverse+0x14>
    24aa:	99 23       	and	r25, r25
    24ac:	c9 f3       	breq	.-14     	; 0x24a0 <inverse+0x14>
    24ae:	94 0f       	add	r25, r20
    24b0:	51 1d       	adc	r21, r1
    24b2:	a3 f3       	brvs	.-24     	; 0x249c <inverse+0x10>
    24b4:	91 50       	subi	r25, 0x01	; 1
    24b6:	50 40       	sbci	r21, 0x00	; 0
    24b8:	94 f0       	brlt	.+36     	; 0x24de <ldexp+0x3a>
    24ba:	59 f0       	breq	.+22     	; 0x24d2 <ldexp+0x2e>
    24bc:	88 23       	and	r24, r24
    24be:	32 f0       	brmi	.+12     	; 0x24cc <ldexp+0x28>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	88 1f       	adc	r24, r24
    24c6:	91 50       	subi	r25, 0x01	; 1
    24c8:	50 40       	sbci	r21, 0x00	; 0
    24ca:	c1 f7       	brne	.-16     	; 0x24bc <ldexp+0x18>
    24cc:	9e 3f       	cpi	r25, 0xFE	; 254
    24ce:	51 05       	cpc	r21, r1
    24d0:	2c f7       	brge	.-54     	; 0x249c <inverse+0x10>
    24d2:	88 0f       	add	r24, r24
    24d4:	91 1d       	adc	r25, r1
    24d6:	96 95       	lsr	r25
    24d8:	87 95       	ror	r24
    24da:	97 f9       	bld	r25, 7
    24dc:	08 95       	ret
    24de:	5f 3f       	cpi	r21, 0xFF	; 255
    24e0:	ac f0       	brlt	.+42     	; 0x250c <ldexp+0x68>
    24e2:	98 3e       	cpi	r25, 0xE8	; 232
    24e4:	9c f0       	brlt	.+38     	; 0x250c <ldexp+0x68>
    24e6:	bb 27       	eor	r27, r27
    24e8:	86 95       	lsr	r24
    24ea:	77 95       	ror	r23
    24ec:	67 95       	ror	r22
    24ee:	b7 95       	ror	r27
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <ldexp+0x50>
    24f2:	b1 60       	ori	r27, 0x01	; 1
    24f4:	93 95       	inc	r25
    24f6:	c1 f7       	brne	.-16     	; 0x24e8 <ldexp+0x44>
    24f8:	bb 0f       	add	r27, r27
    24fa:	58 f7       	brcc	.-42     	; 0x24d2 <ldexp+0x2e>
    24fc:	11 f4       	brne	.+4      	; 0x2502 <ldexp+0x5e>
    24fe:	60 ff       	sbrs	r22, 0
    2500:	e8 cf       	rjmp	.-48     	; 0x24d2 <ldexp+0x2e>
    2502:	6f 5f       	subi	r22, 0xFF	; 255
    2504:	7f 4f       	sbci	r23, 0xFF	; 255
    2506:	8f 4f       	sbci	r24, 0xFF	; 255
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	e3 cf       	rjmp	.-58     	; 0x24d2 <ldexp+0x2e>
    250c:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_szero>

00002510 <modf>:
    2510:	fa 01       	movw	r30, r20
    2512:	dc 01       	movw	r26, r24
    2514:	aa 0f       	add	r26, r26
    2516:	bb 1f       	adc	r27, r27
    2518:	9b 01       	movw	r18, r22
    251a:	ac 01       	movw	r20, r24
    251c:	bf 57       	subi	r27, 0x7F	; 127
    251e:	28 f4       	brcc	.+10     	; 0x252a <modf+0x1a>
    2520:	22 27       	eor	r18, r18
    2522:	33 27       	eor	r19, r19
    2524:	44 27       	eor	r20, r20
    2526:	50 78       	andi	r21, 0x80	; 128
    2528:	20 c0       	rjmp	.+64     	; 0x256a <modf+0x5a>
    252a:	b7 51       	subi	r27, 0x17	; 23
    252c:	90 f4       	brcc	.+36     	; 0x2552 <modf+0x42>
    252e:	ab 2f       	mov	r26, r27
    2530:	00 24       	eor	r0, r0
    2532:	46 95       	lsr	r20
    2534:	37 95       	ror	r19
    2536:	27 95       	ror	r18
    2538:	01 1c       	adc	r0, r1
    253a:	a3 95       	inc	r26
    253c:	d2 f3       	brmi	.-12     	; 0x2532 <modf+0x22>
    253e:	00 20       	and	r0, r0
    2540:	71 f0       	breq	.+28     	; 0x255e <modf+0x4e>
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	44 1f       	adc	r20, r20
    2548:	b3 95       	inc	r27
    254a:	da f3       	brmi	.-10     	; 0x2542 <modf+0x32>
    254c:	0e d0       	rcall	.+28     	; 0x256a <modf+0x5a>
    254e:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__subsf3>
    2552:	61 30       	cpi	r22, 0x01	; 1
    2554:	71 05       	cpc	r23, r1
    2556:	a0 e8       	ldi	r26, 0x80	; 128
    2558:	8a 07       	cpc	r24, r26
    255a:	b9 46       	sbci	r27, 0x69	; 105
    255c:	30 f4       	brcc	.+12     	; 0x256a <modf+0x5a>
    255e:	9b 01       	movw	r18, r22
    2560:	ac 01       	movw	r20, r24
    2562:	66 27       	eor	r22, r22
    2564:	77 27       	eor	r23, r23
    2566:	88 27       	eor	r24, r24
    2568:	90 78       	andi	r25, 0x80	; 128
    256a:	30 96       	adiw	r30, 0x00	; 0
    256c:	21 f0       	breq	.+8      	; 0x2576 <modf+0x66>
    256e:	20 83       	st	Z, r18
    2570:	31 83       	std	Z+1, r19	; 0x01
    2572:	42 83       	std	Z+2, r20	; 0x02
    2574:	53 83       	std	Z+3, r21	; 0x03
    2576:	08 95       	ret

00002578 <__udivmodsi4>:
    2578:	a1 e2       	ldi	r26, 0x21	; 33
    257a:	1a 2e       	mov	r1, r26
    257c:	aa 1b       	sub	r26, r26
    257e:	bb 1b       	sub	r27, r27
    2580:	fd 01       	movw	r30, r26
    2582:	0d c0       	rjmp	.+26     	; 0x259e <__udivmodsi4_ep>

00002584 <__udivmodsi4_loop>:
    2584:	aa 1f       	adc	r26, r26
    2586:	bb 1f       	adc	r27, r27
    2588:	ee 1f       	adc	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	a2 17       	cp	r26, r18
    258e:	b3 07       	cpc	r27, r19
    2590:	e4 07       	cpc	r30, r20
    2592:	f5 07       	cpc	r31, r21
    2594:	20 f0       	brcs	.+8      	; 0x259e <__udivmodsi4_ep>
    2596:	a2 1b       	sub	r26, r18
    2598:	b3 0b       	sbc	r27, r19
    259a:	e4 0b       	sbc	r30, r20
    259c:	f5 0b       	sbc	r31, r21

0000259e <__udivmodsi4_ep>:
    259e:	66 1f       	adc	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	88 1f       	adc	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	1a 94       	dec	r1
    25a8:	69 f7       	brne	.-38     	; 0x2584 <__udivmodsi4_loop>
    25aa:	60 95       	com	r22
    25ac:	70 95       	com	r23
    25ae:	80 95       	com	r24
    25b0:	90 95       	com	r25
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
    25b6:	bd 01       	movw	r22, r26
    25b8:	cf 01       	movw	r24, r30
    25ba:	08 95       	ret

000025bc <__umulhisi3>:
    25bc:	a2 9f       	mul	r26, r18
    25be:	b0 01       	movw	r22, r0
    25c0:	b3 9f       	mul	r27, r19
    25c2:	c0 01       	movw	r24, r0
    25c4:	a3 9f       	mul	r26, r19
    25c6:	70 0d       	add	r23, r0
    25c8:	81 1d       	adc	r24, r1
    25ca:	11 24       	eor	r1, r1
    25cc:	91 1d       	adc	r25, r1
    25ce:	b2 9f       	mul	r27, r18
    25d0:	70 0d       	add	r23, r0
    25d2:	81 1d       	adc	r24, r1
    25d4:	11 24       	eor	r1, r1
    25d6:	91 1d       	adc	r25, r1
    25d8:	08 95       	ret

000025da <__muluhisi3>:
    25da:	0e 94 de 12 	call	0x25bc	; 0x25bc <__umulhisi3>
    25de:	a5 9f       	mul	r26, r21
    25e0:	90 0d       	add	r25, r0
    25e2:	b4 9f       	mul	r27, r20
    25e4:	90 0d       	add	r25, r0
    25e6:	a4 9f       	mul	r26, r20
    25e8:	80 0d       	add	r24, r0
    25ea:	91 1d       	adc	r25, r1
    25ec:	11 24       	eor	r1, r1
    25ee:	08 95       	ret

000025f0 <strcmp>:
    25f0:	fb 01       	movw	r30, r22
    25f2:	dc 01       	movw	r26, r24
    25f4:	8d 91       	ld	r24, X+
    25f6:	01 90       	ld	r0, Z+
    25f8:	80 19       	sub	r24, r0
    25fa:	01 10       	cpse	r0, r1
    25fc:	d9 f3       	breq	.-10     	; 0x25f4 <strcmp+0x4>
    25fe:	99 0b       	sbc	r25, r25
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
