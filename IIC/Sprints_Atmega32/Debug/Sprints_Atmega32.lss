
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a68  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c44  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdc  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000edd  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c28  00000000  00000000  00004abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000056e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_10>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	 enu_TWI_STATE_t enu_TWI_STATE;
	TWI_Init();
  92:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWI_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	60 ef       	ldi	r22, 0xF0	; 240
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 68 00 	call	0xd0	; 0xd0 <GPIO_Init>
	
    while (1) 
    {

	 
		enu_TWI_STATE=TWI_msterSendSLV_RW(SLAVE_ADDRESS_WRITE);
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TWI_msterSendSLV_RW>
		if(enu_TWI_STATE == TWI_OK)
  a6:	81 11       	cpse	r24, r1
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <main+0x30>
		{
			TWI_Write(0x0f);
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	0e 94 ef 00 	call	0x1de	; 0x1de <TWI_Write>
			TWI_Stop();
  b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <TWI_Stop>
			GPIO_Write( &PORTB,((PIN7|PIN6|PIN5|PIN4)),SET);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 ef       	ldi	r22, 0xF0	; 240
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 be 00 	call	0x17c	; 0x17c <GPIO_Write>
  c0:	ef cf       	rjmp	.-34     	; 0xa0 <main+0xe>
		}
		else
		GPIO_Write( &PORTB,((PIN7|PIN6|PIN5|PIN4)),RESET);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	60 ef       	ldi	r22, 0xF0	; 240
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 be 00 	call	0x17c	; 0x17c <GPIO_Write>
  ce:	e8 cf       	rjmp	.-48     	; 0xa0 <main+0xe>

000000d0 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	e1 f4       	brne	.+56     	; 0x10c <GPIO_Init+0x3c>
	{
		switch(_PORTX)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	59 f0       	breq	.+22     	; 0xee <GPIO_Init+0x1e>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <GPIO_Init+0x14>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	69 f0       	breq	.+26     	; 0xf8 <GPIO_Init+0x28>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	81 f0       	breq	.+32     	; 0x102 <GPIO_Init+0x32>
  e2:	46 c0       	rjmp	.+140    	; 0x170 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
  e4:	8a b3       	in	r24, 0x1a	; 26
  e6:	68 2b       	or	r22, r24
  e8:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  ea:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
  ec:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	68 2b       	or	r22, r24
  f2:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  f4:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
  f6:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	68 2b       	or	r22, r24
  fc:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  fe:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 100:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 102:	81 b3       	in	r24, 0x11	; 17
 104:	68 2b       	or	r22, r24
 106:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 108:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 10a:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 10c:	41 11       	cpse	r20, r1
 10e:	32 c0       	rjmp	.+100    	; 0x174 <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <GPIO_Init+0x64>
 114:	28 f0       	brcs	.+10     	; 0x120 <GPIO_Init+0x50>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	b9 f0       	breq	.+46     	; 0x148 <GPIO_Init+0x78>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	f9 f0       	breq	.+62     	; 0x15c <GPIO_Init+0x8c>
 11e:	2c c0       	rjmp	.+88     	; 0x178 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 120:	8a b3       	in	r24, 0x1a	; 26
 122:	96 2f       	mov	r25, r22
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	68 2b       	or	r22, r24
 12e:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 130:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 132:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 134:	87 b3       	in	r24, 0x17	; 23
 136:	96 2f       	mov	r25, r22
 138:	90 95       	com	r25
 13a:	89 23       	and	r24, r25
 13c:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	68 2b       	or	r22, r24
 142:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 144:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 146:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 148:	84 b3       	in	r24, 0x14	; 20
 14a:	96 2f       	mov	r25, r22
 14c:	90 95       	com	r25
 14e:	89 23       	and	r24, r25
 150:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 152:	85 b3       	in	r24, 0x15	; 21
 154:	68 2b       	or	r22, r24
 156:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 158:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 15a:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 15c:	81 b3       	in	r24, 0x11	; 17
 15e:	96 2f       	mov	r25, r22
 160:	90 95       	com	r25
 162:	89 23       	and	r24, r25
 164:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 166:	82 b3       	in	r24, 0x12	; 18
 168:	68 2b       	or	r22, r24
 16a:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 16c:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 16e:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 178:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 17a:	08 95       	ret

0000017c <GPIO_Write>:
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	89 f0       	breq	.+34     	; 0x1a2 <GPIO_Write+0x26>
	if(Value == RESET)
 180:	41 11       	cpse	r20, r1
 182:	07 c0       	rjmp	.+14     	; 0x192 <GPIO_Write+0x16>
	{
		CLR_BITS(*PORTX,PINX);
 184:	fc 01       	movw	r30, r24
 186:	20 81       	ld	r18, Z
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
	if(PORTX == NULL ) return DIO_ERROR_NOK;
	if(Value == RESET)
	{
		CLR_BITS(*PORTX,PINX);
	}
	else if(Value == SET)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	41 f4       	brne	.+16     	; 0x1a6 <GPIO_Write+0x2a>
	{
		SET_BITS(*PORTX,PINX);
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	62 2b       	or	r22, r18
 19c:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
	{
		SET_BITS(*PORTX,PINX);
	}
	else
	{
		return DIO_ERROR_NOK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return DIO_ERROR_OK;

}
 1a8:	08 95       	ret

000001aa <TWI_Init>:
	if(u8_state== TWI_SLAVE_DATA_RX_NACK || u8_state == TWI_GENERAL_CALL_DATA_NACK )
	{
		*u8ptr_dataTemp=TWDR;
	}
	return u8_state;
}
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	80 b9       	out	0x00, r24	; 0
 1ae:	08 95       	ret

000001b0 <TWI_Start>:
 1b0:	86 b7       	in	r24, 0x36	; 54
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	86 bf       	out	0x36, r24	; 54
 1b6:	86 b7       	in	r24, 0x36	; 54
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	86 bf       	out	0x36, r24	; 54
 1bc:	86 b7       	in	r24, 0x36	; 54
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	86 bf       	out	0x36, r24	; 54
 1c2:	06 b6       	in	r0, 0x36	; 54
 1c4:	07 fe       	sbrs	r0, 7
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <TWI_Start+0x12>
 1c8:	08 95       	ret

000001ca <TWI_Stop>:
 1ca:	86 b7       	in	r24, 0x36	; 54
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	86 bf       	out	0x36, r24	; 54
 1d0:	86 b7       	in	r24, 0x36	; 54
 1d2:	80 61       	ori	r24, 0x10	; 16
 1d4:	86 bf       	out	0x36, r24	; 54
 1d6:	86 b7       	in	r24, 0x36	; 54
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	86 bf       	out	0x36, r24	; 54
 1dc:	08 95       	ret

000001de <TWI_Write>:
 1de:	83 b9       	out	0x03, r24	; 3
 1e0:	86 b7       	in	r24, 0x36	; 54
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	86 bf       	out	0x36, r24	; 54
 1e6:	86 b7       	in	r24, 0x36	; 54
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	86 bf       	out	0x36, r24	; 54
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <TWI_Write+0xe>
 1f2:	08 95       	ret

000001f4 <TWI_msterSendSLV_RW>:
enu_TWI_STATE_t  TWI_msterSendSLV_RW(uinteg8_t u8_SLAVE_ADDRESS_WRITE)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
	uinteg8_t u8_state=0;
	TWI_Start();
 1f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Start>
}
uinteg8_t TWI_GetStatus(void)
{
	uinteg8_t u8_status;
	//mask status
	u8_status = TWSR & 0xF8;
 1fc:	81 b1       	in	r24, 0x01	; 1
enu_TWI_STATE_t  TWI_msterSendSLV_RW(uinteg8_t u8_SLAVE_ADDRESS_WRITE)
{
	uinteg8_t u8_state=0;
	TWI_Start();
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
 1fe:	88 7f       	andi	r24, 0xF8	; 248
 200:	88 30       	cpi	r24, 0x08	; 8
 202:	49 f4       	brne	.+18     	; 0x216 <TWI_msterSendSLV_RW+0x22>
	return TWI_NOK;
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 ef 00 	call	0x1de	; 0x1de <TWI_Write>
}
uinteg8_t TWI_GetStatus(void)
{
	uinteg8_t u8_status;
	//mask status
	u8_status = TWSR & 0xF8;
 20a:	81 b1       	in	r24, 0x01	; 1
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
	return TWI_NOK;
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_SLA_W_ACK)
 20c:	88 7f       	andi	r24, 0xF8	; 248
 20e:	88 31       	cpi	r24, 0x18	; 24
 210:	21 f4       	brne	.+8      	; 0x21a <TWI_msterSendSLV_RW+0x26>
	return TWI_SLA_W_NACK;
	return TWI_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <TWI_msterSendSLV_RW+0x28>
{
	uinteg8_t u8_state=0;
	TWI_Start();
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
	return TWI_NOK;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	01 c0       	rjmp	.+2      	; 0x21c <TWI_msterSendSLV_RW+0x28>
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_SLA_W_ACK)
	return TWI_SLA_W_NACK;
 21a:	80 e2       	ldi	r24, 0x20	; 32
	return TWI_OK;
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <__vector_11>:
	}
	return TIMER_ERROR_OK;
}

void __vector_11(void)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	gcallBack();
 242:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24a:	09 95       	icall
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_10>:
void __vector_10(void)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
	
}
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_13>:
	ptr_To_TX_Int_fun=ptr_To_Fun;
	
}
/*RX ISR*/
void __vector_13(void)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
 2a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_To_RX_Int_fun>
 2a8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_To_RX_Int_fun+0x1>
 2ac:	09 95       	icall
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
 2f2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_To_TX_Int_fun>
 2f6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_To_TX_Int_fun+0x1>
 2fa:	09 95       	icall
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
