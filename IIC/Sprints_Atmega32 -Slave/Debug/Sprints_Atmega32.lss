
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f4  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c37  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc2  00000000  00000000  00002b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00003740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f32  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0a  00000000  00000000  00004a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_10>
  2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	 enu_TWI_STATE_t enu_TWI_STATE;
	//TWI_Init();
	GPIO_Init ( _PORTD,((PIN7|PIN6|PIN5|PIN4|PIN3|PIN2|PIN1|PIN0)),OutPut);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	6f ef       	ldi	r22, 0xFF	; 255
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_Init>
	//USART_Init(&gstr_USART_Config);
	enu_TWI_STATE=TWI_msterSendSLV_RW(SLAVE_ADDRESS_WRITE);
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TWI_msterSendSLV_RW>
	else
	GPIO_Write( &PORTB,((PIN7|PIN6|PIN5|PIN4)),SET);*/
    while (1) 
    {

	GPIO_Write ( &PORTD,((PIN7|PIN6|PIN5|PIN4|PIN3|PIN2|PIN1|PIN0)),SET);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	6f ef       	ldi	r22, 0xFF	; 255
  a6:	82 e3       	ldi	r24, 0x32	; 50
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_Write>
  ae:	f9 cf       	rjmp	.-14     	; 0xa2 <main+0x10>

000000b0 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	e1 f4       	brne	.+56     	; 0xec <GPIO_Init+0x3c>
	{
		switch(_PORTX)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	59 f0       	breq	.+22     	; 0xce <GPIO_Init+0x1e>
  b8:	28 f0       	brcs	.+10     	; 0xc4 <GPIO_Init+0x14>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	69 f0       	breq	.+26     	; 0xd8 <GPIO_Init+0x28>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	81 f0       	breq	.+32     	; 0xe2 <GPIO_Init+0x32>
  c2:	46 c0       	rjmp	.+140    	; 0x150 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	68 2b       	or	r22, r24
  c8:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  ca:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
  cc:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	68 2b       	or	r22, r24
  d2:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  d4:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
  d6:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	68 2b       	or	r22, r24
  dc:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  de:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
  e0:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	68 2b       	or	r22, r24
  e6:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  e8:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
  ea:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
  ec:	41 11       	cpse	r20, r1
  ee:	32 c0       	rjmp	.+100    	; 0x154 <GPIO_Init+0xa4>
	{
		switch(_PORTX)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	81 f0       	breq	.+32     	; 0x114 <GPIO_Init+0x64>
  f4:	28 f0       	brcs	.+10     	; 0x100 <GPIO_Init+0x50>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	b9 f0       	breq	.+46     	; 0x128 <GPIO_Init+0x78>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	f9 f0       	breq	.+62     	; 0x13c <GPIO_Init+0x8c>
  fe:	2c c0       	rjmp	.+88     	; 0x158 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	96 2f       	mov	r25, r22
 104:	90 95       	com	r25
 106:	89 23       	and	r24, r25
 108:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	68 2b       	or	r22, r24
 10e:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 110:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 112:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 114:	87 b3       	in	r24, 0x17	; 23
 116:	96 2f       	mov	r25, r22
 118:	90 95       	com	r25
 11a:	89 23       	and	r24, r25
 11c:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	68 2b       	or	r22, r24
 122:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 124:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 126:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 128:	84 b3       	in	r24, 0x14	; 20
 12a:	96 2f       	mov	r25, r22
 12c:	90 95       	com	r25
 12e:	89 23       	and	r24, r25
 130:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 132:	85 b3       	in	r24, 0x15	; 21
 134:	68 2b       	or	r22, r24
 136:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 138:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 13a:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 13c:	81 b3       	in	r24, 0x11	; 17
 13e:	96 2f       	mov	r25, r22
 140:	90 95       	com	r25
 142:	89 23       	and	r24, r25
 144:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 146:	82 b3       	in	r24, 0x12	; 18
 148:	68 2b       	or	r22, r24
 14a:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 14c:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 14e:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 158:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 15a:	08 95       	ret

0000015c <GPIO_Write>:
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	89 f0       	breq	.+34     	; 0x182 <GPIO_Write+0x26>
	if(Value == RESET)
 160:	41 11       	cpse	r20, r1
 162:	07 c0       	rjmp	.+14     	; 0x172 <GPIO_Write+0x16>
	{
		CLR_BITS(*PORTX,PINX);
 164:	fc 01       	movw	r30, r24
 166:	20 81       	ld	r18, Z
 168:	60 95       	com	r22
 16a:	62 23       	and	r22, r18
 16c:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
	if(PORTX == NULL ) return DIO_ERROR_NOK;
	if(Value == RESET)
	{
		CLR_BITS(*PORTX,PINX);
	}
	else if(Value == SET)
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	41 f4       	brne	.+16     	; 0x186 <GPIO_Write+0x2a>
	{
		SET_BITS(*PORTX,PINX);
 176:	fc 01       	movw	r30, r24
 178:	20 81       	ld	r18, Z
 17a:	62 2b       	or	r22, r18
 17c:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
	{
		SET_BITS(*PORTX,PINX);
	}
	else
	{
		return DIO_ERROR_NOK;
 186:	80 e0       	ldi	r24, 0x00	; 0
	}
	return DIO_ERROR_OK;

}
 188:	08 95       	ret

0000018a <TWI_Start>:
	if(u8_state== TWI_SLAVE_DATA_RX_NACK || u8_state == TWI_GENERAL_CALL_DATA_NACK )
	{
		*u8ptr_dataTemp=TWDR;
	}
	return u8_state;
}
 18a:	86 b7       	in	r24, 0x36	; 54
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	86 bf       	out	0x36, r24	; 54
 190:	86 b7       	in	r24, 0x36	; 54
 192:	80 62       	ori	r24, 0x20	; 32
 194:	86 bf       	out	0x36, r24	; 54
 196:	86 b7       	in	r24, 0x36	; 54
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	86 bf       	out	0x36, r24	; 54
 19c:	06 b6       	in	r0, 0x36	; 54
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <TWI_Start+0x12>
 1a2:	08 95       	ret

000001a4 <TWI_Write>:
 1a4:	83 b9       	out	0x03, r24	; 3
 1a6:	86 b7       	in	r24, 0x36	; 54
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	86 bf       	out	0x36, r24	; 54
 1ac:	86 b7       	in	r24, 0x36	; 54
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	86 bf       	out	0x36, r24	; 54
 1b2:	06 b6       	in	r0, 0x36	; 54
 1b4:	07 fe       	sbrs	r0, 7
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <TWI_Write+0xe>
 1b8:	08 95       	ret

000001ba <TWI_msterSendSLV_RW>:
enu_TWI_STATE_t  TWI_msterSendSLV_RW(uinteg8_t u8_SLAVE_ADDRESS_WRITE)
{
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
	uinteg8_t u8_state=0;
	TWI_Start();
 1be:	0e 94 c5 00 	call	0x18a	; 0x18a <TWI_Start>
}
uinteg8_t TWI_GetStatus(void)
{
	uinteg8_t u8_status;
	//mask status
	u8_status = TWSR & 0xF8;
 1c2:	81 b1       	in	r24, 0x01	; 1
enu_TWI_STATE_t  TWI_msterSendSLV_RW(uinteg8_t u8_SLAVE_ADDRESS_WRITE)
{
	uinteg8_t u8_state=0;
	TWI_Start();
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
 1c4:	88 7f       	andi	r24, 0xF8	; 248
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	49 f4       	brne	.+18     	; 0x1dc <TWI_msterSendSLV_RW+0x22>
	return TWI_NOK;
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <TWI_Write>
}
uinteg8_t TWI_GetStatus(void)
{
	uinteg8_t u8_status;
	//mask status
	u8_status = TWSR & 0xF8;
 1d0:	81 b1       	in	r24, 0x01	; 1
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
	return TWI_NOK;
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_SLA_W_ACK)
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	88 31       	cpi	r24, 0x18	; 24
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <TWI_msterSendSLV_RW+0x26>
	return TWI_SLA_W_NACK;
	return TWI_OK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <TWI_msterSendSLV_RW+0x28>
{
	uinteg8_t u8_state=0;
	TWI_Start();
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_ST_OK)
	return TWI_NOK;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <TWI_msterSendSLV_RW+0x28>
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_SLA_W_ACK)
	return TWI_SLA_W_NACK;
 1e0:	80 e2       	ldi	r24, 0x20	; 32
	return TWI_OK;
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <__vector_11>:
	}
	return TIMER_ERROR_OK;
}

void __vector_11(void)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	gcallBack();
 208:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 210:	09 95       	icall
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_10>:
void __vector_10(void)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
	
}
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_13>:
	ptr_To_TX_Int_fun=ptr_To_Fun;
	
}
/*RX ISR*/
void __vector_13(void)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
 26a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_To_RX_Int_fun>
 26e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_To_RX_Int_fun+0x1>
 272:	09 95       	icall
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
 2b8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_To_TX_Int_fun>
 2bc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_To_TX_Int_fun+0x1>
 2c0:	09 95       	icall
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
