
Atmega32_SLave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a53  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c76  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bee  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee4  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c70  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_10>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define SLAVE_ADDRESS_WRITE 0x0A
#define SLAVE_ADDRESS_READe 0x0B


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	
	enu_TWI_STATE_t enu_TWI_STATE;
	uinteg8_t u8_data;
	GPIO_Init ( _PORTD,((PIN7|PIN6|PIN5|PIN4|PIN3|PIN2|PIN1|PIN0)),OutPut);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	6f ef       	ldi	r22, 0xFF	; 255
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_Init>
	TWI_Init();
  a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TWI_Init>
	//USART_Init(&gstr_USART_Config);
	//enu_TWI_STATE=TWI_msterSendSLV_RW(SLAVE_ADDRESS_WRITE);
	while (1)
	{
		enu_TWI_STATE=TWI_SlaveListen();
  aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TWI_SlaveListen>
		if(enu_TWI_STATE==TWI_OWN_SLA_W_ACK||enu_TWI_STATE==TWI_OWN_SLA_W_ACK2)	/* Own SLA+W received &ack returned */
  ae:	98 2f       	mov	r25, r24
  b0:	97 7f       	andi	r25, 0xF7	; 247
  b2:	90 36       	cpi	r25, 0x60	; 96
  b4:	21 f4       	brne	.+8      	; 0xbe <main+0x2c>
		enu_TWI_STATE=TWI_ReadACK_returnState(&u8_data);
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_ReadACK_returnState>
		if(enu_TWI_STATE== TWI_SLAVE_DATA_RX_ACK || enu_TWI_STATE == TWI_GENERAL_CALL_DATA_ACK )
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	80 38       	cpi	r24, 0x80	; 128
  c2:	99 f7       	brne	.-26     	; 0xaa <main+0x18>
		GPIO_Write(&PORTD,u8_data,SET);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	69 81       	ldd	r22, Y+1	; 0x01
  c8:	82 e3       	ldi	r24, 0x32	; 50
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 bf 00 	call	0x17e	; 0x17e <GPIO_Write>
  d0:	ec cf       	rjmp	.-40     	; 0xaa <main+0x18>

000000d2 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	e1 f4       	brne	.+56     	; 0x10e <GPIO_Init+0x3c>
	{
		switch(_PORTX)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <GPIO_Init+0x1e>
  da:	28 f0       	brcs	.+10     	; 0xe6 <GPIO_Init+0x14>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	69 f0       	breq	.+26     	; 0xfa <GPIO_Init+0x28>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	81 f0       	breq	.+32     	; 0x104 <GPIO_Init+0x32>
  e4:	46 c0       	rjmp	.+140    	; 0x172 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
  e6:	8a b3       	in	r24, 0x1a	; 26
  e8:	68 2b       	or	r22, r24
  ea:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  ec:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
  ee:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	68 2b       	or	r22, r24
  f4:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
  f6:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
  f8:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
  fa:	84 b3       	in	r24, 0x14	; 20
  fc:	68 2b       	or	r22, r24
  fe:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 100:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 102:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 104:	81 b3       	in	r24, 0x11	; 17
 106:	68 2b       	or	r22, r24
 108:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 10a:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 10c:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 10e:	41 11       	cpse	r20, r1
 110:	32 c0       	rjmp	.+100    	; 0x176 <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	81 f0       	breq	.+32     	; 0x136 <GPIO_Init+0x64>
 116:	28 f0       	brcs	.+10     	; 0x122 <GPIO_Init+0x50>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	b9 f0       	breq	.+46     	; 0x14a <GPIO_Init+0x78>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	f9 f0       	breq	.+62     	; 0x15e <GPIO_Init+0x8c>
 120:	2c c0       	rjmp	.+88     	; 0x17a <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 122:	8a b3       	in	r24, 0x1a	; 26
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	89 23       	and	r24, r25
 12a:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	68 2b       	or	r22, r24
 130:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 132:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 134:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 136:	87 b3       	in	r24, 0x17	; 23
 138:	96 2f       	mov	r25, r22
 13a:	90 95       	com	r25
 13c:	89 23       	and	r24, r25
 13e:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 140:	88 b3       	in	r24, 0x18	; 24
 142:	68 2b       	or	r22, r24
 144:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 146:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 148:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 14a:	84 b3       	in	r24, 0x14	; 20
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	89 23       	and	r24, r25
 152:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 154:	85 b3       	in	r24, 0x15	; 21
 156:	68 2b       	or	r22, r24
 158:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 15a:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 15c:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 15e:	81 b3       	in	r24, 0x11	; 17
 160:	96 2f       	mov	r25, r22
 162:	90 95       	com	r25
 164:	89 23       	and	r24, r25
 166:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	68 2b       	or	r22, r24
 16c:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 16e:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 170:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 17a:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 17c:	08 95       	ret

0000017e <GPIO_Write>:
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	89 f0       	breq	.+34     	; 0x1a4 <GPIO_Write+0x26>
	if(Value == RESET)
 182:	41 11       	cpse	r20, r1
 184:	07 c0       	rjmp	.+14     	; 0x194 <GPIO_Write+0x16>
	{
		CLR_BITS(*PORTX,PINX);
 186:	fc 01       	movw	r30, r24
 188:	20 81       	ld	r18, Z
 18a:	60 95       	com	r22
 18c:	62 23       	and	r22, r18
 18e:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	08 95       	ret
	if(PORTX == NULL ) return DIO_ERROR_NOK;
	if(Value == RESET)
	{
		CLR_BITS(*PORTX,PINX);
	}
	else if(Value == SET)
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	41 f4       	brne	.+16     	; 0x1a8 <GPIO_Write+0x2a>
	{
		SET_BITS(*PORTX,PINX);
 198:	fc 01       	movw	r30, r24
 19a:	20 81       	ld	r18, Z
 19c:	62 2b       	or	r22, r18
 19e:	60 83       	st	Z, r22
	}
	else
	{
		return DIO_ERROR_NOK;
	}
	return DIO_ERROR_OK;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
/*EX: GPIO_Write (&PORTA, PIN0 , RESET);
EX: GPIO_Write (&PORTB, (PIN7| PIN0| PIN3), SET);*/

genu_ERROR_t GPIO_Write (volatile uinteg8_t *PORTX,PIN_t PINX, GPIO_Value Value)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret
	{
		SET_BITS(*PORTX,PINX);
	}
	else
	{
		return DIO_ERROR_NOK;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return DIO_ERROR_OK;

}
 1aa:	08 95       	ret

000001ac <TWI_Init>:
	TWI_Write(u8_SLAVE_ADDRESS_WRITE);
	u8_state=TWI_GetStatus();
	if(u8_state!=TWI_SLA_W_ACK)
	return TWI_SLA_W_NACK;
	return TWI_OK;
}
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	82 b9       	out	0x02, r24	; 2
 1b0:	86 b7       	in	r24, 0x36	; 54
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	86 bf       	out	0x36, r24	; 54
 1b6:	86 b7       	in	r24, 0x36	; 54
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	86 bf       	out	0x36, r24	; 54
 1bc:	86 b7       	in	r24, 0x36	; 54
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	86 bf       	out	0x36, r24	; 54
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	80 b9       	out	0x00, r24	; 0
 1c6:	08 95       	ret

000001c8 <TWI_ReadACK_returnState>:
 1c8:	fc 01       	movw	r30, r24
 1ca:	96 b7       	in	r25, 0x36	; 54
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	96 bf       	out	0x36, r25	; 54
 1d0:	96 b7       	in	r25, 0x36	; 54
 1d2:	94 60       	ori	r25, 0x04	; 4
 1d4:	96 bf       	out	0x36, r25	; 54
 1d6:	96 b7       	in	r25, 0x36	; 54
 1d8:	90 64       	ori	r25, 0x40	; 64
 1da:	96 bf       	out	0x36, r25	; 54
 1dc:	06 b6       	in	r0, 0x36	; 54
 1de:	07 fe       	sbrs	r0, 7
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <TWI_ReadACK_returnState+0x14>
 1e2:	91 b1       	in	r25, 0x01	; 1
 1e4:	89 2f       	mov	r24, r25
 1e6:	88 7f       	andi	r24, 0xF8	; 248
 1e8:	98 7e       	andi	r25, 0xE8	; 232
 1ea:	90 38       	cpi	r25, 0x80	; 128
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <TWI_ReadACK_returnState+0x2a>
 1ee:	93 b1       	in	r25, 0x03	; 3
 1f0:	90 83       	st	Z, r25
 1f2:	08 95       	ret

000001f4 <TWI_SlaveListen>:
enu_TWI_STATE_t TWI_SlaveListen(void)
{
	while(1)
	{
		uinteg8_t status;											/* Declare variable */
		while(!(TWCR&(1<<TWINT)));									/* Wait to be addressed */
 1f4:	06 b6       	in	r0, 0x36	; 54
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <TWI_SlaveListen>
		status=TWSR&0xF8;											/* Read TWI status register */
 1fa:	91 b1       	in	r25, 0x01	; 1
 1fc:	89 2f       	mov	r24, r25
 1fe:	88 7f       	andi	r24, 0xF8	; 248
		if(status==TWI_OWN_SLA_W_ACK||status==TWI_OWN_SLA_W_ACK2)	/* Own SLA+W received &ack returned */
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	90 36       	cpi	r25, 0x60	; 96
 204:	31 f0       	breq	.+12     	; 0x212 <TWI_SlaveListen+0x1e>
		return status;												/* Return TWI_OWN_SLA_W_ACK to indicate ack returned */
		if(status==TWI_OWN_SLA_R_ACK||status==TWI_OWN_SLA_R_ACK2)	/* Own SLA+R received &ack returned */
 206:	88 3a       	cpi	r24, 0xA8	; 168
 208:	21 f0       	breq	.+8      	; 0x212 <TWI_SlaveListen+0x1e>
 20a:	80 3b       	cpi	r24, 0xB0	; 176
 20c:	11 f0       	breq	.+4      	; 0x212 <TWI_SlaveListen+0x1e>
		return status;												/* Return TWI_OWN_SLA_R_ACK to indicate ack returned */
		if(status==TWI_GENERAL_CALL||status==TWI_GENERAL_CALL2)		/* General call received &ack returned */
 20e:	90 37       	cpi	r25, 0x70	; 112
 210:	89 f7       	brne	.-30     	; 0x1f4 <TWI_SlaveListen>
		if(status == TWI_SLV_RECEIVED_STOP)
		return status;												/* Return 1 to indicate ack returned */
		else
		continue;													/* Else continue */
	}		
}
 212:	08 95       	ret

00000214 <__vector_11>:
	}
	return TIMER_ERROR_OK;
}

void __vector_11(void)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	gcallBack();
 236:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	09 95       	icall
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_10>:
void __vector_10(void)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
	
}
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_13>:
	ptr_To_TX_Int_fun=ptr_To_Fun;
	
}
/*RX ISR*/
void __vector_13(void)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
 298:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_To_RX_Int_fun>
 29c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_To_RX_Int_fun+0x1>
 2a0:	09 95       	icall
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
 2e6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_To_TX_Int_fun>
 2ea:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_To_TX_Int_fun+0x1>
 2ee:	09 95       	icall
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
