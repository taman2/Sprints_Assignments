
Atmega32_masterToEEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000eaa  00000f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080010e  0080010e  00000fec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027bd  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101f  00000000  00000000  00003a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103c  00000000  00000000  00004a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f4  00000000  00000000  00005a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010cd  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f10  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_10>
  2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_13>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_15>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__floatsisf+0x1c>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea ea       	ldi	r30, 0xAA	; 170
  ea:	fe e0       	ldi	r31, 0x0E	; 14
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	ae 30       	cpi	r26, 0x0E	; 14
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	ae e0       	ldi	r26, 0x0E	; 14
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 31       	cpi	r26, 0x1B	; 27
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 10 02 	call	0x420	; 0x420 <main>
 10c:	0c 94 53 07 	jmp	0xea6	; 0xea6 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <EE_APP_Init>:
uinteg8_t garr_Buffer[BUFFER_SIZE]="HI..Sprints";
 
void EE_APP_Init(void)
{
	
	TWI_Init();
 114:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4|PIN3|PIN2|PIN1|PIN0)),OutPut);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	6f ef       	ldi	r22, 0xFF	; 255
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 15 02 	call	0x42a	; 0x42a <GPIO_Init>
	USART_Init(&gstr_USART_Config);
 122:	8c ec       	ldi	r24, 0xCC	; 204
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 bc 02 	call	0x578	; 0x578 <USART_Init>
	genu_EE_APPState=_WAITE;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <genu_EE_APPState>
 130:	08 95       	ret

00000132 <stringToBinary>:

				
	}
}
uinteg8_t stringToBinary(uinteg8_t *pu8_str)
{
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	7c 01       	movw	r14, r24
 148:	07 e0       	ldi	r16, 0x07	; 7
 14a:	10 e0       	ldi	r17, 0x00	; 0
	uinteg8_t u8_I=0;
	uinteg8_t u8_Temp1=0;
	uinteg8_t u8_Temp2=0;
 14c:	d0 e0       	ldi	r29, 0x00	; 0

	for(u8_I=0;u8_I<8;u8_I++)
	{
		u8_Temp1=pu8_str[u8_I]-'0';
 14e:	f7 01       	movw	r30, r14
 150:	c1 91       	ld	r28, Z+
 152:	7f 01       	movw	r14, r30
		u8_Temp2+=(u8_Temp1*pow(2,(7-u8_I)));
 154:	b8 01       	movw	r22, r16
 156:	01 2e       	mov	r0, r17
 158:	00 0c       	add	r0, r0
 15a:	88 0b       	sbc	r24, r24
 15c:	99 0b       	sbc	r25, r25
 15e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__floatsisf>
 162:	9b 01       	movw	r18, r22
 164:	ac 01       	movw	r20, r24
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e4       	ldi	r25, 0x40	; 64
 16e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <pow>
 172:	4b 01       	movw	r8, r22
 174:	5c 01       	movw	r10, r24
 176:	60 ed       	ldi	r22, 0xD0	; 208
 178:	6c 0f       	add	r22, r28
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__floatsisf>
 184:	a5 01       	movw	r20, r10
 186:	94 01       	movw	r18, r8
 188:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 18c:	4b 01       	movw	r8, r22
 18e:	5c 01       	movw	r10, r24
 190:	6d 2f       	mov	r22, r29
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__floatsisf>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	c5 01       	movw	r24, r10
 1a2:	b4 01       	movw	r22, r8
 1a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 1a8:	0e 94 29 04 	call	0x852	; 0x852 <__fixunssfsi>
 1ac:	d6 2f       	mov	r29, r22
 1ae:	01 50       	subi	r16, 0x01	; 1
 1b0:	11 09       	sbc	r17, r1
 1b2:	68 f6       	brcc	.-102    	; 0x14e <stringToBinary+0x1c>
	}
	return u8_Temp2;
}
 1b4:	86 2f       	mov	r24, r22
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	bf 90       	pop	r11
 1c4:	af 90       	pop	r10
 1c6:	9f 90       	pop	r9
 1c8:	8f 90       	pop	r8
 1ca:	08 95       	ret

000001cc <check_command>:
	USART_Init(&gstr_USART_Config);
	genu_EE_APPState=_WAITE;
}

void check_command(uinteg8_t *pu8_buffer)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	USART_Recieve_Packet(pu8_buffer,ENTER_PRESSED);
 1d2:	6d e0       	ldi	r22, 0x0D	; 13
 1d4:	0e 94 44 03 	call	0x688	; 0x688 <USART_Recieve_Packet>
	if(strcmp(pu8_buffer,gpu8_RreadComand)== 0 )
 1d8:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <gpu8_RreadComand>
 1dc:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <gpu8_RreadComand+0x1>
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 4a 07 	call	0xe94	; 0xe94 <strcmp>
 1e6:	89 2b       	or	r24, r25
 1e8:	b1 f4       	brne	.+44     	; 0x216 <check_command+0x4a>
	{
		USART_Recieve_Packet(pu8_buffer,ENTER_PRESSED);
 1ea:	6d e0       	ldi	r22, 0x0D	; 13
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 44 03 	call	0x688	; 0x688 <USART_Recieve_Packet>
		EEPROM_BYTE_ADD=stringToBinary(pu8_buffer);
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 99 00 	call	0x132	; 0x132 <stringToBinary>
 1f8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <EEPROM_BYTE_ADD>
		USART_Send_Packet(gpu8_OkComand,NULL_CHAR);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gpu8_OkComand>
 202:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <gpu8_OkComand+0x1>
 206:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
		USART_Transmit(ENTER_PRESSED);
 20a:	8d e0       	ldi	r24, 0x0D	; 13
 20c:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
		genu_EE_APPState = _READ;
 210:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <genu_EE_APPState>
 214:	2f c0       	rjmp	.+94     	; 0x274 <check_command+0xa8>
		
	}
	else if(strcmp(pu8_buffer,gpu8_WriteComand)== 0)
 216:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <gpu8_WriteComand>
 21a:	70 91 c9 00 	lds	r23, 0x00C9	; 0x8000c9 <gpu8_WriteComand+0x1>
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 4a 07 	call	0xe94	; 0xe94 <strcmp>
 224:	89 2b       	or	r24, r25
 226:	31 f5       	brne	.+76     	; 0x274 <check_command+0xa8>
	{
		USART_Recieve_Packet(pu8_buffer,ENTER_PRESSED);
 228:	6d e0       	ldi	r22, 0x0D	; 13
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 44 03 	call	0x688	; 0x688 <USART_Recieve_Packet>
		EEPROM_BYTE_ADD=stringToBinary(pu8_buffer);
 230:	ce 01       	movw	r24, r28
 232:	0e 94 99 00 	call	0x132	; 0x132 <stringToBinary>
 236:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <EEPROM_BYTE_ADD>
		USART_Send_Packet(gpu8_OkComand,NULL_CHAR);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gpu8_OkComand>
 240:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <gpu8_OkComand+0x1>
 244:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
		USART_Transmit(ENTER_PRESSED);
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
		u8_RecivedByte=USART_Receive();
 24e:	0e 94 23 03 	call	0x646	; 0x646 <USART_Receive>
 252:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		USART_Receive();
 256:	0e 94 23 03 	call	0x646	; 0x646 <USART_Receive>
		USART_Send_Packet(gpu8_OkComand,NULL_CHAR);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gpu8_OkComand>
 260:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <gpu8_OkComand+0x1>
 264:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
		USART_Transmit(ENTER_PRESSED);
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
		genu_EE_APPState = _WRITE;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <genu_EE_APPState>
	}
	else
	{
		
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <EE_APPControl>:
void EE_APPControl(void)
{
	switch(genu_EE_APPState)
 27a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <genu_EE_APPState>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	51 f1       	breq	.+84     	; 0x2d6 <EE_APPControl+0x5c>
 282:	18 f0       	brcs	.+6      	; 0x28a <EE_APPControl+0x10>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	f1 f1       	breq	.+124    	; 0x304 <EE_APPControl+0x8a>
 288:	08 95       	ret
	{
		case _READ:
			enu_TWI_STATE=EEReadByte((uinteg16_t)EEPROM_BYTE_ADD,&u8_RecivedByte);
 28a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROM_BYTE_ADD>
 28e:	6e e0       	ldi	r22, 0x0E	; 14
 290:	71 e0       	ldi	r23, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 be 01 	call	0x37c	; 0x37c <EEReadByte>
 298:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <enu_TWI_STATE>
			if(enu_TWI_STATE == EE_OK)
 29c:	81 11       	cpse	r24, r1
 29e:	0f c0       	rjmp	.+30     	; 0x2be <EE_APPControl+0x44>
			{
				USART_Send_Packet(gpu8_DataInfo,NULL_CHAR);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <gpu8_DataInfo>
 2a6:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <gpu8_DataInfo+0x1>
 2aa:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
				USART_Transmit(u8_RecivedByte);
 2ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2b2:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
				USART_Transmit(ENTER_PRESSED);
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <EE_APPControl+0x54>
			}
			else
			{
				USART_Send_Packet(" READ ERROR",NULL_CHAR);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	87 ed       	ldi	r24, 0xD7	; 215
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
				USART_Transmit(ENTER_PRESSED);
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
			}
			genu_EE_APPState=_WAITE;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <genu_EE_APPState>
			break;
 2d4:	08 95       	ret
			
		case _WRITE:
			enu_TWI_STATE=EEWriteByte((uinteg16_t)EEPROM_BYTE_ADD,u8_RecivedByte);
 2d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROM_BYTE_ADD>
 2da:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 87 01 	call	0x30e	; 0x30e <EEWriteByte>
 2e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <enu_TWI_STATE>
			if(enu_TWI_STATE != EE_OK)
 2e8:	88 23       	and	r24, r24
 2ea:	41 f0       	breq	.+16     	; 0x2fc <EE_APPControl+0x82>
			{
				USART_Send_Packet(" WRITE ERROR",NULL_CHAR);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	83 ee       	ldi	r24, 0xE3	; 227
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Send_Packet>
				USART_Transmit(ENTER_PRESSED);				
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
			}
			genu_EE_APPState=_WAITE;
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <genu_EE_APPState>
			break;
 302:	08 95       	ret
		case _WAITE:
			check_command(garr_Buffer);
 304:	80 e6       	ldi	r24, 0x60	; 96
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 e6 00 	call	0x1cc	; 0x1cc <check_command>
 30c:	08 95       	ret

0000030e <EEWriteByte>:
{
	return (TWI_Init());
}

enu_EE_Error_t EEWriteByte(uinteg16_t u16_addr, uinteg8_t u8_data)
{
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
 316:	16 2f       	mov	r17, r22
	TWI_Start();
 318:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Start>
	if (TWI_GetStatus() != TWI_ST_OK)
 31c:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	09 f5       	brne	.+66     	; 0x366 <EEWriteByte+0x58>
	return EE_NOK;
	//select devise and send A2 A1 A0 address bits 
	TWI_Write((EEDEVADR)|(uinteg8_t)((u16_addr & 0x0700)>>7));
 324:	ce 01       	movw	r24, r28
 326:	88 27       	eor	r24, r24
 328:	97 70       	andi	r25, 0x07	; 7
 32a:	88 0f       	add	r24, r24
 32c:	89 2f       	mov	r24, r25
 32e:	88 1f       	adc	r24, r24
 330:	99 0b       	sbc	r25, r25
 332:	91 95       	neg	r25
 334:	80 6a       	ori	r24, 0xA0	; 160
 336:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_SLA_W_ACK)
 33a:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 33e:	88 31       	cpi	r24, 0x18	; 24
 340:	a1 f4       	brne	.+40     	; 0x36a <EEWriteByte+0x5c>
	return EE_NOK;
	//send the rest of u16_addr
	TWI_Write((uinteg8_t)(u16_addr));
 342:	8c 2f       	mov	r24, r28
 344:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
 348:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 34c:	88 32       	cpi	r24, 0x28	; 40
 34e:	79 f4       	brne	.+30     	; 0x36e <EEWriteByte+0x60>
	return EE_NOK;
	//write byte to eeprom
	TWI_Write(u8_data);
 350:	81 2f       	mov	r24, r17
 352:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
 356:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 35a:	88 32       	cpi	r24, 0x28	; 40
 35c:	51 f4       	brne	.+20     	; 0x372 <EEWriteByte+0x64>
	return EE_NOK;
	TWI_Stop();
 35e:	0e 94 77 02 	call	0x4ee	; 0x4ee <TWI_Stop>
	return EE_OK;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	07 c0       	rjmp	.+14     	; 0x374 <EEWriteByte+0x66>

enu_EE_Error_t EEWriteByte(uinteg16_t u16_addr, uinteg8_t u8_data)
{
	TWI_Start();
	if (TWI_GetStatus() != TWI_ST_OK)
	return EE_NOK;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	05 c0       	rjmp	.+10     	; 0x374 <EEWriteByte+0x66>
	//select devise and send A2 A1 A0 address bits 
	TWI_Write((EEDEVADR)|(uinteg8_t)((u16_addr & 0x0700)>>7));
	if (TWI_GetStatus() != TWI_SLA_W_ACK)
	return EE_NOK;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	03 c0       	rjmp	.+6      	; 0x374 <EEWriteByte+0x66>
	//send the rest of u16_addr
	TWI_Write((uinteg8_t)(u16_addr));
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
	return EE_NOK;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	01 c0       	rjmp	.+2      	; 0x374 <EEWriteByte+0x66>
	//write byte to eeprom
	TWI_Write(u8_data);
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
	return EE_NOK;
 372:	81 e0       	ldi	r24, 0x01	; 1
	TWI_Stop();
	return EE_OK;
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	08 95       	ret

0000037c <EEReadByte>:
enu_EE_Error_t EEReadByte(uinteg16_t u16_addr, uinteg8_t *u8_data)
{
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
 38a:	8b 01       	movw	r16, r22
	TWI_Start();
 38c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Start>
	if (TWI_GetStatus() != TWI_ST_OK)
 390:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	91 f5       	brne	.+100    	; 0x3fc <EEReadByte+0x80>
	return EE_OK;
	//select devise and send A2 A1 A0 address bits
	TWI_Write((EEDEVADR)|((uinteg8_t)((u16_addr & 0x0700)>>7)));
 398:	7e 01       	movw	r14, r28
 39a:	ee 24       	eor	r14, r14
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	f8 22       	and	r15, r24
 3a0:	ee 0c       	add	r14, r14
 3a2:	ef 2c       	mov	r14, r15
 3a4:	ee 1c       	adc	r14, r14
 3a6:	ff 08       	sbc	r15, r15
 3a8:	f1 94       	neg	r15
 3aa:	8e 2d       	mov	r24, r14
 3ac:	80 6a       	ori	r24, 0xA0	; 160
 3ae:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_SLA_W_ACK)
 3b2:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 3b6:	88 31       	cpi	r24, 0x18	; 24
 3b8:	19 f5       	brne	.+70     	; 0x400 <__EEPROM_REGION_LENGTH__>
	return EE_NOK;
	//send the rest of address
	TWI_Write((uinteg8_t)(u16_addr));
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
 3c0:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 3c4:	88 32       	cpi	r24, 0x28	; 40
 3c6:	f1 f4       	brne	.+60     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	return EE_NOK;
	//send start
	TWI_Start();
 3c8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Start>
	if (TWI_GetStatus() != TWI_RST_OK)
 3cc:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 3d0:	80 31       	cpi	r24, 0x10	; 16
 3d2:	d1 f4       	brne	.+52     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	return EE_NOK;
	//select devise and send read bit
	TWI_Write((EEDEVADR)|((uinteg8_t)((u16_addr & 0x0700)>>7))|1);
 3d4:	8e 2d       	mov	r24, r14
 3d6:	81 6a       	ori	r24, 0xA1	; 161
 3d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWI_Write>
	if (TWI_GetStatus() != TWI_SLA_R_ACK)
 3dc:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 3e0:	80 34       	cpi	r24, 0x40	; 64
 3e2:	a1 f4       	brne	.+40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	return EE_NOK;
	*u8_data = TWI_ReadNACK();
 3e4:	0e 94 81 02 	call	0x502	; 0x502 <TWI_ReadNACK>
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 83       	st	Z, r24
	if (TWI_GetStatus() != TWI_MASTER_DATA_RX_NACK)
 3ec:	0e 94 88 02 	call	0x510	; 0x510 <TWI_GetStatus>
 3f0:	88 35       	cpi	r24, 0x58	; 88
 3f2:	71 f4       	brne	.+28     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	return EE_NOK;
	TWI_Stop();
 3f4:	0e 94 77 02 	call	0x4ee	; 0x4ee <TWI_Stop>
	return EE_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
}
enu_EE_Error_t EEReadByte(uinteg16_t u16_addr, uinteg8_t *u8_data)
{
	TWI_Start();
	if (TWI_GetStatus() != TWI_ST_OK)
	return EE_OK;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	//select devise and send A2 A1 A0 address bits
	TWI_Write((EEDEVADR)|((uinteg8_t)((u16_addr & 0x0700)>>7)));
	if (TWI_GetStatus() != TWI_SLA_W_ACK)
	return EE_NOK;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	//send the rest of address
	TWI_Write((uinteg8_t)(u16_addr));
	if (TWI_GetStatus() != TWI_MASTER_DATA_TX_ACK)
	return EE_NOK;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	05 c0       	rjmp	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	//send start
	TWI_Start();
	if (TWI_GetStatus() != TWI_RST_OK)
	return EE_NOK;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	03 c0       	rjmp	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	//select devise and send read bit
	TWI_Write((EEDEVADR)|((uinteg8_t)((u16_addr & 0x0700)>>7))|1);
	if (TWI_GetStatus() != TWI_SLA_R_ACK)
	return EE_NOK;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	*u8_data = TWI_ReadNACK();
	if (TWI_GetStatus() != TWI_MASTER_DATA_RX_NACK)
	return EE_NOK;
 410:	81 e0       	ldi	r24, 0x01	; 1
	TWI_Stop();
	return EE_OK;
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	08 95       	ret

00000420 <main>:
 * Author : Mohamed Salah Taman
 */ 
#include "../App/EE_APP/EE_APP.h"
int main(void)
{
	EE_APP_Init();
 420:	0e 94 8a 00 	call	0x114	; 0x114 <EE_APP_Init>
    while (1) 
    {

	  EE_APPControl();
 424:	0e 94 3d 01 	call	0x27a	; 0x27a <EE_APPControl>
 428:	fd cf       	rjmp	.-6      	; 0x424 <main+0x4>

0000042a <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	e1 f4       	brne	.+56     	; 0x466 <GPIO_Init+0x3c>
	{
		switch(_PORTX)
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	59 f0       	breq	.+22     	; 0x448 <GPIO_Init+0x1e>
 432:	28 f0       	brcs	.+10     	; 0x43e <GPIO_Init+0x14>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	69 f0       	breq	.+26     	; 0x452 <GPIO_Init+0x28>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	81 f0       	breq	.+32     	; 0x45c <GPIO_Init+0x32>
 43c:	46 c0       	rjmp	.+140    	; 0x4ca <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
 43e:	8a b3       	in	r24, 0x1a	; 26
 440:	68 2b       	or	r22, r24
 442:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 444:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
 446:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
 448:	87 b3       	in	r24, 0x17	; 23
 44a:	68 2b       	or	r22, r24
 44c:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 44e:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
 450:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
 452:	84 b3       	in	r24, 0x14	; 20
 454:	68 2b       	or	r22, r24
 456:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 458:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 45a:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 45c:	81 b3       	in	r24, 0x11	; 17
 45e:	68 2b       	or	r22, r24
 460:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 462:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 464:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 466:	41 11       	cpse	r20, r1
 468:	32 c0       	rjmp	.+100    	; 0x4ce <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	81 f0       	breq	.+32     	; 0x48e <GPIO_Init+0x64>
 46e:	28 f0       	brcs	.+10     	; 0x47a <GPIO_Init+0x50>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	b9 f0       	breq	.+46     	; 0x4a2 <GPIO_Init+0x78>
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	f9 f0       	breq	.+62     	; 0x4b6 <GPIO_Init+0x8c>
 478:	2c c0       	rjmp	.+88     	; 0x4d2 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 47a:	8a b3       	in	r24, 0x1a	; 26
 47c:	96 2f       	mov	r25, r22
 47e:	90 95       	com	r25
 480:	89 23       	and	r24, r25
 482:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 484:	8b b3       	in	r24, 0x1b	; 27
 486:	68 2b       	or	r22, r24
 488:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 48a:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 48c:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 48e:	87 b3       	in	r24, 0x17	; 23
 490:	96 2f       	mov	r25, r22
 492:	90 95       	com	r25
 494:	89 23       	and	r24, r25
 496:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 498:	88 b3       	in	r24, 0x18	; 24
 49a:	68 2b       	or	r22, r24
 49c:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 49e:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 4a0:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 4a2:	84 b3       	in	r24, 0x14	; 20
 4a4:	96 2f       	mov	r25, r22
 4a6:	90 95       	com	r25
 4a8:	89 23       	and	r24, r25
 4aa:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 4ac:	85 b3       	in	r24, 0x15	; 21
 4ae:	68 2b       	or	r22, r24
 4b0:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 4b2:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 4b4:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 4b6:	81 b3       	in	r24, 0x11	; 17
 4b8:	96 2f       	mov	r25, r22
 4ba:	90 95       	com	r25
 4bc:	89 23       	and	r24, r25
 4be:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 4c0:	82 b3       	in	r24, 0x12	; 18
 4c2:	68 2b       	or	r22, r24
 4c4:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 4c6:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 4c8:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 4d4:	08 95       	ret

000004d6 <TWI_Init>:
{
	MASK_BITS(TWCR,((1<<TWINT) | (1<<TWEA) |(1<<TWEN)));
	/*wait until operation complete*/
	while (GET_BIT(TWCR,TWINT) == 0);
	return TWDR;
}
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	86 bf       	out	0x36, r24	; 54
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	80 b9       	out	0x00, r24	; 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret

000004e2 <TWI_Start>:
 4e2:	84 ea       	ldi	r24, 0xA4	; 164
 4e4:	86 bf       	out	0x36, r24	; 54
 4e6:	06 b6       	in	r0, 0x36	; 54
 4e8:	07 fe       	sbrs	r0, 7
 4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <TWI_Start+0x4>
 4ec:	08 95       	ret

000004ee <TWI_Stop>:
 4ee:	84 e9       	ldi	r24, 0x94	; 148
 4f0:	86 bf       	out	0x36, r24	; 54
 4f2:	08 95       	ret

000004f4 <TWI_Write>:
 4f4:	83 b9       	out	0x03, r24	; 3
 4f6:	84 e8       	ldi	r24, 0x84	; 132
 4f8:	86 bf       	out	0x36, r24	; 54
 4fa:	06 b6       	in	r0, 0x36	; 54
 4fc:	07 fe       	sbrs	r0, 7
 4fe:	fd cf       	rjmp	.-6      	; 0x4fa <TWI_Write+0x6>
 500:	08 95       	ret

00000502 <TWI_ReadNACK>:
//read byte with NACK
uinteg8_t TWI_ReadNACK(void)
{
	MASK_BITS(TWCR,((1<<TWINT) |(1<<TWEN)));	
 502:	84 e8       	ldi	r24, 0x84	; 132
 504:	86 bf       	out	0x36, r24	; 54
	/*wait until operation complete*/
	while (GET_BIT(TWCR,TWINT) == 0);
 506:	06 b6       	in	r0, 0x36	; 54
 508:	07 fe       	sbrs	r0, 7
 50a:	fd cf       	rjmp	.-6      	; 0x506 <TWI_ReadNACK+0x4>

	return TWDR;
 50c:	83 b1       	in	r24, 0x03	; 3
}
 50e:	08 95       	ret

00000510 <TWI_GetStatus>:
uinteg8_t TWI_GetStatus(void)
{
	uinteg8_t u8_status;
	//mask status
	u8_status = TWSR & 0xF8;
 510:	81 b1       	in	r24, 0x01	; 1
	return u8_status;
}
 512:	88 7f       	andi	r24, 0xF8	; 248
 514:	08 95       	ret

00000516 <__vector_11>:
	}
	return TIMER_ERROR_OK;
}

void __vector_11(void)
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	gcallBack();
 538:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <gcallBack>
 53c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <gcallBack+0x1>
 540:	09 95       	icall
}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_10>:
void __vector_10(void)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
	
}
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <USART_Init>:

	
}
void USART_TX_Int_CallBack_fun(void (*ptr_To_Fun)(void)){
	
	ptr_To_TX_Int_fun=ptr_To_Fun;
 578:	fc 01       	movw	r30, r24
 57a:	80 81       	ld	r24, Z
 57c:	81 11       	cpse	r24, r1
 57e:	13 c0       	rjmp	.+38     	; 0x5a6 <USART_Init+0x2e>
 580:	81 81       	ldd	r24, Z+1	; 0x01
 582:	81 11       	cpse	r24, r1
 584:	07 c0       	rjmp	.+14     	; 0x594 <USART_Init+0x1c>
 586:	83 e3       	ldi	r24, 0x33	; 51
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <MYUBRR+0x1>
 58e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <MYUBRR>
 592:	11 c0       	rjmp	.+34     	; 0x5b6 <USART_Init+0x3e>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	79 f4       	brne	.+30     	; 0x5b6 <USART_Init+0x3e>
 598:	87 e6       	ldi	r24, 0x67	; 103
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <MYUBRR+0x1>
 5a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <MYUBRR>
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <USART_Init+0x3e>
 5a6:	80 34       	cpi	r24, 0x40	; 64
 5a8:	31 f4       	brne	.+12     	; 0x5b6 <USART_Init+0x3e>
 5aa:	8f e9       	ldi	r24, 0x9F	; 159
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <MYUBRR+0x1>
 5b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <MYUBRR>
 5b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MYUBRR>
 5ba:	89 b9       	out	0x09, r24	; 9
 5bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <MYUBRR+0x1>
 5c0:	80 bd       	out	0x20, r24	; 32
 5c2:	82 81       	ldd	r24, Z+2	; 0x02
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	11 f4       	brne	.+4      	; 0x5cc <USART_Init+0x54>
 5c8:	53 9a       	sbi	0x0a, 3	; 10
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <USART_Init+0x5a>
 5cc:	81 11       	cpse	r24, r1
 5ce:	33 c0       	rjmp	.+102    	; 0x636 <USART_Init+0xbe>
 5d0:	53 98       	cbi	0x0a, 3	; 10
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	11 f4       	brne	.+4      	; 0x5dc <USART_Init+0x64>
 5d8:	54 9a       	sbi	0x0a, 4	; 10
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <USART_Init+0x6c>
 5dc:	82 81       	ldd	r24, Z+2	; 0x02
 5de:	81 11       	cpse	r24, r1
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <USART_Init+0x6c>
 5e2:	54 98       	cbi	0x0a, 4	; 10
 5e4:	84 81       	ldd	r24, Z+4	; 0x04
 5e6:	86 30       	cpi	r24, 0x06	; 6
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <USART_Init+0x7a>
 5ea:	80 b5       	in	r24, 0x20	; 32
 5ec:	86 68       	ori	r24, 0x86	; 134
 5ee:	80 bd       	out	0x20, r24	; 32
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <USART_Init+0x84>
 5f2:	84 30       	cpi	r24, 0x04	; 4
 5f4:	19 f4       	brne	.+6      	; 0x5fc <USART_Init+0x84>
 5f6:	80 b5       	in	r24, 0x20	; 32
 5f8:	86 60       	ori	r24, 0x06	; 6
 5fa:	80 bd       	out	0x20, r24	; 32
 5fc:	81 85       	ldd	r24, Z+9	; 0x09
 5fe:	80 38       	cpi	r24, 0x80	; 128
 600:	29 f4       	brne	.+10     	; 0x60c <USART_Init+0x94>
 602:	57 9a       	sbi	0x0a, 7	; 10
 604:	8f b7       	in	r24, 0x3f	; 63
 606:	80 68       	ori	r24, 0x80	; 128
 608:	8f bf       	out	0x3f, r24	; 63
 60a:	03 c0       	rjmp	.+6      	; 0x612 <USART_Init+0x9a>
 60c:	81 11       	cpse	r24, r1
 60e:	01 c0       	rjmp	.+2      	; 0x612 <USART_Init+0x9a>
 610:	57 98       	cbi	0x0a, 7	; 10
 612:	80 85       	ldd	r24, Z+8	; 0x08
 614:	80 34       	cpi	r24, 0x40	; 64
 616:	29 f4       	brne	.+10     	; 0x622 <USART_Init+0xaa>
 618:	56 9a       	sbi	0x0a, 6	; 10
 61a:	8f b7       	in	r24, 0x3f	; 63
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	8f bf       	out	0x3f, r24	; 63
 620:	03 c0       	rjmp	.+6      	; 0x628 <USART_Init+0xb0>
 622:	81 11       	cpse	r24, r1
 624:	01 c0       	rjmp	.+2      	; 0x628 <USART_Init+0xb0>
 626:	56 98       	cbi	0x0a, 6	; 10
 628:	8b eb       	ldi	r24, 0xBB	; 187
 62a:	93 e0       	ldi	r25, 0x03	; 3
 62c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ptr_To_RX_Int_fun+0x1>
 630:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ptr_To_RX_Int_fun>
 634:	08 95       	ret
 636:	83 81       	ldd	r24, Z+3	; 0x03
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	a1 f6       	brne	.-88     	; 0x5e4 <USART_Init+0x6c>
 63c:	cd cf       	rjmp	.-102    	; 0x5d8 <USART_Init+0x60>

0000063e <USART_Transmit>:
 63e:	5d 9b       	sbis	0x0b, 5	; 11
 640:	fe cf       	rjmp	.-4      	; 0x63e <USART_Transmit>
 642:	8c b9       	out	0x0c, r24	; 12
 644:	08 95       	ret

00000646 <USART_Receive>:
 646:	5f 9b       	sbis	0x0b, 7	; 11
 648:	fe cf       	rjmp	.-4      	; 0x646 <USART_Receive>
 64a:	8c b1       	in	r24, 0x0c	; 12
 64c:	08 95       	ret

0000064e <USART_Send_Packet>:
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	8c 01       	movw	r16, r24
 658:	d6 2f       	mov	r29, r22
 65a:	fc 01       	movw	r30, r24
 65c:	80 81       	ld	r24, Z
 65e:	68 17       	cp	r22, r24
 660:	59 f0       	breq	.+22     	; 0x678 <USART_Send_Packet+0x2a>
 662:	c0 e0       	ldi	r28, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
 66a:	cf 5f       	subi	r28, 0xFF	; 255
 66c:	f8 01       	movw	r30, r16
 66e:	ec 0f       	add	r30, r28
 670:	f1 1d       	adc	r31, r1
 672:	80 81       	ld	r24, Z
 674:	8d 13       	cpse	r24, r29
 676:	f6 cf       	rjmp	.-20     	; 0x664 <USART_Send_Packet+0x16>
 678:	8d 2f       	mov	r24, r29
 67a:	0e 94 1f 03 	call	0x63e	; 0x63e <USART_Transmit>
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	08 95       	ret

00000688 <USART_Recieve_Packet>:
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	c9 f0       	breq	.+50     	; 0x6ca <USART_Recieve_Packet+0x42>
 698:	d6 2f       	mov	r29, r22
 69a:	7c 01       	movw	r14, r24
 69c:	0e 94 23 03 	call	0x646	; 0x646 <USART_Receive>
 6a0:	f7 01       	movw	r30, r14
 6a2:	80 83       	st	Z, r24
 6a4:	8d 17       	cp	r24, r29
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <USART_Recieve_Packet+0x38>
 6a8:	c0 e0       	ldi	r28, 0x00	; 0
 6aa:	cf 5f       	subi	r28, 0xFF	; 255
 6ac:	87 01       	movw	r16, r14
 6ae:	0c 0f       	add	r16, r28
 6b0:	11 1d       	adc	r17, r1
 6b2:	0e 94 23 03 	call	0x646	; 0x646 <USART_Receive>
 6b6:	f8 01       	movw	r30, r16
 6b8:	80 83       	st	Z, r24
 6ba:	d8 13       	cpse	r29, r24
 6bc:	f6 cf       	rjmp	.-20     	; 0x6aa <USART_Recieve_Packet+0x22>
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <USART_Recieve_Packet+0x3a>
 6c0:	87 01       	movw	r16, r14
 6c2:	f8 01       	movw	r30, r16
 6c4:	10 82       	st	Z, r1
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <USART_Recieve_Packet+0x44>
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	08 95       	ret

000006da <__vector_13>:
	
}
/*RX ISR*/
void __vector_13(void)
{
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 93       	push	r18
 6e6:	3f 93       	push	r19
 6e8:	4f 93       	push	r20
 6ea:	5f 93       	push	r21
 6ec:	6f 93       	push	r22
 6ee:	7f 93       	push	r23
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	af 93       	push	r26
 6f6:	bf 93       	push	r27
 6f8:	ef 93       	push	r30
 6fa:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
 6fc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <ptr_To_RX_Int_fun>
 700:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <ptr_To_RX_Int_fun+0x1>
 704:	09 95       	icall
}
 706:	ff 91       	pop	r31
 708:	ef 91       	pop	r30
 70a:	bf 91       	pop	r27
 70c:	af 91       	pop	r26
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	7f 91       	pop	r23
 714:	6f 91       	pop	r22
 716:	5f 91       	pop	r21
 718:	4f 91       	pop	r20
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
 728:	1f 92       	push	r1
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	0f 92       	push	r0
 730:	11 24       	eor	r1, r1
 732:	2f 93       	push	r18
 734:	3f 93       	push	r19
 736:	4f 93       	push	r20
 738:	5f 93       	push	r21
 73a:	6f 93       	push	r22
 73c:	7f 93       	push	r23
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
 74a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <ptr_To_TX_Int_fun>
 74e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <ptr_To_TX_Int_fun+0x1>
 752:	09 95       	icall
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <USART_RX_ISR>:
													.STOP_BITS_NUM=USART_1_STOP_BIT             ,
													.TX_INTERRUPT=USART_TX_INTERRUPT_DISABLE    ,
													.RX_INTERRUPT=USART_RX_INTERRUPT_ENABLE    ,
													.UDR_INTERRUPT=USART_UDR_INTERRUPT_DISABLE  };
void USART_RX_ISR(void)
{
 776:	08 95       	ret

00000778 <__subsf3>:
 778:	50 58       	subi	r21, 0x80	; 128

0000077a <__addsf3>:
 77a:	bb 27       	eor	r27, r27
 77c:	aa 27       	eor	r26, r26
 77e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3x>
 782:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>
 786:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_pscA>
 78a:	38 f0       	brcs	.+14     	; 0x79a <__addsf3+0x20>
 78c:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3+0x20>
 792:	39 f4       	brne	.+14     	; 0x7a2 <__addsf3+0x28>
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	19 f4       	brne	.+6      	; 0x79e <__addsf3+0x24>
 798:	26 f4       	brtc	.+8      	; 0x7a2 <__addsf3+0x28>
 79a:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 79e:	0e f4       	brtc	.+2      	; 0x7a2 <__addsf3+0x28>
 7a0:	e0 95       	com	r30
 7a2:	e7 fb       	bst	r30, 7
 7a4:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>

000007a8 <__addsf3x>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_split3>
 7ae:	58 f3       	brcs	.-42     	; 0x786 <__addsf3+0xc>
 7b0:	ba 17       	cp	r27, r26
 7b2:	62 07       	cpc	r22, r18
 7b4:	73 07       	cpc	r23, r19
 7b6:	84 07       	cpc	r24, r20
 7b8:	95 07       	cpc	r25, r21
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__addsf3x+0x1c>
 7bc:	79 f4       	brne	.+30     	; 0x7dc <__addsf3x+0x34>
 7be:	a6 f5       	brtc	.+104    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7c0:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_zero>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3x+0x20>
 7c6:	e0 95       	com	r30
 7c8:	0b 2e       	mov	r0, r27
 7ca:	ba 2f       	mov	r27, r26
 7cc:	a0 2d       	mov	r26, r0
 7ce:	0b 01       	movw	r0, r22
 7d0:	b9 01       	movw	r22, r18
 7d2:	90 01       	movw	r18, r0
 7d4:	0c 01       	movw	r0, r24
 7d6:	ca 01       	movw	r24, r20
 7d8:	a0 01       	movw	r20, r0
 7da:	11 24       	eor	r1, r1
 7dc:	ff 27       	eor	r31, r31
 7de:	59 1b       	sub	r21, r25
 7e0:	99 f0       	breq	.+38     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e2:	59 3f       	cpi	r21, 0xF9	; 249
 7e4:	50 f4       	brcc	.+20     	; 0x7fa <__addsf3x+0x52>
 7e6:	50 3e       	cpi	r21, 0xE0	; 224
 7e8:	68 f1       	brcs	.+90     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7ea:	1a 16       	cp	r1, r26
 7ec:	f0 40       	sbci	r31, 0x00	; 0
 7ee:	a2 2f       	mov	r26, r18
 7f0:	23 2f       	mov	r18, r19
 7f2:	34 2f       	mov	r19, r20
 7f4:	44 27       	eor	r20, r20
 7f6:	58 5f       	subi	r21, 0xF8	; 248
 7f8:	f3 cf       	rjmp	.-26     	; 0x7e0 <__addsf3x+0x38>
 7fa:	46 95       	lsr	r20
 7fc:	37 95       	ror	r19
 7fe:	27 95       	ror	r18
 800:	a7 95       	ror	r26
 802:	f0 40       	sbci	r31, 0x00	; 0
 804:	53 95       	inc	r21
 806:	c9 f7       	brne	.-14     	; 0x7fa <__addsf3x+0x52>
 808:	7e f4       	brtc	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	1f 16       	cp	r1, r31
 80c:	ba 0b       	sbc	r27, r26
 80e:	62 0b       	sbc	r22, r18
 810:	73 0b       	sbc	r23, r19
 812:	84 0b       	sbc	r24, r20
 814:	ba f0       	brmi	.+46     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 816:	91 50       	subi	r25, 0x01	; 1
 818:	a1 f0       	breq	.+40     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 81a:	ff 0f       	add	r31, r31
 81c:	bb 1f       	adc	r27, r27
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	c2 f7       	brpl	.-16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 826:	0e c0       	rjmp	.+28     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 828:	ba 0f       	add	r27, r26
 82a:	62 1f       	adc	r22, r18
 82c:	73 1f       	adc	r23, r19
 82e:	84 1f       	adc	r24, r20
 830:	48 f4       	brcc	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 832:	87 95       	ror	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	08 f0       	brcs	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	b0 cf       	rjmp	.-160    	; 0x7a2 <__addsf3+0x28>
 842:	93 95       	inc	r25
 844:	88 0f       	add	r24, r24
 846:	08 f0       	brcs	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	99 27       	eor	r25, r25
 84a:	ee 0f       	add	r30, r30
 84c:	97 95       	ror	r25
 84e:	87 95       	ror	r24
 850:	08 95       	ret

00000852 <__fixunssfsi>:
 852:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_splitA>
 856:	88 f0       	brcs	.+34     	; 0x87a <__stack+0x1b>
 858:	9f 57       	subi	r25, 0x7F	; 127
 85a:	98 f0       	brcs	.+38     	; 0x882 <__stack+0x23>
 85c:	b9 2f       	mov	r27, r25
 85e:	99 27       	eor	r25, r25
 860:	b7 51       	subi	r27, 0x17	; 23
 862:	b0 f0       	brcs	.+44     	; 0x890 <__stack+0x31>
 864:	e1 f0       	breq	.+56     	; 0x89e <__stack+0x3f>
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	1a f0       	brmi	.+6      	; 0x876 <__stack+0x17>
 870:	ba 95       	dec	r27
 872:	c9 f7       	brne	.-14     	; 0x866 <__stack+0x7>
 874:	14 c0       	rjmp	.+40     	; 0x89e <__stack+0x3f>
 876:	b1 30       	cpi	r27, 0x01	; 1
 878:	91 f0       	breq	.+36     	; 0x89e <__stack+0x3f>
 87a:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_zero>
 87e:	b1 e0       	ldi	r27, 0x01	; 1
 880:	08 95       	ret
 882:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_zero>
 886:	67 2f       	mov	r22, r23
 888:	78 2f       	mov	r23, r24
 88a:	88 27       	eor	r24, r24
 88c:	b8 5f       	subi	r27, 0xF8	; 248
 88e:	39 f0       	breq	.+14     	; 0x89e <__stack+0x3f>
 890:	b9 3f       	cpi	r27, 0xF9	; 249
 892:	cc f3       	brlt	.-14     	; 0x886 <__stack+0x27>
 894:	86 95       	lsr	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b3 95       	inc	r27
 89c:	d9 f7       	brne	.-10     	; 0x894 <__stack+0x35>
 89e:	3e f4       	brtc	.+14     	; 0x8ae <__stack+0x4f>
 8a0:	90 95       	com	r25
 8a2:	80 95       	com	r24
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	08 95       	ret

000008b0 <__floatunsisf>:
 8b0:	e8 94       	clt
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <__floatsisf+0x12>

000008b4 <__floatsisf>:
 8b4:	97 fb       	bst	r25, 7
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__floatsisf+0x12>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	99 23       	and	r25, r25
 8c8:	a9 f0       	breq	.+42     	; 0x8f4 <__floatsisf+0x40>
 8ca:	f9 2f       	mov	r31, r25
 8cc:	96 e9       	ldi	r25, 0x96	; 150
 8ce:	bb 27       	eor	r27, r27
 8d0:	93 95       	inc	r25
 8d2:	f6 95       	lsr	r31
 8d4:	87 95       	ror	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	b7 95       	ror	r27
 8dc:	f1 11       	cpse	r31, r1
 8de:	f8 cf       	rjmp	.-16     	; 0x8d0 <__floatsisf+0x1c>
 8e0:	fa f4       	brpl	.+62     	; 0x920 <__floatsisf+0x6c>
 8e2:	bb 0f       	add	r27, r27
 8e4:	11 f4       	brne	.+4      	; 0x8ea <__floatsisf+0x36>
 8e6:	60 ff       	sbrs	r22, 0
 8e8:	1b c0       	rjmp	.+54     	; 0x920 <__floatsisf+0x6c>
 8ea:	6f 5f       	subi	r22, 0xFF	; 255
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <__floatsisf+0x6c>
 8f4:	88 23       	and	r24, r24
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__floatsisf+0x48>
 8f8:	96 e9       	ldi	r25, 0x96	; 150
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__floatsisf+0x6a>
 8fc:	77 23       	and	r23, r23
 8fe:	21 f0       	breq	.+8      	; 0x908 <__floatsisf+0x54>
 900:	9e e8       	ldi	r25, 0x8E	; 142
 902:	87 2f       	mov	r24, r23
 904:	76 2f       	mov	r23, r22
 906:	05 c0       	rjmp	.+10     	; 0x912 <__floatsisf+0x5e>
 908:	66 23       	and	r22, r22
 90a:	71 f0       	breq	.+28     	; 0x928 <__floatsisf+0x74>
 90c:	96 e8       	ldi	r25, 0x86	; 134
 90e:	86 2f       	mov	r24, r22
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	2a f0       	brmi	.+10     	; 0x920 <__floatsisf+0x6c>
 916:	9a 95       	dec	r25
 918:	66 0f       	add	r22, r22
 91a:	77 1f       	adc	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	da f7       	brpl	.-10     	; 0x916 <__floatsisf+0x62>
 920:	88 0f       	add	r24, r24
 922:	96 95       	lsr	r25
 924:	87 95       	ror	r24
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__fp_inf>:
 92a:	97 f9       	bld	r25, 7
 92c:	9f 67       	ori	r25, 0x7F	; 127
 92e:	80 e8       	ldi	r24, 0x80	; 128
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	08 95       	ret

00000936 <__fp_nan>:
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	80 ec       	ldi	r24, 0xC0	; 192
 93a:	08 95       	ret

0000093c <__fp_pscA>:
 93c:	00 24       	eor	r0, r0
 93e:	0a 94       	dec	r0
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	18 06       	cpc	r1, r24
 946:	09 06       	cpc	r0, r25
 948:	08 95       	ret

0000094a <__fp_pscB>:
 94a:	00 24       	eor	r0, r0
 94c:	0a 94       	dec	r0
 94e:	12 16       	cp	r1, r18
 950:	13 06       	cpc	r1, r19
 952:	14 06       	cpc	r1, r20
 954:	05 06       	cpc	r0, r21
 956:	08 95       	ret

00000958 <__fp_round>:
 958:	09 2e       	mov	r0, r25
 95a:	03 94       	inc	r0
 95c:	00 0c       	add	r0, r0
 95e:	11 f4       	brne	.+4      	; 0x964 <__fp_round+0xc>
 960:	88 23       	and	r24, r24
 962:	52 f0       	brmi	.+20     	; 0x978 <__fp_round+0x20>
 964:	bb 0f       	add	r27, r27
 966:	40 f4       	brcc	.+16     	; 0x978 <__fp_round+0x20>
 968:	bf 2b       	or	r27, r31
 96a:	11 f4       	brne	.+4      	; 0x970 <__fp_round+0x18>
 96c:	60 ff       	sbrs	r22, 0
 96e:	04 c0       	rjmp	.+8      	; 0x978 <__fp_round+0x20>
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	08 95       	ret

0000097a <__fp_split3>:
 97a:	57 fd       	sbrc	r21, 7
 97c:	90 58       	subi	r25, 0x80	; 128
 97e:	44 0f       	add	r20, r20
 980:	55 1f       	adc	r21, r21
 982:	59 f0       	breq	.+22     	; 0x99a <__fp_splitA+0x10>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	71 f0       	breq	.+28     	; 0x9a4 <__fp_splitA+0x1a>
 988:	47 95       	ror	r20

0000098a <__fp_splitA>:
 98a:	88 0f       	add	r24, r24
 98c:	97 fb       	bst	r25, 7
 98e:	99 1f       	adc	r25, r25
 990:	61 f0       	breq	.+24     	; 0x9aa <__fp_splitA+0x20>
 992:	9f 3f       	cpi	r25, 0xFF	; 255
 994:	79 f0       	breq	.+30     	; 0x9b4 <__fp_splitA+0x2a>
 996:	87 95       	ror	r24
 998:	08 95       	ret
 99a:	12 16       	cp	r1, r18
 99c:	13 06       	cpc	r1, r19
 99e:	14 06       	cpc	r1, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	f2 cf       	rjmp	.-28     	; 0x988 <__fp_split3+0xe>
 9a4:	46 95       	lsr	r20
 9a6:	f1 df       	rcall	.-30     	; 0x98a <__fp_splitA>
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__fp_splitA+0x30>
 9aa:	16 16       	cp	r1, r22
 9ac:	17 06       	cpc	r1, r23
 9ae:	18 06       	cpc	r1, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	f1 cf       	rjmp	.-30     	; 0x996 <__fp_splitA+0xc>
 9b4:	86 95       	lsr	r24
 9b6:	71 05       	cpc	r23, r1
 9b8:	61 05       	cpc	r22, r1
 9ba:	08 94       	sec
 9bc:	08 95       	ret

000009be <__fp_zero>:
 9be:	e8 94       	clt

000009c0 <__fp_szero>:
 9c0:	bb 27       	eor	r27, r27
 9c2:	66 27       	eor	r22, r22
 9c4:	77 27       	eor	r23, r23
 9c6:	cb 01       	movw	r24, r22
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret

000009cc <__mulsf3>:
 9cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 9d0:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>
 9d4:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_pscA>
 9d8:	38 f0       	brcs	.+14     	; 0x9e8 <__mulsf3+0x1c>
 9da:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscB>
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__mulsf3+0x1c>
 9e0:	95 23       	and	r25, r21
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__mulsf3+0x1c>
 9e4:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 9e8:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>

000009f2 <__mulsf3x>:
 9f2:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_split3>
 9f6:	70 f3       	brcs	.-36     	; 0x9d4 <__mulsf3+0x8>

000009f8 <__mulsf3_pse>:
 9f8:	95 9f       	mul	r25, r21
 9fa:	c1 f3       	breq	.-16     	; 0x9ec <__mulsf3+0x20>
 9fc:	95 0f       	add	r25, r21
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	55 1f       	adc	r21, r21
 a02:	62 9f       	mul	r22, r18
 a04:	f0 01       	movw	r30, r0
 a06:	72 9f       	mul	r23, r18
 a08:	bb 27       	eor	r27, r27
 a0a:	f0 0d       	add	r31, r0
 a0c:	b1 1d       	adc	r27, r1
 a0e:	63 9f       	mul	r22, r19
 a10:	aa 27       	eor	r26, r26
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	aa 1f       	adc	r26, r26
 a18:	64 9f       	mul	r22, r20
 a1a:	66 27       	eor	r22, r22
 a1c:	b0 0d       	add	r27, r0
 a1e:	a1 1d       	adc	r26, r1
 a20:	66 1f       	adc	r22, r22
 a22:	82 9f       	mul	r24, r18
 a24:	22 27       	eor	r18, r18
 a26:	b0 0d       	add	r27, r0
 a28:	a1 1d       	adc	r26, r1
 a2a:	62 1f       	adc	r22, r18
 a2c:	73 9f       	mul	r23, r19
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	83 9f       	mul	r24, r19
 a36:	a0 0d       	add	r26, r0
 a38:	61 1d       	adc	r22, r1
 a3a:	22 1f       	adc	r18, r18
 a3c:	74 9f       	mul	r23, r20
 a3e:	33 27       	eor	r19, r19
 a40:	a0 0d       	add	r26, r0
 a42:	61 1d       	adc	r22, r1
 a44:	23 1f       	adc	r18, r19
 a46:	84 9f       	mul	r24, r20
 a48:	60 0d       	add	r22, r0
 a4a:	21 1d       	adc	r18, r1
 a4c:	82 2f       	mov	r24, r18
 a4e:	76 2f       	mov	r23, r22
 a50:	6a 2f       	mov	r22, r26
 a52:	11 24       	eor	r1, r1
 a54:	9f 57       	subi	r25, 0x7F	; 127
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	9a f0       	brmi	.+38     	; 0xa80 <__mulsf3_pse+0x88>
 a5a:	f1 f0       	breq	.+60     	; 0xa98 <__mulsf3_pse+0xa0>
 a5c:	88 23       	and	r24, r24
 a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	bb 1f       	adc	r27, r27
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
 a72:	9e 3f       	cpi	r25, 0xFE	; 254
 a74:	51 05       	cpc	r21, r1
 a76:	80 f0       	brcs	.+32     	; 0xa98 <__mulsf3_pse+0xa0>
 a78:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 a7c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	e4 f3       	brlt	.-8      	; 0xa7c <__mulsf3_pse+0x84>
 a84:	98 3e       	cpi	r25, 0xE8	; 232
 a86:	d4 f3       	brlt	.-12     	; 0xa7c <__mulsf3_pse+0x84>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	e7 95       	ror	r30
 a94:	9f 5f       	subi	r25, 0xFF	; 255
 a96:	c1 f7       	brne	.-16     	; 0xa88 <__mulsf3_pse+0x90>
 a98:	fe 2b       	or	r31, r30
 a9a:	88 0f       	add	r24, r24
 a9c:	91 1d       	adc	r25, r1
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

00000aa6 <pow>:
 aa6:	fa 01       	movw	r30, r20
 aa8:	ee 0f       	add	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	30 96       	adiw	r30, 0x00	; 0
 aae:	21 05       	cpc	r18, r1
 ab0:	31 05       	cpc	r19, r1
 ab2:	a1 f1       	breq	.+104    	; 0xb1c <pow+0x76>
 ab4:	61 15       	cp	r22, r1
 ab6:	71 05       	cpc	r23, r1
 ab8:	61 f4       	brne	.+24     	; 0xad2 <pow+0x2c>
 aba:	80 38       	cpi	r24, 0x80	; 128
 abc:	bf e3       	ldi	r27, 0x3F	; 63
 abe:	9b 07       	cpc	r25, r27
 ac0:	49 f1       	breq	.+82     	; 0xb14 <pow+0x6e>
 ac2:	68 94       	set
 ac4:	90 38       	cpi	r25, 0x80	; 128
 ac6:	81 05       	cpc	r24, r1
 ac8:	61 f0       	breq	.+24     	; 0xae2 <pow+0x3c>
 aca:	80 38       	cpi	r24, 0x80	; 128
 acc:	bf ef       	ldi	r27, 0xFF	; 255
 ace:	9b 07       	cpc	r25, r27
 ad0:	41 f0       	breq	.+16     	; 0xae2 <pow+0x3c>
 ad2:	99 23       	and	r25, r25
 ad4:	4a f5       	brpl	.+82     	; 0xb28 <pow+0x82>
 ad6:	ff 3f       	cpi	r31, 0xFF	; 255
 ad8:	e1 05       	cpc	r30, r1
 ada:	31 05       	cpc	r19, r1
 adc:	21 05       	cpc	r18, r1
 ade:	19 f1       	breq	.+70     	; 0xb26 <pow+0x80>
 ae0:	e8 94       	clt
 ae2:	08 94       	sec
 ae4:	e7 95       	ror	r30
 ae6:	d9 01       	movw	r26, r18
 ae8:	aa 23       	and	r26, r26
 aea:	29 f4       	brne	.+10     	; 0xaf6 <pow+0x50>
 aec:	ab 2f       	mov	r26, r27
 aee:	be 2f       	mov	r27, r30
 af0:	f8 5f       	subi	r31, 0xF8	; 248
 af2:	d0 f3       	brcs	.-12     	; 0xae8 <pow+0x42>
 af4:	10 c0       	rjmp	.+32     	; 0xb16 <pow+0x70>
 af6:	ff 5f       	subi	r31, 0xFF	; 255
 af8:	70 f4       	brcc	.+28     	; 0xb16 <pow+0x70>
 afa:	a6 95       	lsr	r26
 afc:	e0 f7       	brcc	.-8      	; 0xaf6 <pow+0x50>
 afe:	f7 39       	cpi	r31, 0x97	; 151
 b00:	50 f0       	brcs	.+20     	; 0xb16 <pow+0x70>
 b02:	19 f0       	breq	.+6      	; 0xb0a <pow+0x64>
 b04:	ff 3a       	cpi	r31, 0xAF	; 175
 b06:	38 f4       	brcc	.+14     	; 0xb16 <pow+0x70>
 b08:	9f 77       	andi	r25, 0x7F	; 127
 b0a:	9f 93       	push	r25
 b0c:	0d d0       	rcall	.+26     	; 0xb28 <pow+0x82>
 b0e:	0f 90       	pop	r0
 b10:	07 fc       	sbrc	r0, 7
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	08 95       	ret
 b16:	46 f0       	brts	.+16     	; 0xb28 <pow+0x82>
 b18:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	80 e8       	ldi	r24, 0x80	; 128
 b22:	9f e3       	ldi	r25, 0x3F	; 63
 b24:	08 95       	ret
 b26:	4f e7       	ldi	r20, 0x7F	; 127
 b28:	9f 77       	andi	r25, 0x7F	; 127
 b2a:	5f 93       	push	r21
 b2c:	4f 93       	push	r20
 b2e:	3f 93       	push	r19
 b30:	2f 93       	push	r18
 b32:	0e 94 4e 06 	call	0xc9c	; 0xc9c <log>
 b36:	2f 91       	pop	r18
 b38:	3f 91       	pop	r19
 b3a:	4f 91       	pop	r20
 b3c:	5f 91       	pop	r21
 b3e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 b42:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <exp>
 b46:	29 f4       	brne	.+10     	; 0xb52 <pow+0xac>
 b48:	16 f0       	brts	.+4      	; 0xb4e <pow+0xa8>
 b4a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 b4e:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_zero>
 b52:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>

00000b56 <exp>:
 b56:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_splitA>
 b5a:	a8 f3       	brcs	.-22     	; 0xb46 <pow+0xa0>
 b5c:	96 38       	cpi	r25, 0x86	; 134
 b5e:	a0 f7       	brcc	.-24     	; 0xb48 <pow+0xa2>
 b60:	07 f8       	bld	r0, 7
 b62:	0f 92       	push	r0
 b64:	e8 94       	clt
 b66:	2b e3       	ldi	r18, 0x3B	; 59
 b68:	3a ea       	ldi	r19, 0xAA	; 170
 b6a:	48 eb       	ldi	r20, 0xB8	; 184
 b6c:	5f e7       	ldi	r21, 0x7F	; 127
 b6e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3_pse>
 b72:	0f 92       	push	r0
 b74:	0f 92       	push	r0
 b76:	0f 92       	push	r0
 b78:	4d b7       	in	r20, 0x3d	; 61
 b7a:	5e b7       	in	r21, 0x3e	; 62
 b7c:	0f 92       	push	r0
 b7e:	0e 94 96 06 	call	0xd2c	; 0xd2c <modf>
 b82:	e4 e5       	ldi	r30, 0x54	; 84
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_powser>
 b8a:	4f 91       	pop	r20
 b8c:	5f 91       	pop	r21
 b8e:	ef 91       	pop	r30
 b90:	ff 91       	pop	r31
 b92:	e5 95       	asr	r30
 b94:	ee 1f       	adc	r30, r30
 b96:	ff 1f       	adc	r31, r31
 b98:	49 f0       	breq	.+18     	; 0xbac <exp+0x56>
 b9a:	fe 57       	subi	r31, 0x7E	; 126
 b9c:	e0 68       	ori	r30, 0x80	; 128
 b9e:	44 27       	eor	r20, r20
 ba0:	ee 0f       	add	r30, r30
 ba2:	44 1f       	adc	r20, r20
 ba4:	fa 95       	dec	r31
 ba6:	e1 f7       	brne	.-8      	; 0xba0 <exp+0x4a>
 ba8:	41 95       	neg	r20
 baa:	55 0b       	sbc	r21, r21
 bac:	0e 94 10 06 	call	0xc20	; 0xc20 <ldexp>
 bb0:	0f 90       	pop	r0
 bb2:	07 fe       	sbrs	r0, 7
 bb4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <inverse>
 bb8:	08 95       	ret

00000bba <__fp_powser>:
 bba:	df 93       	push	r29
 bbc:	cf 93       	push	r28
 bbe:	1f 93       	push	r17
 bc0:	0f 93       	push	r16
 bc2:	ff 92       	push	r15
 bc4:	ef 92       	push	r14
 bc6:	df 92       	push	r13
 bc8:	7b 01       	movw	r14, r22
 bca:	8c 01       	movw	r16, r24
 bcc:	68 94       	set
 bce:	06 c0       	rjmp	.+12     	; 0xbdc <__fp_powser+0x22>
 bd0:	da 2e       	mov	r13, r26
 bd2:	ef 01       	movw	r28, r30
 bd4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 bd8:	fe 01       	movw	r30, r28
 bda:	e8 94       	clt
 bdc:	a5 91       	lpm	r26, Z+
 bde:	25 91       	lpm	r18, Z+
 be0:	35 91       	lpm	r19, Z+
 be2:	45 91       	lpm	r20, Z+
 be4:	55 91       	lpm	r21, Z+
 be6:	a6 f3       	brts	.-24     	; 0xbd0 <__fp_powser+0x16>
 be8:	ef 01       	movw	r28, r30
 bea:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3x>
 bee:	fe 01       	movw	r30, r28
 bf0:	97 01       	movw	r18, r14
 bf2:	a8 01       	movw	r20, r16
 bf4:	da 94       	dec	r13
 bf6:	69 f7       	brne	.-38     	; 0xbd2 <__fp_powser+0x18>
 bf8:	df 90       	pop	r13
 bfa:	ef 90       	pop	r14
 bfc:	ff 90       	pop	r15
 bfe:	0f 91       	pop	r16
 c00:	1f 91       	pop	r17
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	08 95       	ret

00000c08 <inverse>:
 c08:	9b 01       	movw	r18, r22
 c0a:	ac 01       	movw	r20, r24
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	70 e0       	ldi	r23, 0x00	; 0
 c10:	80 e8       	ldi	r24, 0x80	; 128
 c12:	9f e3       	ldi	r25, 0x3F	; 63
 c14:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__divsf3>
 c18:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 c1c:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_mpack>

00000c20 <ldexp>:
 c20:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_splitA>
 c24:	d8 f3       	brcs	.-10     	; 0xc1c <inverse+0x14>
 c26:	99 23       	and	r25, r25
 c28:	c9 f3       	breq	.-14     	; 0xc1c <inverse+0x14>
 c2a:	94 0f       	add	r25, r20
 c2c:	51 1d       	adc	r21, r1
 c2e:	a3 f3       	brvs	.-24     	; 0xc18 <inverse+0x10>
 c30:	91 50       	subi	r25, 0x01	; 1
 c32:	50 40       	sbci	r21, 0x00	; 0
 c34:	94 f0       	brlt	.+36     	; 0xc5a <ldexp+0x3a>
 c36:	59 f0       	breq	.+22     	; 0xc4e <ldexp+0x2e>
 c38:	88 23       	and	r24, r24
 c3a:	32 f0       	brmi	.+12     	; 0xc48 <ldexp+0x28>
 c3c:	66 0f       	add	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	91 50       	subi	r25, 0x01	; 1
 c44:	50 40       	sbci	r21, 0x00	; 0
 c46:	c1 f7       	brne	.-16     	; 0xc38 <ldexp+0x18>
 c48:	9e 3f       	cpi	r25, 0xFE	; 254
 c4a:	51 05       	cpc	r21, r1
 c4c:	2c f7       	brge	.-54     	; 0xc18 <inverse+0x10>
 c4e:	88 0f       	add	r24, r24
 c50:	91 1d       	adc	r25, r1
 c52:	96 95       	lsr	r25
 c54:	87 95       	ror	r24
 c56:	97 f9       	bld	r25, 7
 c58:	08 95       	ret
 c5a:	5f 3f       	cpi	r21, 0xFF	; 255
 c5c:	ac f0       	brlt	.+42     	; 0xc88 <ldexp+0x68>
 c5e:	98 3e       	cpi	r25, 0xE8	; 232
 c60:	9c f0       	brlt	.+38     	; 0xc88 <ldexp+0x68>
 c62:	bb 27       	eor	r27, r27
 c64:	86 95       	lsr	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	b7 95       	ror	r27
 c6c:	08 f4       	brcc	.+2      	; 0xc70 <ldexp+0x50>
 c6e:	b1 60       	ori	r27, 0x01	; 1
 c70:	93 95       	inc	r25
 c72:	c1 f7       	brne	.-16     	; 0xc64 <ldexp+0x44>
 c74:	bb 0f       	add	r27, r27
 c76:	58 f7       	brcc	.-42     	; 0xc4e <ldexp+0x2e>
 c78:	11 f4       	brne	.+4      	; 0xc7e <ldexp+0x5e>
 c7a:	60 ff       	sbrs	r22, 0
 c7c:	e8 cf       	rjmp	.-48     	; 0xc4e <ldexp+0x2e>
 c7e:	6f 5f       	subi	r22, 0xFF	; 255
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	8f 4f       	sbci	r24, 0xFF	; 255
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	e3 cf       	rjmp	.-58     	; 0xc4e <ldexp+0x2e>
 c88:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>
 c8c:	16 f0       	brts	.+4      	; 0xc92 <ldexp+0x72>
 c8e:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_mpack>
 c92:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 c96:	68 94       	set
 c98:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>

00000c9c <log>:
 c9c:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_splitA>
 ca0:	a8 f3       	brcs	.-22     	; 0xc8c <ldexp+0x6c>
 ca2:	99 23       	and	r25, r25
 ca4:	c1 f3       	breq	.-16     	; 0xc96 <ldexp+0x76>
 ca6:	ae f3       	brts	.-22     	; 0xc92 <ldexp+0x72>
 ca8:	df 93       	push	r29
 caa:	cf 93       	push	r28
 cac:	1f 93       	push	r17
 cae:	0f 93       	push	r16
 cb0:	ff 92       	push	r15
 cb2:	c9 2f       	mov	r28, r25
 cb4:	dd 27       	eor	r29, r29
 cb6:	88 23       	and	r24, r24
 cb8:	2a f0       	brmi	.+10     	; 0xcc4 <log+0x28>
 cba:	21 97       	sbiw	r28, 0x01	; 1
 cbc:	66 0f       	add	r22, r22
 cbe:	77 1f       	adc	r23, r23
 cc0:	88 1f       	adc	r24, r24
 cc2:	da f7       	brpl	.-10     	; 0xcba <log+0x1e>
 cc4:	20 e0       	ldi	r18, 0x00	; 0
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	40 e8       	ldi	r20, 0x80	; 128
 cca:	5f eb       	ldi	r21, 0xBF	; 191
 ccc:	9f e3       	ldi	r25, 0x3F	; 63
 cce:	88 39       	cpi	r24, 0x98	; 152
 cd0:	20 f0       	brcs	.+8      	; 0xcda <log+0x3e>
 cd2:	80 3e       	cpi	r24, 0xE0	; 224
 cd4:	38 f0       	brcs	.+14     	; 0xce4 <log+0x48>
 cd6:	21 96       	adiw	r28, 0x01	; 1
 cd8:	8f 77       	andi	r24, 0x7F	; 127
 cda:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 cde:	ec e7       	ldi	r30, 0x7C	; 124
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <log+0x50>
 ce4:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 ce8:	e9 ea       	ldi	r30, 0xA9	; 169
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_powser>
 cf0:	8b 01       	movw	r16, r22
 cf2:	be 01       	movw	r22, r28
 cf4:	ec 01       	movw	r28, r24
 cf6:	fb 2e       	mov	r15, r27
 cf8:	6f 57       	subi	r22, 0x7F	; 127
 cfa:	71 09       	sbc	r23, r1
 cfc:	75 95       	asr	r23
 cfe:	77 1f       	adc	r23, r23
 d00:	88 0b       	sbc	r24, r24
 d02:	99 0b       	sbc	r25, r25
 d04:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__floatsisf>
 d08:	28 e1       	ldi	r18, 0x18	; 24
 d0a:	32 e7       	ldi	r19, 0x72	; 114
 d0c:	41 e3       	ldi	r20, 0x31	; 49
 d0e:	5f e3       	ldi	r21, 0x3F	; 63
 d10:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 d14:	af 2d       	mov	r26, r15
 d16:	98 01       	movw	r18, r16
 d18:	ae 01       	movw	r20, r28
 d1a:	ff 90       	pop	r15
 d1c:	0f 91       	pop	r16
 d1e:	1f 91       	pop	r17
 d20:	cf 91       	pop	r28
 d22:	df 91       	pop	r29
 d24:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3x>
 d28:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>

00000d2c <modf>:
 d2c:	fa 01       	movw	r30, r20
 d2e:	dc 01       	movw	r26, r24
 d30:	aa 0f       	add	r26, r26
 d32:	bb 1f       	adc	r27, r27
 d34:	9b 01       	movw	r18, r22
 d36:	ac 01       	movw	r20, r24
 d38:	bf 57       	subi	r27, 0x7F	; 127
 d3a:	28 f4       	brcc	.+10     	; 0xd46 <modf+0x1a>
 d3c:	22 27       	eor	r18, r18
 d3e:	33 27       	eor	r19, r19
 d40:	44 27       	eor	r20, r20
 d42:	50 78       	andi	r21, 0x80	; 128
 d44:	20 c0       	rjmp	.+64     	; 0xd86 <modf+0x5a>
 d46:	b7 51       	subi	r27, 0x17	; 23
 d48:	90 f4       	brcc	.+36     	; 0xd6e <modf+0x42>
 d4a:	ab 2f       	mov	r26, r27
 d4c:	00 24       	eor	r0, r0
 d4e:	46 95       	lsr	r20
 d50:	37 95       	ror	r19
 d52:	27 95       	ror	r18
 d54:	01 1c       	adc	r0, r1
 d56:	a3 95       	inc	r26
 d58:	d2 f3       	brmi	.-12     	; 0xd4e <modf+0x22>
 d5a:	00 20       	and	r0, r0
 d5c:	71 f0       	breq	.+28     	; 0xd7a <modf+0x4e>
 d5e:	22 0f       	add	r18, r18
 d60:	33 1f       	adc	r19, r19
 d62:	44 1f       	adc	r20, r20
 d64:	b3 95       	inc	r27
 d66:	da f3       	brmi	.-10     	; 0xd5e <modf+0x32>
 d68:	0e d0       	rcall	.+28     	; 0xd86 <modf+0x5a>
 d6a:	0c 94 bc 03 	jmp	0x778	; 0x778 <__subsf3>
 d6e:	61 30       	cpi	r22, 0x01	; 1
 d70:	71 05       	cpc	r23, r1
 d72:	a0 e8       	ldi	r26, 0x80	; 128
 d74:	8a 07       	cpc	r24, r26
 d76:	b9 46       	sbci	r27, 0x69	; 105
 d78:	30 f4       	brcc	.+12     	; 0xd86 <modf+0x5a>
 d7a:	9b 01       	movw	r18, r22
 d7c:	ac 01       	movw	r20, r24
 d7e:	66 27       	eor	r22, r22
 d80:	77 27       	eor	r23, r23
 d82:	88 27       	eor	r24, r24
 d84:	90 78       	andi	r25, 0x80	; 128
 d86:	30 96       	adiw	r30, 0x00	; 0
 d88:	21 f0       	breq	.+8      	; 0xd92 <modf+0x66>
 d8a:	20 83       	st	Z, r18
 d8c:	31 83       	std	Z+1, r19	; 0x01
 d8e:	42 83       	std	Z+2, r20	; 0x02
 d90:	53 83       	std	Z+3, r21	; 0x03
 d92:	08 95       	ret

00000d94 <__divsf3>:
 d94:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3x>
 d98:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>
 d9c:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscB>
 da0:	58 f0       	brcs	.+22     	; 0xdb8 <__divsf3+0x24>
 da2:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_pscA>
 da6:	40 f0       	brcs	.+16     	; 0xdb8 <__divsf3+0x24>
 da8:	29 f4       	brne	.+10     	; 0xdb4 <__divsf3+0x20>
 daa:	5f 3f       	cpi	r21, 0xFF	; 255
 dac:	29 f0       	breq	.+10     	; 0xdb8 <__divsf3+0x24>
 dae:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 db2:	51 11       	cpse	r21, r1
 db4:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>
 db8:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>

00000dbc <__divsf3x>:
 dbc:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_split3>
 dc0:	68 f3       	brcs	.-38     	; 0xd9c <__divsf3+0x8>

00000dc2 <__divsf3_pse>:
 dc2:	99 23       	and	r25, r25
 dc4:	b1 f3       	breq	.-20     	; 0xdb2 <__divsf3+0x1e>
 dc6:	55 23       	and	r21, r21
 dc8:	91 f3       	breq	.-28     	; 0xdae <__divsf3+0x1a>
 dca:	95 1b       	sub	r25, r21
 dcc:	55 0b       	sbc	r21, r21
 dce:	bb 27       	eor	r27, r27
 dd0:	aa 27       	eor	r26, r26
 dd2:	62 17       	cp	r22, r18
 dd4:	73 07       	cpc	r23, r19
 dd6:	84 07       	cpc	r24, r20
 dd8:	38 f0       	brcs	.+14     	; 0xde8 <__divsf3_pse+0x26>
 dda:	9f 5f       	subi	r25, 0xFF	; 255
 ddc:	5f 4f       	sbci	r21, 0xFF	; 255
 dde:	22 0f       	add	r18, r18
 de0:	33 1f       	adc	r19, r19
 de2:	44 1f       	adc	r20, r20
 de4:	aa 1f       	adc	r26, r26
 de6:	a9 f3       	breq	.-22     	; 0xdd2 <__divsf3_pse+0x10>
 de8:	35 d0       	rcall	.+106    	; 0xe54 <__divsf3_pse+0x92>
 dea:	0e 2e       	mov	r0, r30
 dec:	3a f0       	brmi	.+14     	; 0xdfc <__divsf3_pse+0x3a>
 dee:	e0 e8       	ldi	r30, 0x80	; 128
 df0:	32 d0       	rcall	.+100    	; 0xe56 <__divsf3_pse+0x94>
 df2:	91 50       	subi	r25, 0x01	; 1
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	e6 95       	lsr	r30
 df8:	00 1c       	adc	r0, r0
 dfa:	ca f7       	brpl	.-14     	; 0xdee <__divsf3_pse+0x2c>
 dfc:	2b d0       	rcall	.+86     	; 0xe54 <__divsf3_pse+0x92>
 dfe:	fe 2f       	mov	r31, r30
 e00:	29 d0       	rcall	.+82     	; 0xe54 <__divsf3_pse+0x92>
 e02:	66 0f       	add	r22, r22
 e04:	77 1f       	adc	r23, r23
 e06:	88 1f       	adc	r24, r24
 e08:	bb 1f       	adc	r27, r27
 e0a:	26 17       	cp	r18, r22
 e0c:	37 07       	cpc	r19, r23
 e0e:	48 07       	cpc	r20, r24
 e10:	ab 07       	cpc	r26, r27
 e12:	b0 e8       	ldi	r27, 0x80	; 128
 e14:	09 f0       	breq	.+2      	; 0xe18 <__divsf3_pse+0x56>
 e16:	bb 0b       	sbc	r27, r27
 e18:	80 2d       	mov	r24, r0
 e1a:	bf 01       	movw	r22, r30
 e1c:	ff 27       	eor	r31, r31
 e1e:	93 58       	subi	r25, 0x83	; 131
 e20:	5f 4f       	sbci	r21, 0xFF	; 255
 e22:	3a f0       	brmi	.+14     	; 0xe32 <__divsf3_pse+0x70>
 e24:	9e 3f       	cpi	r25, 0xFE	; 254
 e26:	51 05       	cpc	r21, r1
 e28:	78 f0       	brcs	.+30     	; 0xe48 <__divsf3_pse+0x86>
 e2a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 e2e:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>
 e32:	5f 3f       	cpi	r21, 0xFF	; 255
 e34:	e4 f3       	brlt	.-8      	; 0xe2e <__divsf3_pse+0x6c>
 e36:	98 3e       	cpi	r25, 0xE8	; 232
 e38:	d4 f3       	brlt	.-12     	; 0xe2e <__divsf3_pse+0x6c>
 e3a:	86 95       	lsr	r24
 e3c:	77 95       	ror	r23
 e3e:	67 95       	ror	r22
 e40:	b7 95       	ror	r27
 e42:	f7 95       	ror	r31
 e44:	9f 5f       	subi	r25, 0xFF	; 255
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__divsf3_pse+0x78>
 e48:	88 0f       	add	r24, r24
 e4a:	91 1d       	adc	r25, r1
 e4c:	96 95       	lsr	r25
 e4e:	87 95       	ror	r24
 e50:	97 f9       	bld	r25, 7
 e52:	08 95       	ret
 e54:	e1 e0       	ldi	r30, 0x01	; 1
 e56:	66 0f       	add	r22, r22
 e58:	77 1f       	adc	r23, r23
 e5a:	88 1f       	adc	r24, r24
 e5c:	bb 1f       	adc	r27, r27
 e5e:	62 17       	cp	r22, r18
 e60:	73 07       	cpc	r23, r19
 e62:	84 07       	cpc	r24, r20
 e64:	ba 07       	cpc	r27, r26
 e66:	20 f0       	brcs	.+8      	; 0xe70 <__divsf3_pse+0xae>
 e68:	62 1b       	sub	r22, r18
 e6a:	73 0b       	sbc	r23, r19
 e6c:	84 0b       	sbc	r24, r20
 e6e:	ba 0b       	sbc	r27, r26
 e70:	ee 1f       	adc	r30, r30
 e72:	88 f7       	brcc	.-30     	; 0xe56 <__divsf3_pse+0x94>
 e74:	e0 95       	com	r30
 e76:	08 95       	ret

00000e78 <__fp_mpack>:
 e78:	9f 3f       	cpi	r25, 0xFF	; 255
 e7a:	31 f0       	breq	.+12     	; 0xe88 <__fp_mpack_finite+0xc>

00000e7c <__fp_mpack_finite>:
 e7c:	91 50       	subi	r25, 0x01	; 1
 e7e:	20 f4       	brcc	.+8      	; 0xe88 <__fp_mpack_finite+0xc>
 e80:	87 95       	ror	r24
 e82:	77 95       	ror	r23
 e84:	67 95       	ror	r22
 e86:	b7 95       	ror	r27
 e88:	88 0f       	add	r24, r24
 e8a:	91 1d       	adc	r25, r1
 e8c:	96 95       	lsr	r25
 e8e:	87 95       	ror	r24
 e90:	97 f9       	bld	r25, 7
 e92:	08 95       	ret

00000e94 <strcmp>:
 e94:	fb 01       	movw	r30, r22
 e96:	dc 01       	movw	r26, r24
 e98:	8d 91       	ld	r24, X+
 e9a:	01 90       	ld	r0, Z+
 e9c:	80 19       	sub	r24, r0
 e9e:	01 10       	cpse	r0, r1
 ea0:	d9 f3       	breq	.-10     	; 0xe98 <strcmp+0x4>
 ea2:	99 0b       	sbc	r25, r25
 ea4:	08 95       	ret

00000ea6 <_exit>:
 ea6:	f8 94       	cli

00000ea8 <__stop_program>:
 ea8:	ff cf       	rjmp	.-2      	; 0xea8 <__stop_program>
