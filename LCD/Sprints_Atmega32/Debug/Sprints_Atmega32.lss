
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194c  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b67  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009da  00000000  00000000  00002a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ac  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1f  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_10>
  2c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  8a:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
	LCD_Command(0x01);              /* Clear display screen*/
}
void LCD_Command(uinteg8_t cmnd )
{
	LCD_PORT = (LCD_PORT & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT &= ~ (1<<LCD_RS);		/* RS=0, command reg. */
  9e:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT |= (1<<LCD_EN);		/* Enable pulse */
  a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	3a e1       	ldi	r19, 0x1A	; 26
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x18>
	_delay_us(10);
	LCD_PORT &= ~ (1<<LCD_EN);
  aa:	db 98       	cbi	0x1b, 3	; 27
  ac:	ef e8       	ldi	r30, 0x8F	; 143
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Command+0x24>
  b6:	00 00       	nop

	_delay_us(200);

	LCD_PORT = (LCD_PORT & 0x0F) | (cmnd << 4);  /* sending lower nibble */
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT |= (1<<LCD_EN);
  c8:	db 9a       	sbi	0x1b, 3	; 27
  ca:	3a e1       	ldi	r19, 0x1A	; 26
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Command+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Command+0x40>
	_delay_us(10);
	LCD_PORT &= ~ (1<<LCD_EN);
  d2:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	9e e4       	ldi	r25, 0x4E	; 78
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Command+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Command+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Init>:
 */ 
#include "LCD.h"

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_DIR = 0xFF;					/* Make LCD port direction as o/p */
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(LCD_PORT,LCD_RW);
  e6:	da 98       	cbi	0x1b, 2	; 27
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <LCD_Init+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Init+0x16>
  f8:	00 00       	nop
	_delay_ms(200);					/* LCD Power ON delay always >15ms */
	LCD_Command(0x03);
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 100:	8f e1       	ldi	r24, 0x1F	; 31
 102:	9e e4       	ldi	r25, 0x4E	; 78
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Init+0x22>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Init+0x28>
 10a:	00 00       	nop
	_delay_ms(10);					/* LCD Power ON delay always >15ms */
	LCD_Command(0x03);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Init+0x34>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Init+0x3a>
 11c:	00 00       	nop
	_delay_ms(10);					/* LCD Power ON delay always >15ms */
	LCD_Command(0x03);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 124:	8f e1       	ldi	r24, 0x1F	; 31
 126:	9e e4       	ldi	r25, 0x4E	; 78
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0x4c>
 12e:	00 00       	nop
	_delay_ms(10);					/* LCD Power ON delay always >15ms */
	LCD_Command(0x02);				/* send for 4 bit initialization of LCD  */
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 14e:	08 95       	ret

00000150 <LCD_Char>:
	_delay_ms(10);
}

void LCD_Char( uinteg8_t data )
{
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0); /* sending upper nibble */
 150:	9b b3       	in	r25, 0x1b	; 27
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	28 2f       	mov	r18, r24
 156:	20 7f       	andi	r18, 0xF0	; 240
 158:	92 2b       	or	r25, r18
 15a:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT |= (1<<LCD_RS);		/* RS=1, data reg. */
 15c:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_PORT|= (1<<LCD_EN);
 15e:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	32 e0       	ldi	r19, 0x02	; 2
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Char+0x12>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Char+0x18>
	_delay_us(1);
	LCD_PORT &= ~ (1<<LCD_EN);
 168:	db 98       	cbi	0x1b, 3	; 27
 16a:	ef e8       	ldi	r30, 0x8F	; 143
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Char+0x1e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Char+0x24>
 174:	00 00       	nop

	_delay_us(200);

	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4); /* sending lower nibble */
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	2f 70       	andi	r18, 0x0F	; 15
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT |= (1<<LCD_EN);
 186:	db 9a       	sbi	0x1b, 3	; 27
 188:	32 e0       	ldi	r19, 0x02	; 2
 18a:	3a 95       	dec	r19
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Char+0x3a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Char+0x40>
	_delay_us(1);
	LCD_PORT &= ~ (1<<LCD_EN);
 190:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Char+0x46>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Char+0x4c>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <LCD_String>:
	_delay_ms(2);
}


void LCD_String (uinteg8_t *str)		/* Send string to LCD function */
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 1a6:	88 81       	ld	r24, Y
 1a8:	88 23       	and	r24, r24
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <LCD_String+0x18>
 1ac:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 1ae:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Char>


void LCD_String (uinteg8_t *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 1b2:	89 91       	ld	r24, Y+
 1b4:	81 11       	cpse	r24, r1
 1b6:	fb cf       	rjmp	.-10     	; 0x1ae <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <main>:
GPIO_Value Temp=RESET;


int main(void)
{
	LCD_Init();
 1be:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	60 ef       	ldi	r22, 0xF0	; 240
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_Init>
	GPIO_Init ( _PORTB,(PIN2),InPut);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_Init>
	Timer_Init(&gstr_Timer0Confing);
 1d6:	80 e6       	ldi	r24, 0x60	; 96
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 4a 01 	call	0x294	; 0x294 <Timer_Init>
	LCD_String("Hello Sprints");
 1de:	86 e6       	ldi	r24, 0x66	; 102
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x28>

000001e8 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	e1 f4       	brne	.+56     	; 0x224 <GPIO_Init+0x3c>
	{
		switch(_PORTX)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	59 f0       	breq	.+22     	; 0x206 <GPIO_Init+0x1e>
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <GPIO_Init+0x14>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	69 f0       	breq	.+26     	; 0x210 <GPIO_Init+0x28>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	81 f0       	breq	.+32     	; 0x21a <GPIO_Init+0x32>
 1fa:	46 c0       	rjmp	.+140    	; 0x288 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
 1fc:	8a b3       	in	r24, 0x1a	; 26
 1fe:	68 2b       	or	r22, r24
 200:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 202:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
 204:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
 206:	87 b3       	in	r24, 0x17	; 23
 208:	68 2b       	or	r22, r24
 20a:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 20c:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
 20e:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
 210:	84 b3       	in	r24, 0x14	; 20
 212:	68 2b       	or	r22, r24
 214:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 216:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 218:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	68 2b       	or	r22, r24
 21e:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 220:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 222:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 224:	41 11       	cpse	r20, r1
 226:	32 c0       	rjmp	.+100    	; 0x28c <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	81 f0       	breq	.+32     	; 0x24c <GPIO_Init+0x64>
 22c:	28 f0       	brcs	.+10     	; 0x238 <GPIO_Init+0x50>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	b9 f0       	breq	.+46     	; 0x260 <GPIO_Init+0x78>
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	f9 f0       	breq	.+62     	; 0x274 <GPIO_Init+0x8c>
 236:	2c c0       	rjmp	.+88     	; 0x290 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 238:	8a b3       	in	r24, 0x1a	; 26
 23a:	96 2f       	mov	r25, r22
 23c:	90 95       	com	r25
 23e:	89 23       	and	r24, r25
 240:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	68 2b       	or	r22, r24
 246:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 248:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 24a:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	96 2f       	mov	r25, r22
 250:	90 95       	com	r25
 252:	89 23       	and	r24, r25
 254:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 256:	88 b3       	in	r24, 0x18	; 24
 258:	68 2b       	or	r22, r24
 25a:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 25c:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 25e:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 260:	84 b3       	in	r24, 0x14	; 20
 262:	96 2f       	mov	r25, r22
 264:	90 95       	com	r25
 266:	89 23       	and	r24, r25
 268:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 26a:	85 b3       	in	r24, 0x15	; 21
 26c:	68 2b       	or	r22, r24
 26e:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 270:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 272:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 274:	81 b3       	in	r24, 0x11	; 17
 276:	96 2f       	mov	r25, r22
 278:	90 95       	com	r25
 27a:	89 23       	and	r24, r25
 27c:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 27e:	82 b3       	in	r24, 0x12	; 18
 280:	68 2b       	or	r22, r24
 282:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 284:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 286:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 290:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 292:	08 95       	ret

00000294 <Timer_Init>:
		default:
			return TIMER_ERROR_NOK;
			break;
	}
	return TIMER_ERROR_OK;
}
 294:	fc 01       	movw	r30, r24
 296:	89 2b       	or	r24, r25
 298:	09 f4       	brne	.+2      	; 0x29c <Timer_Init+0x8>
 29a:	4c c0       	rjmp	.+152    	; 0x334 <Timer_Init+0xa0>
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <Timer_Init+0x14>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	29 f1       	breq	.+74     	; 0x2f0 <Timer_Init+0x5c>
 2a6:	48 c0       	rjmp	.+144    	; 0x338 <Timer_Init+0xa4>
 2a8:	85 81       	ldd	r24, Z+5	; 0x05
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	39 f4       	brne	.+14     	; 0x2bc <Timer_Init+0x28>
 2ae:	8f b7       	in	r24, 0x3f	; 63
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8f bf       	out	0x3f, r24	; 63
 2b4:	89 b7       	in	r24, 0x39	; 57
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	89 bf       	out	0x39, r24	; 57
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <Timer_Init+0x2e>
 2bc:	89 b7       	in	r24, 0x39	; 57
 2be:	8d 7f       	andi	r24, 0xFD	; 253
 2c0:	89 bf       	out	0x39, r24	; 57
 2c2:	84 81       	ldd	r24, Z+4	; 0x04
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	49 f4       	brne	.+18     	; 0x2da <Timer_Init+0x46>
 2c8:	8f b7       	in	r24, 0x3f	; 63
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	8f bf       	out	0x3f, r24	; 63
 2ce:	89 b7       	in	r24, 0x39	; 57
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	89 bf       	out	0x39, r24	; 57
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	89 bf       	out	0x39, r24	; 57
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <Timer_Init+0x4c>
 2da:	89 b7       	in	r24, 0x39	; 57
 2dc:	8e 7f       	andi	r24, 0xFE	; 254
 2de:	89 bf       	out	0x39, r24	; 57
 2e0:	92 81       	ldd	r25, Z+2	; 0x02
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	89 2b       	or	r24, r25
 2e6:	93 81       	ldd	r25, Z+3	; 0x03
 2e8:	89 2b       	or	r24, r25
 2ea:	83 bf       	out	0x33, r24	; 51
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	08 95       	ret
 2f0:	85 81       	ldd	r24, Z+5	; 0x05
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	39 f4       	brne	.+14     	; 0x304 <Timer_Init+0x70>
 2f6:	8f b7       	in	r24, 0x3f	; 63
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	8f bf       	out	0x3f, r24	; 63
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	89 bf       	out	0x39, r24	; 57
 302:	03 c0       	rjmp	.+6      	; 0x30a <Timer_Init+0x76>
 304:	89 b7       	in	r24, 0x39	; 57
 306:	8f 77       	andi	r24, 0x7F	; 127
 308:	89 bf       	out	0x39, r24	; 57
 30a:	84 81       	ldd	r24, Z+4	; 0x04
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	39 f4       	brne	.+14     	; 0x31e <Timer_Init+0x8a>
 310:	8f b7       	in	r24, 0x3f	; 63
 312:	80 68       	ori	r24, 0x80	; 128
 314:	8f bf       	out	0x3f, r24	; 63
 316:	89 b7       	in	r24, 0x39	; 57
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	89 bf       	out	0x39, r24	; 57
 31c:	03 c0       	rjmp	.+6      	; 0x324 <Timer_Init+0x90>
 31e:	89 b7       	in	r24, 0x39	; 57
 320:	8f 7b       	andi	r24, 0xBF	; 191
 322:	89 bf       	out	0x39, r24	; 57
 324:	92 81       	ldd	r25, Z+2	; 0x02
 326:	81 81       	ldd	r24, Z+1	; 0x01
 328:	89 2b       	or	r24, r25
 32a:	93 81       	ldd	r25, Z+3	; 0x03
 32c:	89 2b       	or	r24, r25
 32e:	85 bd       	out	0x25, r24	; 37
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	08 95       	ret
 334:	81 e1       	ldi	r24, 0x11	; 17
 336:	08 95       	ret
 338:	81 e1       	ldi	r24, 0x11	; 17
 33a:	08 95       	ret

0000033c <__vector_11>:

void __vector_11(void)
{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	gcallBack();
 35e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 362:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 366:	09 95       	icall
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_10>:
void __vector_10(void)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
	
}
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
