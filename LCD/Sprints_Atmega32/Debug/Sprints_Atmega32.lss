
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001972  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b67  00000000  00000000  00001fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e4  00000000  00000000  00002b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ac  00000000  00000000  00003744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1f  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_10>
  2c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(5);
	LCD_Command (0x80);		/* Cursor at home position */
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
  9e:	d9 98       	cbi	0x1b, 1	; 27
  a0:	db 9a       	sbi	0x1b, 3	; 27
  a2:	3a e1       	ldi	r19, 0x1A	; 26
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x18>
  aa:	db 98       	cbi	0x1b, 3	; 27
  ac:	ef e8       	ldi	r30, 0x8F	; 143
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Command+0x24>
  b6:	00 00       	nop
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	db 9a       	sbi	0x1b, 3	; 27
  ca:	3a e1       	ldi	r19, 0x1A	; 26
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Command+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Command+0x40>
  d2:	db 98       	cbi	0x1b, 3	; 27
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	9e e4       	ldi	r25, 0x4E	; 78
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Command+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Command+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Init>:
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	da 98       	cbi	0x1b, 2	; 27
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <LCD_Init+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Init+0x16>
  f8:	00 00       	nop
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 100:	8f e1       	ldi	r24, 0x1F	; 31
 102:	9e e4       	ldi	r25, 0x4E	; 78
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Init+0x22>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Init+0x28>
 10a:	00 00       	nop
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Init+0x34>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Init+0x3a>
 11c:	00 00       	nop
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 124:	8f e1       	ldi	r24, 0x1F	; 31
 126:	9e e4       	ldi	r25, 0x4E	; 78
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0x4c>
 12e:	00 00       	nop
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 14e:	08 95       	ret

00000150 <LCD_Char>:
 150:	9b b3       	in	r25, 0x1b	; 27
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	28 2f       	mov	r18, r24
 156:	20 7f       	andi	r18, 0xF0	; 240
 158:	92 2b       	or	r25, r18
 15a:	9b bb       	out	0x1b, r25	; 27
 15c:	d9 9a       	sbi	0x1b, 1	; 27
 15e:	db 9a       	sbi	0x1b, 3	; 27
 160:	32 e0       	ldi	r19, 0x02	; 2
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Char+0x12>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Char+0x18>
 168:	db 98       	cbi	0x1b, 3	; 27
 16a:	ef e8       	ldi	r30, 0x8F	; 143
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Char+0x1e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Char+0x24>
 174:	00 00       	nop
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	2f 70       	andi	r18, 0x0F	; 15
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	db 9a       	sbi	0x1b, 3	; 27
 188:	32 e0       	ldi	r19, 0x02	; 2
 18a:	3a 95       	dec	r19
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Char+0x3a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Char+0x40>
 190:	db 98       	cbi	0x1b, 3	; 27
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Char+0x46>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Char+0x4c>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <LCD_String>:
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	88 81       	ld	r24, Y
 1a8:	88 23       	and	r24, r24
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <LCD_String+0x18>
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Char>
 1b2:	89 91       	ld	r24, Y+
 1b4:	81 11       	cpse	r24, r1
 1b6:	fb cf       	rjmp	.-10     	; 0x1ae <LCD_String+0xe>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LCD_Int>:
}
void LCD_Int (int s32_Value)		/* Send string to LCD function */
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	uinteg8_t *str;
	itoa(s32_Value,str,10);	/* Integer to string conversion */
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	be 01       	movw	r22, r28
 1cc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <itoa>
	LCD_String(str);
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
GPIO_Value Temp=RESET;


int main(void)
{
	LCD_Init();
 1dc:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	60 ef       	ldi	r22, 0xF0	; 240
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 07 01 	call	0x20e	; 0x20e <GPIO_Init>
	GPIO_Init ( _PORTB,(PIN2),InPut);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 07 01 	call	0x20e	; 0x20e <GPIO_Init>
	Timer_Init(&gstr_Timer0Confing);
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Timer_Init>
	LCD_String("Hello Sprints");
 1fc:	86 e6       	ldi	r24, 0x66	; 102
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
    while (1) 
    {
      // LCD_String_xy(0,0,"mohamed salah taman");
	  LCD_Int(44);
 204:	8c e2       	ldi	r24, 0x2C	; 44
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Int>
 20c:	fb cf       	rjmp	.-10     	; 0x204 <main+0x28>

0000020e <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	e1 f4       	brne	.+56     	; 0x24a <GPIO_Init+0x3c>
	{
		switch(_PORTX)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	59 f0       	breq	.+22     	; 0x22c <GPIO_Init+0x1e>
 216:	28 f0       	brcs	.+10     	; 0x222 <GPIO_Init+0x14>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	69 f0       	breq	.+26     	; 0x236 <GPIO_Init+0x28>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	81 f0       	breq	.+32     	; 0x240 <GPIO_Init+0x32>
 220:	46 c0       	rjmp	.+140    	; 0x2ae <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
 222:	8a b3       	in	r24, 0x1a	; 26
 224:	68 2b       	or	r22, r24
 226:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 228:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
 22a:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	68 2b       	or	r22, r24
 230:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 232:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
 234:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
 236:	84 b3       	in	r24, 0x14	; 20
 238:	68 2b       	or	r22, r24
 23a:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 23c:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 23e:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 240:	81 b3       	in	r24, 0x11	; 17
 242:	68 2b       	or	r22, r24
 244:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 246:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 248:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 24a:	41 11       	cpse	r20, r1
 24c:	32 c0       	rjmp	.+100    	; 0x2b2 <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	81 f0       	breq	.+32     	; 0x272 <GPIO_Init+0x64>
 252:	28 f0       	brcs	.+10     	; 0x25e <GPIO_Init+0x50>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	b9 f0       	breq	.+46     	; 0x286 <GPIO_Init+0x78>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	f9 f0       	breq	.+62     	; 0x29a <GPIO_Init+0x8c>
 25c:	2c c0       	rjmp	.+88     	; 0x2b6 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 25e:	8a b3       	in	r24, 0x1a	; 26
 260:	96 2f       	mov	r25, r22
 262:	90 95       	com	r25
 264:	89 23       	and	r24, r25
 266:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	68 2b       	or	r22, r24
 26c:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 26e:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 270:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 272:	87 b3       	in	r24, 0x17	; 23
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	89 23       	and	r24, r25
 27a:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	68 2b       	or	r22, r24
 280:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 282:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 284:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 286:	84 b3       	in	r24, 0x14	; 20
 288:	96 2f       	mov	r25, r22
 28a:	90 95       	com	r25
 28c:	89 23       	and	r24, r25
 28e:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 290:	85 b3       	in	r24, 0x15	; 21
 292:	68 2b       	or	r22, r24
 294:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 296:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 298:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 29a:	81 b3       	in	r24, 0x11	; 17
 29c:	96 2f       	mov	r25, r22
 29e:	90 95       	com	r25
 2a0:	89 23       	and	r24, r25
 2a2:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	68 2b       	or	r22, r24
 2a8:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 2aa:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 2ac:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 2b8:	08 95       	ret

000002ba <Timer_Init>:
		default:
			return TIMER_ERROR_NOK;
			break;
	}
	return TIMER_ERROR_OK;
}
 2ba:	fc 01       	movw	r30, r24
 2bc:	89 2b       	or	r24, r25
 2be:	09 f4       	brne	.+2      	; 0x2c2 <Timer_Init+0x8>
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <Timer_Init+0xa0>
 2c2:	80 81       	ld	r24, Z
 2c4:	88 23       	and	r24, r24
 2c6:	19 f0       	breq	.+6      	; 0x2ce <Timer_Init+0x14>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	29 f1       	breq	.+74     	; 0x316 <Timer_Init+0x5c>
 2cc:	48 c0       	rjmp	.+144    	; 0x35e <Timer_Init+0xa4>
 2ce:	85 81       	ldd	r24, Z+5	; 0x05
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <Timer_Init+0x28>
 2d4:	8f b7       	in	r24, 0x3f	; 63
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	8f bf       	out	0x3f, r24	; 63
 2da:	89 b7       	in	r24, 0x39	; 57
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	89 bf       	out	0x39, r24	; 57
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <Timer_Init+0x2e>
 2e2:	89 b7       	in	r24, 0x39	; 57
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	89 bf       	out	0x39, r24	; 57
 2e8:	84 81       	ldd	r24, Z+4	; 0x04
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	49 f4       	brne	.+18     	; 0x300 <Timer_Init+0x46>
 2ee:	8f b7       	in	r24, 0x3f	; 63
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	8f bf       	out	0x3f, r24	; 63
 2f4:	89 b7       	in	r24, 0x39	; 57
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	89 bf       	out	0x39, r24	; 57
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	89 bf       	out	0x39, r24	; 57
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <Timer_Init+0x4c>
 300:	89 b7       	in	r24, 0x39	; 57
 302:	8e 7f       	andi	r24, 0xFE	; 254
 304:	89 bf       	out	0x39, r24	; 57
 306:	92 81       	ldd	r25, Z+2	; 0x02
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	89 2b       	or	r24, r25
 30c:	93 81       	ldd	r25, Z+3	; 0x03
 30e:	89 2b       	or	r24, r25
 310:	83 bf       	out	0x33, r24	; 51
 312:	80 e1       	ldi	r24, 0x10	; 16
 314:	08 95       	ret
 316:	85 81       	ldd	r24, Z+5	; 0x05
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	39 f4       	brne	.+14     	; 0x32a <Timer_Init+0x70>
 31c:	8f b7       	in	r24, 0x3f	; 63
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8f bf       	out	0x3f, r24	; 63
 322:	89 b7       	in	r24, 0x39	; 57
 324:	80 68       	ori	r24, 0x80	; 128
 326:	89 bf       	out	0x39, r24	; 57
 328:	03 c0       	rjmp	.+6      	; 0x330 <Timer_Init+0x76>
 32a:	89 b7       	in	r24, 0x39	; 57
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	89 bf       	out	0x39, r24	; 57
 330:	84 81       	ldd	r24, Z+4	; 0x04
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	39 f4       	brne	.+14     	; 0x344 <Timer_Init+0x8a>
 336:	8f b7       	in	r24, 0x3f	; 63
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	8f bf       	out	0x3f, r24	; 63
 33c:	89 b7       	in	r24, 0x39	; 57
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	89 bf       	out	0x39, r24	; 57
 342:	03 c0       	rjmp	.+6      	; 0x34a <Timer_Init+0x90>
 344:	89 b7       	in	r24, 0x39	; 57
 346:	8f 7b       	andi	r24, 0xBF	; 191
 348:	89 bf       	out	0x39, r24	; 57
 34a:	92 81       	ldd	r25, Z+2	; 0x02
 34c:	81 81       	ldd	r24, Z+1	; 0x01
 34e:	89 2b       	or	r24, r25
 350:	93 81       	ldd	r25, Z+3	; 0x03
 352:	89 2b       	or	r24, r25
 354:	85 bd       	out	0x25, r24	; 37
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	08 95       	ret
 35a:	81 e1       	ldi	r24, 0x11	; 17
 35c:	08 95       	ret
 35e:	81 e1       	ldi	r24, 0x11	; 17
 360:	08 95       	ret

00000362 <__vector_11>:

void __vector_11(void)
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	gcallBack();
 384:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 388:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 38c:	09 95       	icall
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_10>:
void __vector_10(void)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
	
}
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <itoa>:
 3c4:	45 32       	cpi	r20, 0x25	; 37
 3c6:	51 05       	cpc	r21, r1
 3c8:	20 f4       	brcc	.+8      	; 0x3d2 <itoa+0xe>
 3ca:	42 30       	cpi	r20, 0x02	; 2
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <itoa+0xe>
 3ce:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__itoa_ncheck>
 3d2:	fb 01       	movw	r30, r22
 3d4:	10 82       	st	Z, r1
 3d6:	cb 01       	movw	r24, r22
 3d8:	08 95       	ret

000003da <__itoa_ncheck>:
 3da:	bb 27       	eor	r27, r27
 3dc:	4a 30       	cpi	r20, 0x0A	; 10
 3de:	31 f4       	brne	.+12     	; 0x3ec <__itoa_ncheck+0x12>
 3e0:	99 23       	and	r25, r25
 3e2:	22 f4       	brpl	.+8      	; 0x3ec <__itoa_ncheck+0x12>
 3e4:	bd e2       	ldi	r27, 0x2D	; 45
 3e6:	90 95       	com	r25
 3e8:	81 95       	neg	r24
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__utoa_common>

000003f0 <__utoa_ncheck>:
 3f0:	bb 27       	eor	r27, r27

000003f2 <__utoa_common>:
 3f2:	fb 01       	movw	r30, r22
 3f4:	55 27       	eor	r21, r21
 3f6:	aa 27       	eor	r26, r26
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	aa 1f       	adc	r26, r26
 3fe:	a4 17       	cp	r26, r20
 400:	10 f0       	brcs	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	a4 1b       	sub	r26, r20
 404:	83 95       	inc	r24
 406:	50 51       	subi	r21, 0x10	; 16
 408:	b9 f7       	brne	.-18     	; 0x3f8 <__utoa_common+0x6>
 40a:	a0 5d       	subi	r26, 0xD0	; 208
 40c:	aa 33       	cpi	r26, 0x3A	; 58
 40e:	08 f0       	brcs	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	a9 5d       	subi	r26, 0xD9	; 217
 412:	a1 93       	st	Z+, r26
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	79 f7       	brne	.-34     	; 0x3f6 <__utoa_common+0x4>
 418:	b1 11       	cpse	r27, r1
 41a:	b1 93       	st	Z+, r27
 41c:	11 92       	st	Z+, r1
 41e:	cb 01       	movw	r24, r22
 420:	0c 94 12 02 	jmp	0x424	; 0x424 <strrev>

00000424 <strrev>:
 424:	dc 01       	movw	r26, r24
 426:	fc 01       	movw	r30, r24
 428:	67 2f       	mov	r22, r23
 42a:	71 91       	ld	r23, Z+
 42c:	77 23       	and	r23, r23
 42e:	e1 f7       	brne	.-8      	; 0x428 <strrev+0x4>
 430:	32 97       	sbiw	r30, 0x02	; 2
 432:	04 c0       	rjmp	.+8      	; 0x43c <strrev+0x18>
 434:	7c 91       	ld	r23, X
 436:	6d 93       	st	X+, r22
 438:	70 83       	st	Z, r23
 43a:	62 91       	ld	r22, -Z
 43c:	ae 17       	cp	r26, r30
 43e:	bf 07       	cpc	r27, r31
 440:	c8 f3       	brcs	.-14     	; 0x434 <strrev+0x10>
 442:	08 95       	ret

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
