
ULTRASONIC CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001e42  00001ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  0080007e  0080007e  00001ef4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b6b  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001025  00000000  00000000  00005e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029f0  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a4c  00000000  00000000  000098a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000172c  00000000  00000000  0000a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba3  00000000  00000000  0000ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_1>
       8:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_2>
       c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_3>
      10:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_4>
      14:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_5>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_9>
      28:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_10>
      2c:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_11>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	b6 03       	fmuls	r19, r22
      56:	e6 03       	fmuls	r22, r22
      58:	07 04       	cpc	r0, r7
      5a:	28 04       	cpc	r2, r8
      5c:	49 04       	cpc	r4, r9
      5e:	6a 04       	cpc	r6, r10
      60:	8b 04       	cpc	r8, r11
      62:	ac 04       	cpc	r10, r12
      64:	cd 04       	cpc	r12, r13
      66:	ee 04       	cpc	r14, r14
      68:	0e 05       	cpc	r16, r14
      6a:	7e 0b       	sbc	r23, r30
      6c:	89 0b       	sbc	r24, r25
      6e:	94 0b       	sbc	r25, r20
      70:	9f 0b       	sbc	r25, r31
      72:	aa 0b       	sbc	r26, r26
      74:	b5 0b       	sbc	r27, r21
      76:	c0 0b       	sbc	r28, r16
      78:	d8 0b       	sbc	r29, r24
      7a:	e3 0b       	sbc	r30, r19
      7c:	ee 0b       	sbc	r30, r30
      7e:	f9 0b       	sbc	r31, r25
      80:	04 0c       	add	r0, r4
      82:	0f 0c       	add	r0, r15
      84:	1a 0c       	add	r1, r10

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf e5       	ldi	r28, 0x5F	; 95
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	10 e0       	ldi	r17, 0x00	; 0
      94:	a0 e6       	ldi	r26, 0x60	; 96
      96:	b0 e0       	ldi	r27, 0x00	; 0
      98:	e2 e4       	ldi	r30, 0x42	; 66
      9a:	fe e1       	ldi	r31, 0x1E	; 30
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	ae 37       	cpi	r26, 0x7E	; 126
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	ae e7       	ldi	r26, 0x7E	; 126
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a6 3b       	cpi	r26, 0xB6	; 182
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
      bc:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
#include "./ROBOT_CONTROL/ROBOT_control.h"
#include "../ECUAL/MOTOR_CONTROL/MOTOR.h"
#include "../ECUAL/softwarePWM/softwarePWM_interface.h"
int main(){
	
	Ru8_SREG |= (HIGH << 7);
      c4:	8f b7       	in	r24, 0x3f	; 63
      c6:	80 68       	ori	r24, 0x80	; 128
      c8:	8f bf       	out	0x3f, r24	; 63
	ROBOT_init();
      ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <ROBOT_init>

	while(1){
	
		ROBOT_moveUpdate();
      ce:	0e 94 c2 00 	call	0x184	; 0x184 <ROBOT_moveUpdate>
      d2:	fd cf       	rjmp	.-6      	; 0xce <main+0xa>

000000d4 <ROBOT_init>:
uint8_t u8_backwardStr[] = "BACKWARD";
uint8_t u8_rightStr[]    = "RIGHT";
 
void ROBOT_init(void)
{	
	STEERING_init();
      d4:	0e 94 c7 01 	call	0x38e	; 0x38e <STEERING_init>
	ULTRASONIC_voidInit();
      d8:	0e 94 18 07 	call	0xe30	; 0xe30 <ULTRASONIC_voidInit>
	gu8_lcdState = LCD_u8Init();
      dc:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
      e0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
	DIO_SetPinDirection(PORTB,PIN4,OUTPUT);
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
    DIO_SetPinDirection(PORTB,PIN5,OUTPUT);
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	65 e0       	ldi	r22, 0x05	; 5
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,PIN6,OUTPUT);
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,PIN7,OUTPUT);
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
     10c:	08 95       	ret

0000010e <ROBOT_getCurrentState>:
}

EN_currentCarState_t ROBOT_getCurrentState(void)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	00 d0       	rcall	.+0      	; 0x114 <ROBOT_getCurrentState+0x6>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t  u8_ultraSonicStatus;
	uint16_t u16_distInCm;
	static EN_currentCarState_t EN_currentObstacleState = NO_OBSTACLES_AHEAD;
	
	if(gu8_lcdState == u8_LCD_NOK)
     118:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_lcdState>
     11c:	84 31       	cpi	r24, 0x14	; 20
     11e:	21 f4       	brne	.+8      	; 0x128 <ROBOT_getCurrentState+0x1a>
	{
		gu8_lcdState = LCD_u8Init();		
     120:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
     124:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
	}
	
    u8_ultraSonicStatus = ULTRASONIC_u8GetObstacleDistInCm(&u16_distInCm);
     128:	ce 01       	movw	r24, r28
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ULTRASONIC_u8GetObstacleDistInCm>
	
	if(u8_ULTRASONIC_OK == u8_ultraSonicStatus)
     130:	8e 31       	cpi	r24, 0x1E	; 30
     132:	09 f5       	brne	.+66     	; 0x176 <ROBOT_getCurrentState+0x68>
	{	
		if(u16_distInCm > APPROACHING_DISTANCE)
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	83 33       	cpi	r24, 0x33	; 51
     13a:	91 05       	cpc	r25, r1
     13c:	18 f0       	brcs	.+6      	; 0x144 <ROBOT_getCurrentState+0x36>
		{	
			EN_currentObstacleState = NO_OBSTACLES_AHEAD;  
     13e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <EN_currentObstacleState.1724>
     142:	19 c0       	rjmp	.+50     	; 0x176 <ROBOT_getCurrentState+0x68>
		}
		else if((u16_distInCm <= APPROACHING_DISTANCE) && (u16_distInCm > TURNING_DISTANCE_MAX))
     144:	9c 01       	movw	r18, r24
     146:	24 52       	subi	r18, 0x24	; 36
     148:	31 09       	sbc	r19, r1
     14a:	2f 30       	cpi	r18, 0x0F	; 15
     14c:	31 05       	cpc	r19, r1
     14e:	20 f4       	brcc	.+8      	; 0x158 <ROBOT_getCurrentState+0x4a>
		{
			EN_currentObstacleState = APPROACHING_OBSTACLE; 
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <EN_currentObstacleState.1724>
     156:	0f c0       	rjmp	.+30     	; 0x176 <ROBOT_getCurrentState+0x68>
		}
		else if((u16_distInCm <= TURNING_DISTANCE_MAX) && (u16_distInCm >= TURNING_DISTANCE_MIN))
     158:	9c 01       	movw	r18, r24
     15a:	2e 51       	subi	r18, 0x1E	; 30
     15c:	31 09       	sbc	r19, r1
     15e:	26 30       	cpi	r18, 0x06	; 6
     160:	31 05       	cpc	r19, r1
     162:	20 f4       	brcc	.+8      	; 0x16c <ROBOT_getCurrentState+0x5e>
		{
			EN_currentObstacleState = CLOSE_TO_OBSTACLE;
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <EN_currentObstacleState.1724>
     16a:	05 c0       	rjmp	.+10     	; 0x176 <ROBOT_getCurrentState+0x68>
		}
		else if(u16_distInCm < TURNING_DISTANCE_MIN)
     16c:	4e 97       	sbiw	r24, 0x1e	; 30
     16e:	18 f4       	brcc	.+6      	; 0x176 <ROBOT_getCurrentState+0x68>
		{	
			EN_currentObstacleState = VERY_CLOSE_TO_OBSTACLE;
     170:	83 e0       	ldi	r24, 0x03	; 3
     172:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <EN_currentObstacleState.1724>
		{
	    }
	}
	
	return EN_currentObstacleState;
}
     176:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <EN_currentObstacleState.1724>
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <ROBOT_moveUpdate>:
	static uint8_t u8_printStrDone = FALSE;
	static uint8_t u8_clearStrDone = FALSE;
	static uint8_t u8_stopRequired = FALSE ; 
	static uint8_t u8_waitDelayRequest = FALSE ; 
	
	if(u8_stopRequired == TRUE)
     184:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <u8_stopRequired.1736>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	c9 f4       	brne	.+50     	; 0x1be <ROBOT_moveUpdate+0x3a>
	{
		if(u8_waitDelayRequest == FALSE)
     18c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_waitDelayRequest.1737>
     190:	81 11       	cpse	r24, r1
     192:	0b c0       	rjmp	.+22     	; 0x1aa <ROBOT_moveUpdate+0x26>
		{
			STEERING_stop(); 
     194:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <STEERING_stop>
			TIMER2_u8InterruptWait(STOP_DELAY) ; 
     198:	64 ef       	ldi	r22, 0xF4	; 244
     19a:	71 e0       	ldi	r23, 0x01	; 1
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TIMER2_u8InterruptWait>
			u8_waitDelayRequest = TRUE ; 
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u8_waitDelayRequest.1737>
		}
		u8_stopState = TIMER2_u8GetIntWaitStatus() ; 
     1aa:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TIMER2_u8GetIntWaitStatus>
		
		if(u8_stopState == u8_FINISH_INTERRUPT_WAITING)
     1ae:	8d 31       	cpi	r24, 0x1D	; 29
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <ROBOT_moveUpdate+0x30>
     1b2:	ec c0       	rjmp	.+472    	; 0x38c <ROBOT_moveUpdate+0x208>
		{
			u8_stopRequired = FALSE ; 
     1b4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <u8_stopRequired.1736>
			u8_waitDelayRequest = FALSE ;
     1b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <u8_waitDelayRequest.1737>
     1bc:	08 95       	ret
		}
		
	}
	else 
	{
		EN_currentCarState = ROBOT_getCurrentState();
     1be:	0e 94 87 00 	call	0x10e	; 0x10e <ROBOT_getCurrentState>
		switch(EN_currentCarState)
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	c9 f1       	breq	.+114    	; 0x238 <ROBOT_moveUpdate+0xb4>
     1c6:	38 f0       	brcs	.+14     	; 0x1d6 <ROBOT_moveUpdate+0x52>
     1c8:	82 30       	cpi	r24, 0x02	; 2
     1ca:	09 f4       	brne	.+2      	; 0x1ce <ROBOT_moveUpdate+0x4a>
     1cc:	67 c0       	rjmp	.+206    	; 0x29c <ROBOT_moveUpdate+0x118>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <ROBOT_moveUpdate+0x50>
     1d2:	a0 c0       	rjmp	.+320    	; 0x314 <ROBOT_moveUpdate+0x190>
     1d4:	08 95       	ret
		{
			case NO_OBSTACLES_AHEAD:
			
				if(gu8_lcdState == u8_LCD_NOK)
     1d6:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_lcdState>
     1da:	84 31       	cpi	r24, 0x14	; 20
     1dc:	29 f4       	brne	.+10     	; 0x1e8 <ROBOT_moveUpdate+0x64>
				{
					gu8_lcdState = LCD_u8Init();
     1de:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
     1e2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
     1e6:	1a c0       	rjmp	.+52     	; 0x21c <ROBOT_moveUpdate+0x98>
				}
				else
				{
					if(u8_clearStrDone == FALSE)
     1e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8_clearStrDone.1735>
     1ec:	81 11       	cpse	r24, r1
     1ee:	09 c0       	rjmp	.+18     	; 0x202 <ROBOT_moveUpdate+0x7e>
					{
						u8_clearState = LCD_u8sendCommand(u8_LCD_DISPLAY_CLEAR); 
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_LCD_OK == u8_clearState)
     1f6:	85 31       	cpi	r24, 0x15	; 21
     1f8:	89 f4       	brne	.+34     	; 0x21c <ROBOT_moveUpdate+0x98>
						{
							u8_clearStrDone = TRUE ; 
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u8_clearStrDone.1735>
     200:	0d c0       	rjmp	.+26     	; 0x21c <ROBOT_moveUpdate+0x98>
						}
					}
					else if(FALSE == u8_printStrDone)
     202:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_printStrDone.1734>
     206:	81 11       	cpse	r24, r1
     208:	09 c0       	rjmp	.+18     	; 0x21c <ROBOT_moveUpdate+0x98>
					{
						u8_printState = LCD_u8PrintStr(u8_forwardStr);
     20a:	8f e6       	ldi	r24, 0x6F	; 111
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 02 06 	call	0xc04	; 0xc04 <LCD_u8PrintStr>
						if(u8_LCD_OK == u8_printState)
     212:	85 31       	cpi	r24, 0x15	; 21
     214:	19 f4       	brne	.+6      	; 0x21c <ROBOT_moveUpdate+0x98>
						{
							u8_printStrDone = TRUE;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_printStrDone.1734>
						}
					}
				}
				
				if (EN_checkStateChange != APPROACHING_OBSTACLE && EN_checkStateChange != NO_OBSTACLES_AHEAD )
     21c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	20 f0       	brcs	.+8      	; 0x22c <ROBOT_moveUpdate+0xa8>
				{
					u8_printStrDone = FALSE;
     224:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u8_printStrDone.1734>
					u8_clearStrDone = FALSE ; 
     228:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <u8_clearStrDone.1735>
				}
	
				EN_checkStateChange = NO_OBSTACLES_AHEAD;
     22c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
				
				STEERING_forward(STEERING_SPEED_80);
     230:	80 e5       	ldi	r24, 0x50	; 80
     232:	0e 94 ce 01 	call	0x39c	; 0x39c <STEERING_forward>
	
			
			break;
     236:	08 95       	ret
			
			case APPROACHING_OBSTACLE:
	
	
				if(gu8_lcdState == u8_LCD_NOK)
     238:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_lcdState>
     23c:	84 31       	cpi	r24, 0x14	; 20
     23e:	29 f4       	brne	.+10     	; 0x24a <ROBOT_moveUpdate+0xc6>
				{
					gu8_lcdState = LCD_u8Init();
     240:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
     244:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
     248:	1a c0       	rjmp	.+52     	; 0x27e <ROBOT_moveUpdate+0xfa>
				}
				else
				{
					if(u8_clearStrDone == FALSE)
     24a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8_clearStrDone.1735>
     24e:	81 11       	cpse	r24, r1
     250:	09 c0       	rjmp	.+18     	; 0x264 <ROBOT_moveUpdate+0xe0>
					{
						u8_clearState = LCD_u8sendCommand(u8_LCD_DISPLAY_CLEAR); 
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_LCD_OK == u8_clearState)
     258:	85 31       	cpi	r24, 0x15	; 21
     25a:	89 f4       	brne	.+34     	; 0x27e <ROBOT_moveUpdate+0xfa>
						{
							u8_clearStrDone = TRUE ; 
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u8_clearStrDone.1735>
     262:	0d c0       	rjmp	.+26     	; 0x27e <ROBOT_moveUpdate+0xfa>
						}
					}
					else if(FALSE == u8_printStrDone)
     264:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_printStrDone.1734>
     268:	81 11       	cpse	r24, r1
     26a:	09 c0       	rjmp	.+18     	; 0x27e <ROBOT_moveUpdate+0xfa>
					{
						u8_printState = LCD_u8PrintStr(u8_forwardStr);
     26c:	8f e6       	ldi	r24, 0x6F	; 111
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 02 06 	call	0xc04	; 0xc04 <LCD_u8PrintStr>
						if(u8_LCD_OK == u8_printState)
     274:	85 31       	cpi	r24, 0x15	; 21
     276:	19 f4       	brne	.+6      	; 0x27e <ROBOT_moveUpdate+0xfa>
						{
							u8_printStrDone = TRUE;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_printStrDone.1734>
						}
					}
				}
				if (EN_checkStateChange != APPROACHING_OBSTACLE && EN_checkStateChange != NO_OBSTACLES_AHEAD )
     27e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	20 f0       	brcs	.+8      	; 0x28e <ROBOT_moveUpdate+0x10a>
				{
					u8_printStrDone = FALSE;
     286:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u8_printStrDone.1734>
					u8_clearStrDone = FALSE ; 
     28a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <u8_clearStrDone.1735>
				}
				
				EN_checkStateChange = APPROACHING_OBSTACLE;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	
				STEERING_forward(STEERING_SPEED_30);		
     294:	8c e3       	ldi	r24, 0x3C	; 60
     296:	0e 94 ce 01 	call	0x39c	; 0x39c <STEERING_forward>
				
				break;
     29a:	08 95       	ret
			
			case CLOSE_TO_OBSTACLE:
			
				if(gu8_lcdState == u8_LCD_NOK)
     29c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_lcdState>
     2a0:	84 31       	cpi	r24, 0x14	; 20
     2a2:	29 f4       	brne	.+10     	; 0x2ae <ROBOT_moveUpdate+0x12a>
				{
					gu8_lcdState = LCD_u8Init();
     2a4:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
     2a8:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
     2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <ROBOT_moveUpdate+0x15e>
				}
				else
				{
					if(u8_clearStrDone == FALSE)
     2ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8_clearStrDone.1735>
     2b2:	81 11       	cpse	r24, r1
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <ROBOT_moveUpdate+0x144>
					{
						u8_clearState = LCD_u8sendCommand(u8_LCD_DISPLAY_CLEAR); 
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_LCD_OK == u8_clearState)
     2bc:	85 31       	cpi	r24, 0x15	; 21
     2be:	89 f4       	brne	.+34     	; 0x2e2 <ROBOT_moveUpdate+0x15e>
						{
							u8_clearStrDone = TRUE ; 
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u8_clearStrDone.1735>
     2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <ROBOT_moveUpdate+0x15e>
						}
					}
					else if(FALSE == u8_printStrDone)
     2c8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_printStrDone.1734>
     2cc:	81 11       	cpse	r24, r1
     2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <ROBOT_moveUpdate+0x15e>
					{
						u8_printState = LCD_u8PrintStr(u8_rightStr);
     2d0:	80 e6       	ldi	r24, 0x60	; 96
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 02 06 	call	0xc04	; 0xc04 <LCD_u8PrintStr>
						if(u8_LCD_OK == u8_printState)
     2d8:	85 31       	cpi	r24, 0x15	; 21
     2da:	19 f4       	brne	.+6      	; 0x2e2 <ROBOT_moveUpdate+0x15e>
						{
							u8_printStrDone = TRUE;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_printStrDone.1734>
						}
					}
				}
				
				if (EN_checkStateChange == CLOSE_TO_OBSTACLE)
     2e2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	31 f0       	breq	.+12     	; 0x2f6 <ROBOT_moveUpdate+0x172>
					u8_changeState = FALSE;
				}
				else
				{
					u8_changeState = TRUE;
					u8_printStrDone = FALSE;
     2ea:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u8_printStrDone.1734>
					u8_clearStrDone = FALSE; 
     2ee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <u8_clearStrDone.1735>
				{
					u8_changeState = FALSE;
				}
				else
				{
					u8_changeState = TRUE;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <ROBOT_moveUpdate+0x174>
					}
				}
				
				if (EN_checkStateChange == CLOSE_TO_OBSTACLE)
				{
					u8_changeState = FALSE;
     2f6:	80 e0       	ldi	r24, 0x00	; 0
					u8_changeState = TRUE;
					u8_printStrDone = FALSE;
					u8_clearStrDone = FALSE; 
				}
				
				if(u8_changeState == TRUE)
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	11 f4       	brne	.+4      	; 0x300 <ROBOT_moveUpdate+0x17c>
				{
					u8_stopRequired = TRUE; 
     2fc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <u8_stopRequired.1736>
				}
				
				if(u8_stopRequired == FALSE)
     300:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <u8_stopRequired.1736>
     304:	81 11       	cpse	r24, r1
     306:	02 c0       	rjmp	.+4      	; 0x30c <ROBOT_moveUpdate+0x188>
				{
					STEERING_right();
     308:	0e 94 da 01 	call	0x3b4	; 0x3b4 <STEERING_right>
				}
				
				EN_checkStateChange = CLOSE_TO_OBSTACLE;
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
			
				break;
     312:	08 95       	ret
			
			case VERY_CLOSE_TO_OBSTACLE:
			
				if(gu8_lcdState == u8_LCD_NOK)
     314:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_lcdState>
     318:	84 31       	cpi	r24, 0x14	; 20
     31a:	29 f4       	brne	.+10     	; 0x326 <ROBOT_moveUpdate+0x1a2>
				{
					gu8_lcdState = LCD_u8Init();
     31c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_u8Init>
     320:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_lcdState>
     324:	1a c0       	rjmp	.+52     	; 0x35a <ROBOT_moveUpdate+0x1d6>
				}
				else
				{
					if(u8_clearStrDone == FALSE)
     326:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8_clearStrDone.1735>
     32a:	81 11       	cpse	r24, r1
     32c:	09 c0       	rjmp	.+18     	; 0x340 <ROBOT_moveUpdate+0x1bc>
					{
						u8_clearState = LCD_u8sendCommand(u8_LCD_DISPLAY_CLEAR); 
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_LCD_OK == u8_clearState)
     334:	85 31       	cpi	r24, 0x15	; 21
     336:	89 f4       	brne	.+34     	; 0x35a <ROBOT_moveUpdate+0x1d6>
						{
							u8_clearStrDone = TRUE ; 
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u8_clearStrDone.1735>
     33e:	0d c0       	rjmp	.+26     	; 0x35a <ROBOT_moveUpdate+0x1d6>
						}
					}
					else if(FALSE == u8_printStrDone)
     340:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_printStrDone.1734>
     344:	81 11       	cpse	r24, r1
     346:	09 c0       	rjmp	.+18     	; 0x35a <ROBOT_moveUpdate+0x1d6>
					{
						u8_printState = LCD_u8PrintStr(u8_backwardStr);
     348:	86 e6       	ldi	r24, 0x66	; 102
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 02 06 	call	0xc04	; 0xc04 <LCD_u8PrintStr>
						if(u8_LCD_OK == u8_printState)
     350:	85 31       	cpi	r24, 0x15	; 21
     352:	19 f4       	brne	.+6      	; 0x35a <ROBOT_moveUpdate+0x1d6>
						{
							u8_printStrDone = TRUE;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_printStrDone.1734>
						}
					}
				}
				if (EN_checkStateChange == VERY_CLOSE_TO_OBSTACLE)
     35a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     35e:	83 30       	cpi	r24, 0x03	; 3
     360:	31 f0       	breq	.+12     	; 0x36e <ROBOT_moveUpdate+0x1ea>
					u8_changeState = FALSE;
				}
				else
				{
					u8_changeState = TRUE;
					u8_printStrDone = FALSE;
     362:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u8_printStrDone.1734>
					u8_clearStrDone = FALSE; 
     366:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <u8_clearStrDone.1735>
				{
					u8_changeState = FALSE;
				}
				else
				{
					u8_changeState = TRUE;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <ROBOT_moveUpdate+0x1ec>
						}
					}
				}
				if (EN_checkStateChange == VERY_CLOSE_TO_OBSTACLE)
				{
					u8_changeState = FALSE;
     36e:	80 e0       	ldi	r24, 0x00	; 0
				{
					u8_changeState = TRUE;
					u8_printStrDone = FALSE;
					u8_clearStrDone = FALSE; 
				}
				if(u8_changeState == TRUE)
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	11 f4       	brne	.+4      	; 0x378 <ROBOT_moveUpdate+0x1f4>
				{
					u8_stopRequired = TRUE ; 
     374:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <u8_stopRequired.1736>
				}
				
				if(u8_stopRequired == FALSE )
     378:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <u8_stopRequired.1736>
     37c:	81 11       	cpse	r24, r1
     37e:	03 c0       	rjmp	.+6      	; 0x386 <ROBOT_moveUpdate+0x202>
				{
					STEERING_backward(STEERING_SPEED_30);
     380:	8c e3       	ldi	r24, 0x3C	; 60
     382:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <STEERING_backward>
				}
				
				EN_checkStateChange = VERY_CLOSE_TO_OBSTACLE;
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
     38c:	08 95       	ret

0000038e <STEERING_init>:
#include "../../ECUAL/MOTOR_CONTROL/MOTOR.h"
#include "STEERING.h"

void STEERING_init(void){
	
	Motor_Init(MOTOR_ID_01);
     38e:	84 e1       	ldi	r24, 0x14	; 20
     390:	0e 94 26 02 	call	0x44c	; 0x44c <Motor_Init>
	Motor_Init(MOTOR_ID_02);
     394:	85 e1       	ldi	r24, 0x15	; 21
     396:	0e 94 26 02 	call	0x44c	; 0x44c <Motor_Init>
     39a:	08 95       	ret

0000039c <STEERING_forward>:
}

void STEERING_forward(uint8_t u8_pwm){
	
	MoveAllMotors(FORWARD,FORWARD,u8_pwm);
     39c:	48 2f       	mov	r20, r24
     39e:	67 e1       	ldi	r22, 0x17	; 23
     3a0:	87 e1       	ldi	r24, 0x17	; 23
     3a2:	0e 94 ba 02 	call	0x574	; 0x574 <MoveAllMotors>
     3a6:	08 95       	ret

000003a8 <STEERING_backward>:
}

void STEERING_backward(uint8_t u8_pwm){
	
	MoveAllMotors(BACKWARD,BACKWARD,u8_pwm);
     3a8:	48 2f       	mov	r20, r24
     3aa:	68 e1       	ldi	r22, 0x18	; 24
     3ac:	88 e1       	ldi	r24, 0x18	; 24
     3ae:	0e 94 ba 02 	call	0x574	; 0x574 <MoveAllMotors>
     3b2:	08 95       	ret

000003b4 <STEERING_right>:
}

void STEERING_right(){
	
	Motor_Move(MOTOR_ID_02,FORWARD,STEERING_SPEED_80);
     3b4:	40 e5       	ldi	r20, 0x50	; 80
     3b6:	67 e1       	ldi	r22, 0x17	; 23
     3b8:	85 e1       	ldi	r24, 0x15	; 21
     3ba:	0e 94 a0 02 	call	0x540	; 0x540 <Motor_Move>
     3be:	08 95       	ret

000003c0 <STEERING_stop>:
}

void STEERING_stop(void){
	
	Motors_Stop();
     3c0:	0e 94 ce 02 	call	0x59c	; 0x59c <Motors_Stop>
     3c4:	08 95       	ret

000003c6 <ICU_voidExternalInterrupt02FallingISR>:
	return ICU_OK;
}

void ICU_voidExternalInterrupt02FallingISR(void)
{
	gu8_ICU_SIGNAL_STATUS=u8_FALLING_EDGE_HAPPENED;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu8_ICU_SIGNAL_STATUS>
     3cc:	08 95       	ret

000003ce <ICU_voidExternalInterrupt02RisgISR>:
}
void ICU_voidExternalInterrupt02RisgISR(void)
{
	gu8_ICU_SIGNAL_STATUS=u8_RISING_EDGE_HAPPENED;	
     3ce:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gu8_ICU_SIGNAL_STATUS>
     3d2:	08 95       	ret

000003d4 <ICU_enuInit>:
volatile ICU_SIGNAL_STATUS_t gu8_ICU_SIGNAL_STATUS= u8_ICU_WAITING_NEW_EDGE;


enu_ICU_ERROR ICU_enuInit()
{
	External_Interrupts_Init(EXTERNAL_INT_02,RISING_EDGE,ICU_voidExternalInterrupt02RisgISR);
     3d4:	47 ee       	ldi	r20, 0xE7	; 231
     3d6:	51 e0       	ldi	r21, 0x01	; 1
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0e 94 9b 08 	call	0x1136	; 0x1136 <External_Interrupts_Init>
	/*timer 1 init*/
	TIMER1_init(PRESCALE_8);
     3e0:	88 e0       	ldi	r24, 0x08	; 8
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 a6 09 	call	0x134c	; 0x134c <TIMER1_init>
	return ICU_OK;
}
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	08 95       	ret

000003ec <ICU_u8SingnalOnTime>:
void ICU_voidExternalInterrupt02RisgISR(void)
{
	gu8_ICU_SIGNAL_STATUS=u8_RISING_EDGE_HAPPENED;	
}
enu_ICU_ERROR ICU_u8SingnalOnTime(uint32_t *pu32_OnTime)
{
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
	if(pu32_OnTime == NULL_POINTER)
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	31 f1       	breq	.+76     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     3f4:	ec 01       	movw	r28, r24
	{
		return ICU_NOK;
	}
	enu_ICU_ERROR enu_ICU_ERROR_State;
	switch(gu8_ICU_SIGNAL_STATUS)
     3f6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gu8_ICU_SIGNAL_STATUS>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	91 f0       	breq	.+36     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     3fe:	20 f0       	brcs	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	01 f5       	brne	.+64     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			TIMER1_u32getCounts(pu32_OnTime, u8_FALLING_EDGE_HAPPENED);
			enu_ICU_ERROR_State= ICU_OK;
			break;
		
		case u8_ICU_WAITING_NEW_EDGE:
			enu_ICU_ERROR_State = ICU_NREADY;
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	1f c0       	rjmp	.+62     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	}
	enu_ICU_ERROR enu_ICU_ERROR_State;
	switch(gu8_ICU_SIGNAL_STATUS)
	{
		case u8_RISING_EDGE_HAPPENED:
			TIMER1_voidStartCounting();
     408:	0e 94 a8 0a 	call	0x1550	; 0x1550 <TIMER1_voidStartCounting>
			External_Interrupts_Init(EXTERNAL_INT_02,FALLING_EDGE,ICU_voidExternalInterrupt02FallingISR);
     40c:	43 ee       	ldi	r20, 0xE3	; 227
     40e:	51 e0       	ldi	r21, 0x01	; 1
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0e 94 9b 08 	call	0x1136	; 0x1136 <External_Interrupts_Init>
			gu8_ICU_SIGNAL_STATUS = u8_ICU_WAITING_NEW_EDGE;
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu8_ICU_SIGNAL_STATUS>
			enu_ICU_ERROR_State= ICU_NREADY;
     41e:	82 e0       	ldi	r24, 0x02	; 2
			break;
     420:	12 c0       	rjmp	.+36     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		
		case u8_FALLING_EDGE_HAPPENED:
			gu8_ICU_SIGNAL_STATUS=u8_ICU_WAITING_NEW_EDGE;
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu8_ICU_SIGNAL_STATUS>
			External_Interrupts_Init(EXTERNAL_INT_02,RISING_EDGE,ICU_voidExternalInterrupt02RisgISR);
     428:	47 ee       	ldi	r20, 0xE7	; 231
     42a:	51 e0       	ldi	r21, 0x01	; 1
     42c:	62 e0       	ldi	r22, 0x02	; 2
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	0e 94 9b 08 	call	0x1136	; 0x1136 <External_Interrupts_Init>
			TIMER1_u32getCounts(pu32_OnTime, u8_FALLING_EDGE_HAPPENED);
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	ce 01       	movw	r24, r28
     438:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIMER1_u32getCounts>
			enu_ICU_ERROR_State= ICU_OK;
     43c:	80 e0       	ldi	r24, 0x00	; 0
			break;
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
}
enu_ICU_ERROR ICU_u8SingnalOnTime(uint32_t *pu32_OnTime)
{
	if(pu32_OnTime == NULL_POINTER)
	{
		return ICU_NOK;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	01 c0       	rjmp	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		
		case u8_ICU_WAITING_NEW_EDGE:
			enu_ICU_ERROR_State = ICU_NREADY;
			break;
		default:
			enu_ICU_ERROR_State= ICU_NOK;
     444:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return enu_ICU_ERROR_State;
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <Motor_Init>:
#include "MOTOR.h"
#include "../../LIB/STD_TYPES.h"

uint8_t Motor_Init(uint8_t u8_MotorId)
{
	switch(u8_MotorId)
     44c:	84 31       	cpi	r24, 0x14	; 20
     44e:	19 f0       	breq	.+6      	; 0x456 <Motor_Init+0xa>
     450:	85 31       	cpi	r24, 0x15	; 21
     452:	e9 f0       	breq	.+58     	; 0x48e <Motor_Init+0x42>
     454:	38 c0       	rjmp	.+112    	; 0x4c6 <Motor_Init+0x7a>
	{
		case MOTOR_ID_01:
			SWPWM_voidInit();
     456:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SWPWM_voidInit>
			SWPWM_u8ControlChannels(u8_PWM_0_DUTY_PERCENT,u8_SWPWM_TO_CH1_AND_CH2);
     45a:	6a e7       	ldi	r22, 0x7A	; 122
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SWPWM_u8ControlChannels>
			DIO_SetPinDirection(MOTOR_01_DIR_PORT,MOTOR_01_DIR_PIN01, OUTPUT);
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
			DIO_SetPinDirection(MOTOR_01_DIR_PORT,MOTOR_01_DIR_PIN02, OUTPUT);
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	63 e0       	ldi	r22, 0x03	; 3
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_DIR_PIN01, LOW);
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	62 e0       	ldi	r22, 0x02	; 2
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_DIR_PIN02, LOW);
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	63 e0       	ldi	r22, 0x03	; 3
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	08 95       	ret
			break;
		case MOTOR_ID_02:
			SWPWM_voidInit();
     48e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SWPWM_voidInit>
			SWPWM_u8ControlChannels(u8_PWM_0_DUTY_PERCENT,u8_SWPWM_TO_CH1_AND_CH2);
     492:	6a e7       	ldi	r22, 0x7A	; 122
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SWPWM_u8ControlChannels>
			DIO_SetPinDirection(MOTOR_02_DIR_PORT,MOTOR_02_DIR_PIN01,OUTPUT);
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	66 e0       	ldi	r22, 0x06	; 6
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
			DIO_SetPinDirection(MOTOR_02_DIR_PORT,MOTOR_02_DIR_PIN02,OUTPUT);
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	67 e0       	ldi	r22, 0x07	; 7
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
			DIO_SetPinValue(MOTOR_02_DIR_PORT, MOTOR_02_DIR_PIN01,LOW);
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	66 e0       	ldi	r22, 0x06	; 6
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			DIO_SetPinValue(MOTOR_02_DIR_PORT,MOTOR_02_DIR_PIN02, LOW);
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	67 e0       	ldi	r22, 0x07	; 7
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     4c6:	80 e0       	ldi	r24, 0x00	; 0
	}

}
     4c8:	08 95       	ret

000004ca <Motor_setDirection>:
uint8_t Motor_setDirection(uint8_t u8_MotorId, uint8_t u8_MotorDirection)
{
	switch(u8_MotorId)
     4ca:	84 31       	cpi	r24, 0x14	; 20
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <Motor_setDirection+0xa>
     4ce:	85 31       	cpi	r24, 0x15	; 21
     4d0:	d9 f0       	breq	.+54     	; 0x508 <Motor_setDirection+0x3e>
     4d2:	34 c0       	rjmp	.+104    	; 0x53c <Motor_setDirection+0x72>
	{
		case MOTOR_ID_01:
			if(u8_MotorDirection == FORWARD)
     4d4:	67 31       	cpi	r22, 0x17	; 23
     4d6:	61 f4       	brne	.+24     	; 0x4f0 <Motor_setDirection+0x26>
			{
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN01, LOW);
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN02, HIGH);
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	63 e0       	ldi	r22, 0x03	; 3
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			else
			{
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN01, HIGH);
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN02, LOW);
			}
			return MOTOR_ERROR_OK;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	08 95       	ret
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN01, LOW);
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN02, HIGH);
			}
			else
			{
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN01, HIGH);
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	62 e0       	ldi	r22, 0x02	; 2
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
				DIO_SetPinValue(MOTOR_01_DIR_PORT , MOTOR_01_DIR_PIN02, LOW);
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			}
			return MOTOR_ERROR_OK;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	08 95       	ret
			break;
		case MOTOR_ID_02:
			if(u8_MotorDirection == FORWARD)
     508:	67 31       	cpi	r22, 0x17	; 23
     50a:	61 f4       	brne	.+24     	; 0x524 <Motor_setDirection+0x5a>
			{
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN01, LOW);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	66 e0       	ldi	r22, 0x06	; 6
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN02, HIGH);
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	67 e0       	ldi	r22, 0x07	; 7
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			else
			{
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN01, HIGH);
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN02, LOW);
			}
			return MOTOR_ERROR_OK;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	08 95       	ret
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN01, LOW);
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN02, HIGH);
			}
			else
			{
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN01, HIGH);
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	66 e0       	ldi	r22, 0x06	; 6
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
				DIO_SetPinValue(MOTOR_02_DIR_PORT , MOTOR_02_DIR_PIN02, LOW);
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	67 e0       	ldi	r22, 0x07	; 7
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			}
			return MOTOR_ERROR_OK;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     53c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return MOTOR_ERROR_NOK;
}
     53e:	08 95       	ret

00000540 <Motor_Move>:
uint8_t Motor_Move(uint8_t MotorId, uint8_t u8_MotorDirection,uint8_t u8_MotorPower)
{
     540:	cf 93       	push	r28
     542:	c4 2f       	mov	r28, r20
	switch(MotorId)
     544:	84 31       	cpi	r24, 0x14	; 20
     546:	19 f0       	breq	.+6      	; 0x54e <Motor_Move+0xe>
     548:	85 31       	cpi	r24, 0x15	; 21
     54a:	49 f0       	breq	.+18     	; 0x55e <Motor_Move+0x1e>
     54c:	10 c0       	rjmp	.+32     	; 0x56e <Motor_Move+0x2e>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     54e:	0e 94 65 02 	call	0x4ca	; 0x4ca <Motor_setDirection>
			SWPWM_u8ControlChannels(u8_MotorPower,u8_SWPWM_TO_CH1_STOP_CH2);
     552:	68 e7       	ldi	r22, 0x78	; 120
     554:	8c 2f       	mov	r24, r28
     556:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SWPWM_u8ControlChannels>
			return MOTOR_ERROR_OK;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	09 c0       	rjmp	.+18     	; 0x570 <Motor_Move+0x30>
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     55e:	0e 94 65 02 	call	0x4ca	; 0x4ca <Motor_setDirection>
			SWPWM_u8ControlChannels(u8_MotorPower,u8_SWPWM_TO_CH2_STOP_CH1);
     562:	69 e7       	ldi	r22, 0x79	; 121
     564:	8c 2f       	mov	r24, r28
     566:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SWPWM_u8ControlChannels>
			return MOTOR_ERROR_OK;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	01 c0       	rjmp	.+2      	; 0x570 <Motor_Move+0x30>
			break;
		default:
			return MOTOR_ERROR_NOK;
     56e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <MoveAllMotors>:
uint8_t MoveAllMotors(uint8_t u8_Motor01Direction,uint8_t u8_Motor02Direction,uint8_t u8_MotorsPower)
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	d6 2f       	mov	r29, r22
     57a:	c4 2f       	mov	r28, r20
	Motor_setDirection(MOTOR_ID_01,u8_Motor01Direction);
     57c:	68 2f       	mov	r22, r24
     57e:	84 e1       	ldi	r24, 0x14	; 20
     580:	0e 94 65 02 	call	0x4ca	; 0x4ca <Motor_setDirection>
	Motor_setDirection(MOTOR_ID_02,u8_Motor02Direction);
     584:	6d 2f       	mov	r22, r29
     586:	85 e1       	ldi	r24, 0x15	; 21
     588:	0e 94 65 02 	call	0x4ca	; 0x4ca <Motor_setDirection>
	SWPWM_u8ControlChannels(u8_MotorsPower,u8_SWPWM_TO_CH1_AND_CH2);
     58c:	6a e7       	ldi	r22, 0x7A	; 122
     58e:	8c 2f       	mov	r24, r28
     590:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SWPWM_u8ControlChannels>
	return MOTOR_ERROR_OK;

}
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <Motors_Stop>:

uint8_t Motors_Stop(void){
	
	Motor_Move(MOTOR_ID_01,BACKWARD,MOTOR_POWER_00);
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	68 e1       	ldi	r22, 0x18	; 24
     5a0:	84 e1       	ldi	r24, 0x14	; 20
     5a2:	0e 94 a0 02 	call	0x540	; 0x540 <Motor_Move>
	Motor_Move(MOTOR_ID_02,BACKWARD,MOTOR_POWER_00);
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	68 e1       	ldi	r22, 0x18	; 24
     5aa:	85 e1       	ldi	r24, 0x15	; 21
     5ac:	0e 94 a0 02 	call	0x540	; 0x540 <Motor_Move>
	
	return MOTOR_ERROR_OK;
}
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	08 95       	ret

000005b4 <LCD_u8sendCommand>:


/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
     5b4:	cf 93       	push	r28
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
	if(LCD_stateData == LCD_data_ready_state )
     5b6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <LCD_stateData>
     5ba:	95 30       	cpi	r25, 0x05	; 5
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <LCD_u8sendCommand+0xc>
     5be:	b7 c0       	rjmp	.+366    	; 0x72e <LCD_u8sendCommand+0x17a>
	{
		if(LCD_stateCommand == LCD_command_ready_state)
     5c0:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <LCD_stateCommand>
     5c4:	95 30       	cpi	r25, 0x05	; 5
     5c6:	11 f4       	brne	.+4      	; 0x5cc <LCD_u8sendCommand+0x18>
		{
			LCD_stateCommand = LCD_command_state1 ; 
     5c8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <LCD_stateCommand>
     5cc:	c8 2f       	mov	r28, r24
		}
	
		switch(LCD_stateCommand)
     5ce:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <LCD_stateCommand>
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <LCD_u8sendCommand+0x24>
     5d6:	5e c0       	rjmp	.+188    	; 0x694 <LCD_u8sendCommand+0xe0>
     5d8:	28 f4       	brcc	.+10     	; 0x5e4 <LCD_u8sendCommand+0x30>
     5da:	88 23       	and	r24, r24
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <LCD_u8sendCommand+0x3e>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	39 f1       	breq	.+78     	; 0x630 <LCD_u8sendCommand+0x7c>
     5e2:	a7 c0       	rjmp	.+334    	; 0x732 <LCD_u8sendCommand+0x17e>
     5e4:	83 30       	cpi	r24, 0x03	; 3
     5e6:	09 f4       	brne	.+2      	; 0x5ea <LCD_u8sendCommand+0x36>
     5e8:	85 c0       	rjmp	.+266    	; 0x6f4 <LCD_u8sendCommand+0x140>
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <LCD_u8sendCommand+0x3c>
     5ee:	96 c0       	rjmp	.+300    	; 0x71c <LCD_u8sendCommand+0x168>
     5f0:	a0 c0       	rjmp	.+320    	; 0x732 <LCD_u8sendCommand+0x17e>
		{
			case LCD_command_state1:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     5f2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>

				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     5f6:	8d 31       	cpi	r24, 0x1D	; 29
     5f8:	09 f0       	breq	.+2      	; 0x5fc <LCD_u8sendCommand+0x48>
     5fa:	9d c0       	rjmp	.+314    	; 0x736 <LCD_u8sendCommand+0x182>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,HIGH) ;
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	63 e0       	ldi	r22, 0x03	; 3
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_RS,LOW) ;
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_RW,LOW) ;
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					/*SETTING HIGHER SIGNIFICANT BITS */
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state2 ;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <LCD_stateCommand>

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     62c:	84 e1       	ldi	r24, 0x14	; 20
     62e:	8c c0       	rjmp	.+280    	; 0x748 <LCD_u8sendCommand+0x194>
				}
				break ; 
					
			case LCD_command_state2:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     630:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     634:	8d 31       	cpi	r24, 0x1D	; 29
     636:	09 f0       	breq	.+2      	; 0x63a <LCD_u8sendCommand+0x86>
     638:	80 c0       	rjmp	.+256    	; 0x73a <LCD_u8sendCommand+0x186>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D7_BIT));
     63a:	4c 2f       	mov	r20, r28
     63c:	44 1f       	adc	r20, r20
     63e:	44 27       	eor	r20, r20
     640:	44 1f       	adc	r20, r20
     642:	67 e0       	ldi	r22, 0x07	; 7
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D6_BIT));
     64a:	c6 fb       	bst	r28, 6
     64c:	44 27       	eor	r20, r20
     64e:	40 f9       	bld	r20, 0
     650:	66 e0       	ldi	r22, 0x06	; 6
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D5_BIT)) ;
     658:	c5 fb       	bst	r28, 5
     65a:	44 27       	eor	r20, r20
     65c:	40 f9       	bld	r20, 0
     65e:	65 e0       	ldi	r22, 0x05	; 5
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D4_BIT)) ;
     666:	c4 fb       	bst	r28, 4
     668:	44 27       	eor	r20, r20
     66a:	40 f9       	bld	r20, 0
     66c:	64 e0       	ldi	r22, 0x04	; 4
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,LOW) ;
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	63 e0       	ldi	r22, 0x03	; 3
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state3 ; 
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <LCD_stateCommand>

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	5a c0       	rjmp	.+180    	; 0x748 <LCD_u8sendCommand+0x194>
				}
				break ; 
				
			case LCD_command_state3:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     694:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     698:	8d 31       	cpi	r24, 0x1D	; 29
     69a:	09 f0       	breq	.+2      	; 0x69e <LCD_u8sendCommand+0xea>
     69c:	50 c0       	rjmp	.+160    	; 0x73e <LCD_u8sendCommand+0x18a>
				{
					/*SETTING LOWER SIGNIFICANT BITS */
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,HIGH) ;
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D3_BIT));
     6a8:	c3 fb       	bst	r28, 3
     6aa:	44 27       	eor	r20, r20
     6ac:	40 f9       	bld	r20, 0
     6ae:	67 e0       	ldi	r22, 0x07	; 7
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D2_BIT));
     6b6:	c2 fb       	bst	r28, 2
     6b8:	44 27       	eor	r20, r20
     6ba:	40 f9       	bld	r20, 0
     6bc:	66 e0       	ldi	r22, 0x06	; 6
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D1_BIT)) ;
     6c4:	c1 fb       	bst	r28, 1
     6c6:	44 27       	eor	r20, r20
     6c8:	40 f9       	bld	r20, 0
     6ca:	65 e0       	ldi	r22, 0x05	; 5
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D0_BIT)) ;
     6d2:	4c 2f       	mov	r20, r28
     6d4:	41 70       	andi	r20, 0x01	; 1
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state4 ; 
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <LCD_stateCommand>

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     6f0:	84 e1       	ldi	r24, 0x14	; 20
     6f2:	2a c0       	rjmp	.+84     	; 0x748 <LCD_u8sendCommand+0x194>
				}
				break ; 
			
			case LCD_command_state4:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     6f4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     6f8:	8d 31       	cpi	r24, 0x1D	; 29
     6fa:	19 f5       	brne	.+70     	; 0x742 <LCD_u8sendCommand+0x18e>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,LOW) ;
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state5 ; 
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <LCD_stateCommand>

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     718:	84 e1       	ldi	r24, 0x14	; 20
     71a:	16 c0       	rjmp	.+44     	; 0x748 <LCD_u8sendCommand+0x194>
					LCD_stateCommand = LCD_command_state5 ; 
				}
				break ; 
			case LCD_command_state5:
				
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     71c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     720:	8d 31       	cpi	r24, 0x1D	; 29
     722:	89 f4       	brne	.+34     	; 0x746 <LCD_u8sendCommand+0x192>
				{
					LCD_stateCommand = LCD_command_ready_state ;
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <LCD_stateCommand>
					u8_returnState = u8_LCD_OK ;
     72a:	85 e1       	ldi	r24, 0x15	; 21
     72c:	0d c0       	rjmp	.+26     	; 0x748 <LCD_u8sendCommand+0x194>

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     72e:	84 e1       	ldi	r24, 0x14	; 20
     730:	0b c0       	rjmp	.+22     	; 0x748 <LCD_u8sendCommand+0x194>
     732:	84 e1       	ldi	r24, 0x14	; 20
     734:	09 c0       	rjmp	.+18     	; 0x748 <LCD_u8sendCommand+0x194>
     736:	84 e1       	ldi	r24, 0x14	; 20
     738:	07 c0       	rjmp	.+14     	; 0x748 <LCD_u8sendCommand+0x194>
     73a:	84 e1       	ldi	r24, 0x14	; 20
     73c:	05 c0       	rjmp	.+10     	; 0x748 <LCD_u8sendCommand+0x194>
     73e:	84 e1       	ldi	r24, 0x14	; 20
     740:	03 c0       	rjmp	.+6      	; 0x748 <LCD_u8sendCommand+0x194>
     742:	84 e1       	ldi	r24, 0x14	; 20
     744:	01 c0       	rjmp	.+2      	; 0x748 <LCD_u8sendCommand+0x194>
     746:	84 e1       	ldi	r24, 0x14	; 20
		}
	}

	return u8_returnState ; 
	
}
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <LCD_u8Init>:
{

	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
     74c:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <LCD_stateInit>
     750:	eb 30       	cpi	r30, 0x0B	; 11
     752:	09 f4       	brne	.+2      	; 0x756 <LCD_u8Init+0xa>
     754:	6c c1       	rjmp	.+728    	; 0xa2e <__stack+0x1cf>
	{
		u8_returnState =u8_LCD_NOK ;

		switch(LCD_stateInit)
     756:	8e 2f       	mov	r24, r30
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	91 05       	cpc	r25, r1
     75e:	08 f0       	brcs	.+2      	; 0x762 <LCD_u8Init+0x16>
     760:	68 c1       	rjmp	.+720    	; 0xa32 <__stack+0x1d3>
     762:	fc 01       	movw	r30, r24
     764:	e6 5d       	subi	r30, 0xD6	; 214
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__tablejump2__>
		{
			case LCD_timer_Init:
					TIMER0_voidInit();
     76c:	0e 94 41 0b 	call	0x1682	; 0x1682 <TIMER0_voidInit>
					//intialing pins direction and values
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_RS,OUTPUT) ;
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_RW,OUTPUT) ;
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_E,OUTPUT) ;
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D4,OUTPUT) ;
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D5,OUTPUT) ;
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D6,OUTPUT) ;
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	66 e0       	ldi	r22, 0x06	; 6
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D7,OUTPUT) ;
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	67 e0       	ldi	r22, 0x07	; 7
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
					TIMER0_u8InterruptWait(u8_LCD_INTIAL_1st_WAITING_TIME_MS);
     7b6:	62 e3       	ldi	r22, 0x32	; 50
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateInit = LCD_initialize_state1 ;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     7c8:	84 e1       	ldi	r24, 0x14	; 20
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D6,OUTPUT) ;
					DIO_SetPinDirection(u8_LCD_PORT,u8_LCD_D7,OUTPUT) ;
					TIMER0_u8InterruptWait(u8_LCD_INTIAL_1st_WAITING_TIME_MS);
					LCD_stateInit = LCD_initialize_state1 ;

					break ; 
     7ca:	08 95       	ret
			case LCD_initialize_state1:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     7cc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     7d0:	8d 31       	cpi	r24, 0x1D	; 29
     7d2:	59 f4       	brne	.+22     	; 0x7ea <LCD_u8Init+0x9e>
					{
						//INTIALIZING COMMANDS TO LCD
						u8_commState=LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_commState==u8_LCD_NOK)
     7da:	84 31       	cpi	r24, 0x14	; 20
     7dc:	19 f4       	brne	.+6      	; 0x7e4 <LCD_u8Init+0x98>
						{
							u8_commFinished = u8_LCD_FALSE ;
     7de:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <LCD_u8Init+0x9e>
						}
						else
						{

							u8_commFinished = u8_LCD_TRUE ;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}

					}
					if(u8_commFinished == u8_LCD_TRUE)
     7ea:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <LCD_u8Init+0xa8>
     7f2:	21 c1       	rjmp	.+578    	; 0xa36 <__stack+0x1d7>
					{
						u8_commFinished = u8_LCD_FALSE ;
     7f4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
						LCD_stateInit = LCD_initialize_state2 ;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     80a:	84 e1       	ldi	r24, 0x14	; 20
     80c:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state2:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     80e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     812:	8d 31       	cpi	r24, 0x1D	; 29
     814:	59 f4       	brne	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
					{
						    u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
							if(u8_commState==u8_LCD_NOK)
     81c:	84 31       	cpi	r24, 0x14	; 20
     81e:	19 f4       	brne	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
							{
								u8_commFinished = u8_LCD_FALSE ;
     820:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
							}
							else
							{
								u8_commFinished = u8_LCD_TRUE ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
							}

					}
					if(u8_commFinished == u8_LCD_TRUE)
     82c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	09 f0       	breq	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	02 c1       	rjmp	.+516    	; 0xa3a <__stack+0x1db>
					{

						LCD_stateInit = LCD_initialize_state3 ;
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     848:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     84c:	84 e1       	ldi	r24, 0x14	; 20
     84e:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state3:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     850:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     854:	8d 31       	cpi	r24, 0x1D	; 29
     856:	59 f4       	brne	.+22     	; 0x86e <__stack+0xf>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>

						if(u8_commState==u8_LCD_NOK)
     85e:	84 31       	cpi	r24, 0x14	; 20
     860:	19 f4       	brne	.+6      	; 0x868 <__stack+0x9>
						{
							u8_commFinished = u8_LCD_FALSE ;
     862:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}
					}

					if(u8_commFinished == u8_LCD_TRUE)
     86e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
     876:	e3 c0       	rjmp	.+454    	; 0xa3e <__stack+0x1df>
					{
						LCD_stateInit = LCD_initialize_state4 ;
     878:	84 e0       	ldi	r24, 0x04	; 4
     87a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     88a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     88e:	84 e1       	ldi	r24, 0x14	; 20
     890:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state4:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     892:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     896:	8d 31       	cpi	r24, 0x1D	; 29
     898:	59 f4       	brne	.+22     	; 0x8b0 <__stack+0x51>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND2) ;
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_commState==u8_LCD_NOK)
     8a0:	84 31       	cpi	r24, 0x14	; 20
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
						{
							u8_commFinished = u8_LCD_FALSE ;
     8a4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__stack+0x51>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
     8b0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	c4 c0       	rjmp	.+392    	; 0xa42 <__stack+0x1e3>
					{
						LCD_stateInit = LCD_initialize_state5 ;
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     8cc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     8d0:	84 e1       	ldi	r24, 0x14	; 20
     8d2:	08 95       	ret
						u8_commFinished = u8_LCD_FALSE ;
					}
					break;
	
			case LCD_initialize_state5:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     8d4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     8d8:	8d 31       	cpi	r24, 0x1D	; 29
     8da:	59 f4       	brne	.+22     	; 0x8f2 <__stack+0x93>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_MULTI_LINE_DIS_COM) ;
     8dc:	88 e2       	ldi	r24, 0x28	; 40
     8de:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_commState==u8_LCD_NOK)
     8e2:	84 31       	cpi	r24, 0x14	; 20
     8e4:	19 f4       	brne	.+6      	; 0x8ec <__stack+0x8d>
						{
							u8_commFinished = u8_LCD_FALSE ;
     8e6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <__stack+0x93>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
     8f2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <__stack+0x9d>
     8fa:	a5 c0       	rjmp	.+330    	; 0xa46 <__stack+0x1e7>
					{
						LCD_stateInit = LCD_initialize_state6 ;
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     90e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     912:	84 e1       	ldi	r24, 0x14	; 20
     914:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state6:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     916:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     91a:	8d 31       	cpi	r24, 0x1D	; 29
     91c:	59 f4       	brne	.+22     	; 0x934 <__stack+0xd5>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND4) ;
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>
						if(u8_commState==u8_LCD_NOK)
     924:	84 31       	cpi	r24, 0x14	; 20
     926:	19 f4       	brne	.+6      	; 0x92e <__stack+0xcf>
						{
							u8_commFinished = u8_LCD_FALSE ;
     928:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     92c:	03 c0       	rjmp	.+6      	; 0x934 <__stack+0xd5>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}
					}

					if(u8_commFinished == u8_LCD_TRUE)
     934:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0xdf>
     93c:	86 c0       	rjmp	.+268    	; 0xa4a <__stack+0x1eb>
					{
						LCD_stateInit = LCD_initialize_state7 ;
     93e:	87 e0       	ldi	r24, 0x07	; 7
     940:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     950:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     954:	84 e1       	ldi	r24, 0x14	; 20
     956:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state7:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     958:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     95c:	8d 31       	cpi	r24, 0x1D	; 29
     95e:	59 f4       	brne	.+22     	; 0x976 <__stack+0x117>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND5) ;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>

						if(u8_commState==u8_LCD_NOK)
     966:	84 31       	cpi	r24, 0x14	; 20
     968:	19 f4       	brne	.+6      	; 0x970 <__stack+0x111>
						{
							u8_commFinished = u8_LCD_FALSE ;
     96a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     96e:	03 c0       	rjmp	.+6      	; 0x976 <__stack+0x117>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}


					}

					if  (u8_commFinished == u8_LCD_TRUE)
     976:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x121>
     97e:	67 c0       	rjmp	.+206    	; 0xa4e <__stack+0x1ef>
					{
						LCD_stateInit = LCD_initialize_state8 ;
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     992:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     996:	84 e1       	ldi	r24, 0x14	; 20
     998:	08 95       	ret

					}
					break;
	
			case LCD_initialize_state8:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     99a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     99e:	8d 31       	cpi	r24, 0x1D	; 29
     9a0:	59 f4       	brne	.+22     	; 0x9b8 <__stack+0x159>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND6) ;
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>

						if(u8_commState==u8_LCD_NOK)
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <__stack+0x153>
						{
							u8_commFinished = u8_LCD_FALSE ;
     9ac:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0x159>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
     9b8:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__stack+0x163>
     9c0:	48 c0       	rjmp	.+144    	; 0xa52 <__stack+0x1f3>
					{
						LCD_stateInit = LCD_initialize_state9 ;
     9c2:	89 e0       	ldi	r24, 0x09	; 9
     9c4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     9d4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     9d8:	84 e1       	ldi	r24, 0x14	; 20
     9da:	08 95       	ret
					}
						
					break;
	
			case LCD_initialize_state9:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     9dc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     9e0:	8d 31       	cpi	r24, 0x1D	; 29
     9e2:	59 f4       	brne	.+22     	; 0x9fa <__stack+0x19b>
					{
						u8_commState=LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND7) ;
     9e4:	8c e0       	ldi	r24, 0x0C	; 12
     9e6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_u8sendCommand>

						if(u8_commState==u8_LCD_NOK)
     9ea:	84 31       	cpi	r24, 0x14	; 20
     9ec:	19 f4       	brne	.+6      	; 0x9f4 <__stack+0x195>
						{
							u8_commFinished = u8_LCD_FALSE ;
     9ee:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0x19b>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <u8_commFinished.1705>
						}

					}

					if (u8_commFinished == u8_LCD_TRUE)
     9fa:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <u8_commFinished.1705>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	51 f5       	brne	.+84     	; 0xa56 <__stack+0x1f7>
					{
						LCD_stateInit = LCD_initialize_state10 ;
     a02:	8a e0       	ldi	r24, 0x0A	; 10
     a04:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
     a14:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u8_commFinished.1705>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     a18:	84 e1       	ldi	r24, 0x14	; 20
     a1a:	08 95       	ret
					}
						
					break;
	
			case LCD_initialize_state10:
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;
     a1c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
				if((u8_timerState==u8_FINISH_INTERRUPT_WAITING))
     a20:	8d 31       	cpi	r24, 0x1D	; 29
     a22:	d9 f4       	brne	.+54     	; 0xa5a <__stack+0x1fb>
				{
					LCD_stateInit = LCD_initializing_finished ;
     a24:	8b e0       	ldi	r24, 0x0B	; 11
     a26:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <LCD_stateInit>
	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     a2a:	84 e1       	ldi	r24, 0x14	; 20
     a2c:	08 95       	ret
LCD_SEND_COMMAND_STATE_t LCD_stateCommand = LCD_command_state1 ; 
LCD_SEND_DATA_STATE_t LCD_stateData = LCD_data_ready_state ;
uint8_t LCD_u8Init(void)
{

	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
     a2e:	85 e1       	ldi	r24, 0x15	; 21
     a30:	08 95       	ret
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_FALSE ;
	if(LCD_stateInit != LCD_initializing_finished)
	{
		u8_returnState =u8_LCD_NOK ;
     a32:	84 e1       	ldi	r24, 0x14	; 20
     a34:	08 95       	ret
     a36:	84 e1       	ldi	r24, 0x14	; 20
     a38:	08 95       	ret
     a3a:	84 e1       	ldi	r24, 0x14	; 20
     a3c:	08 95       	ret
     a3e:	84 e1       	ldi	r24, 0x14	; 20
     a40:	08 95       	ret
     a42:	84 e1       	ldi	r24, 0x14	; 20
     a44:	08 95       	ret
     a46:	84 e1       	ldi	r24, 0x14	; 20
     a48:	08 95       	ret
     a4a:	84 e1       	ldi	r24, 0x14	; 20
     a4c:	08 95       	ret
     a4e:	84 e1       	ldi	r24, 0x14	; 20
     a50:	08 95       	ret
     a52:	84 e1       	ldi	r24, 0x14	; 20
     a54:	08 95       	ret
     a56:	84 e1       	ldi	r24, 0x14	; 20
     a58:	08 95       	ret
     a5a:	84 e1       	ldi	r24, 0x14	; 20
		}
	}
	
	
	return u8_returnState ; 
}
     a5c:	08 95       	ret

00000a5e <LCD_u8sendData>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
     a5e:	cf 93       	push	r28
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
	if(LCD_stateCommand == LCD_command_ready_state && LCD_stateInit == LCD_initializing_finished)
     a60:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <LCD_stateCommand>
     a64:	95 30       	cpi	r25, 0x05	; 5
     a66:	09 f0       	breq	.+2      	; 0xa6a <LCD_u8sendData+0xc>
     a68:	bc c0       	rjmp	.+376    	; 0xbe2 <LCD_u8sendData+0x184>
     a6a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <LCD_stateInit>
     a6e:	9b 30       	cpi	r25, 0x0B	; 11
     a70:	09 f0       	breq	.+2      	; 0xa74 <LCD_u8sendData+0x16>
     a72:	b9 c0       	rjmp	.+370    	; 0xbe6 <LCD_u8sendData+0x188>
	{
		if(LCD_stateData == LCD_data_ready_state)
     a74:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <LCD_stateData>
     a78:	95 30       	cpi	r25, 0x05	; 5
     a7a:	11 f4       	brne	.+4      	; 0xa80 <LCD_u8sendData+0x22>
		{
			LCD_stateData = LCD_data_state1 ; 
     a7c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <LCD_stateData>
     a80:	c8 2f       	mov	r28, r24
		}
	
		switch(LCD_stateData)
     a82:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <LCD_stateData>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	09 f4       	brne	.+2      	; 0xa8c <LCD_u8sendData+0x2e>
     a8a:	5e c0       	rjmp	.+188    	; 0xb48 <LCD_u8sendData+0xea>
     a8c:	28 f4       	brcc	.+10     	; 0xa98 <LCD_u8sendData+0x3a>
     a8e:	88 23       	and	r24, r24
     a90:	51 f0       	breq	.+20     	; 0xaa6 <LCD_u8sendData+0x48>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	39 f1       	breq	.+78     	; 0xae4 <LCD_u8sendData+0x86>
     a96:	a9 c0       	rjmp	.+338    	; 0xbea <LCD_u8sendData+0x18c>
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	09 f4       	brne	.+2      	; 0xa9e <LCD_u8sendData+0x40>
     a9c:	85 c0       	rjmp	.+266    	; 0xba8 <LCD_u8sendData+0x14a>
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <LCD_u8sendData+0x46>
     aa2:	96 c0       	rjmp	.+300    	; 0xbd0 <LCD_u8sendData+0x172>
     aa4:	a2 c0       	rjmp	.+324    	; 0xbea <LCD_u8sendData+0x18c>
		{
			case LCD_data_state1:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     aa6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     aaa:	8d 31       	cpi	r24, 0x1D	; 29
     aac:	09 f0       	breq	.+2      	; 0xab0 <LCD_u8sendData+0x52>
     aae:	9f c0       	rjmp	.+318    	; 0xbee <LCD_u8sendData+0x190>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,HIGH) ;
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	63 e0       	ldi	r22, 0x03	; 3
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_RS,HIGH) ;
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_RW,LOW) ;
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					/*SETTING HIGHER SIGNIFICANT BITS */
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state2 ; 
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_stateData>
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     ae0:	84 e1       	ldi	r24, 0x14	; 20
     ae2:	8e c0       	rjmp	.+284    	; 0xc00 <LCD_u8sendData+0x1a2>
				}
				break ; 
					
			case LCD_data_state2:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     ae4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     ae8:	8d 31       	cpi	r24, 0x1D	; 29
     aea:	09 f0       	breq	.+2      	; 0xaee <LCD_u8sendData+0x90>
     aec:	82 c0       	rjmp	.+260    	; 0xbf2 <LCD_u8sendData+0x194>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D7,GET_BIT(u8_WantedData,u8_LCD_D7_BIT));
     aee:	4c 2f       	mov	r20, r28
     af0:	44 1f       	adc	r20, r20
     af2:	44 27       	eor	r20, r20
     af4:	44 1f       	adc	r20, r20
     af6:	67 e0       	ldi	r22, 0x07	; 7
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D6,GET_BIT(u8_WantedData,u8_LCD_D6_BIT));
     afe:	c6 fb       	bst	r28, 6
     b00:	44 27       	eor	r20, r20
     b02:	40 f9       	bld	r20, 0
     b04:	66 e0       	ldi	r22, 0x06	; 6
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D5,GET_BIT(u8_WantedData,u8_LCD_D5_BIT)) ;
     b0c:	c5 fb       	bst	r28, 5
     b0e:	44 27       	eor	r20, r20
     b10:	40 f9       	bld	r20, 0
     b12:	65 e0       	ldi	r22, 0x05	; 5
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D4,GET_BIT(u8_WantedData,u8_LCD_D4_BIT)) ;
     b1a:	c4 fb       	bst	r28, 4
     b1c:	44 27       	eor	r20, r20
     b1e:	40 f9       	bld	r20, 0
     b20:	64 e0       	ldi	r22, 0x04	; 4
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,LOW) ;
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state3 ; 
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_stateData>
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     b44:	84 e1       	ldi	r24, 0x14	; 20
     b46:	5c c0       	rjmp	.+184    	; 0xc00 <LCD_u8sendData+0x1a2>
				}
				break ; 
				
			case LCD_data_state3:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     b48:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     b4c:	8d 31       	cpi	r24, 0x1D	; 29
     b4e:	09 f0       	breq	.+2      	; 0xb52 <LCD_u8sendData+0xf4>
     b50:	52 c0       	rjmp	.+164    	; 0xbf6 <LCD_u8sendData+0x198>
				{
					/*SETTING LOWER SIGNIFICANT BITS */
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,HIGH) ;
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D7,GET_BIT(u8_WantedData,u8_LCD_D3_BIT));
     b5c:	c3 fb       	bst	r28, 3
     b5e:	44 27       	eor	r20, r20
     b60:	40 f9       	bld	r20, 0
     b62:	67 e0       	ldi	r22, 0x07	; 7
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D6,GET_BIT(u8_WantedData,u8_LCD_D2_BIT));
     b6a:	c2 fb       	bst	r28, 2
     b6c:	44 27       	eor	r20, r20
     b6e:	40 f9       	bld	r20, 0
     b70:	66 e0       	ldi	r22, 0x06	; 6
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D5,GET_BIT(u8_WantedData,u8_LCD_D1_BIT)) ;
     b78:	c1 fb       	bst	r28, 1
     b7a:	44 27       	eor	r20, r20
     b7c:	40 f9       	bld	r20, 0
     b7e:	65 e0       	ldi	r22, 0x05	; 5
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_D4,GET_BIT(u8_WantedData,u8_LCD_D0_BIT)) ;
     b86:	4c 2f       	mov	r20, r28
     b88:	41 70       	andi	r20, 0x01	; 1
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state4 ; 
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_stateData>
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     ba4:	84 e1       	ldi	r24, 0x14	; 20
     ba6:	2c c0       	rjmp	.+88     	; 0xc00 <LCD_u8sendData+0x1a2>
				}
				break ; 
			
			case LCD_data_state4:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     ba8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     bac:	8d 31       	cpi	r24, 0x1D	; 29
     bae:	29 f5       	brne	.+74     	; 0xbfa <LCD_u8sendData+0x19c>
				{
					DIO_SetPinValue(u8_LCD_PORT,u8_LCD_E,LOW) ;
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	63 e0       	ldi	r22, 0x03	; 3
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state5 ; 
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_stateData>
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     bcc:	84 e1       	ldi	r24, 0x14	; 20
     bce:	18 c0       	rjmp	.+48     	; 0xc00 <LCD_u8sendData+0x1a2>
					LCD_stateData = LCD_data_state5 ; 
				}
				break ; 
			case LCD_data_state5:
				
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
     bd0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <TIMER0_u8GetIntWaitStatus>
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
     bd4:	8d 31       	cpi	r24, 0x1D	; 29
     bd6:	99 f4       	brne	.+38     	; 0xbfe <LCD_u8sendData+0x1a0>
				{
					LCD_stateData = LCD_data_ready_state ;
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_stateData>
					u8_returnState = u8_LCD_OK ;
     bde:	85 e1       	ldi	r24, 0x15	; 21
     be0:	0f c0       	rjmp	.+30     	; 0xc00 <LCD_u8sendData+0x1a2>
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
     be2:	84 e1       	ldi	r24, 0x14	; 20
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <LCD_u8sendData+0x1a2>
     be6:	84 e1       	ldi	r24, 0x14	; 20
     be8:	0b c0       	rjmp	.+22     	; 0xc00 <LCD_u8sendData+0x1a2>
     bea:	84 e1       	ldi	r24, 0x14	; 20
     bec:	09 c0       	rjmp	.+18     	; 0xc00 <LCD_u8sendData+0x1a2>
     bee:	84 e1       	ldi	r24, 0x14	; 20
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <LCD_u8sendData+0x1a2>
     bf2:	84 e1       	ldi	r24, 0x14	; 20
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <LCD_u8sendData+0x1a2>
     bf6:	84 e1       	ldi	r24, 0x14	; 20
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <LCD_u8sendData+0x1a2>
     bfa:	84 e1       	ldi	r24, 0x14	; 20
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <LCD_u8sendData+0x1a2>
     bfe:	84 e1       	ldi	r24, 0x14	; 20
		}
	}

	return u8_returnState ; 
	
}
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <LCD_u8PrintStr>:
	static uint8_t su8_strIndex = u8_LCD_INTIALIZING_VAR ;

	uint8_t u8_sendDataState = u8_LCD_NOK ;
	uint8_t u8_returnState = u8_LCD_NOK ;

	if( (spu8_lastDispStr == NULL_POINTER) &&  (pu8_userDispStr != NULL_POINTER) )
     c04:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <spu8_lastDispStr.1746>
     c08:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <spu8_lastDispStr.1746+0x1>
     c0c:	23 2b       	or	r18, r19
     c0e:	31 f4       	brne	.+12     	; 0xc1c <LCD_u8PrintStr+0x18>
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	21 f0       	breq	.+8      	; 0xc1c <LCD_u8PrintStr+0x18>
	{
		spu8_lastDispStr = pu8_userDispStr ;
     c14:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <spu8_lastDispStr.1746+0x1>
     c18:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <spu8_lastDispStr.1746>
	}

	if (spu8_lastDispStr != NULL_POINTER)
     c1c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <spu8_lastDispStr.1746>
     c20:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <spu8_lastDispStr.1746+0x1>
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	d9 f0       	breq	.+54     	; 0xc5e <LCD_u8PrintStr+0x5a>
	{
		if(spu8_lastDispStr[su8_strIndex] != NULL_CHAR )
     c28:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <su8_strIndex.1747>
     c2c:	fc 01       	movw	r30, r24
     c2e:	e2 0f       	add	r30, r18
     c30:	f1 1d       	adc	r31, r1
     c32:	80 81       	ld	r24, Z
     c34:	88 23       	and	r24, r24
     c36:	59 f0       	breq	.+22     	; 0xc4e <LCD_u8PrintStr+0x4a>
		{
			u8_sendDataState = LCD_u8sendData(spu8_lastDispStr[su8_strIndex]) ;
     c38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_u8sendData>

			if(u8_sendDataState == u8_LCD_OK)
     c3c:	85 31       	cpi	r24, 0x15	; 21
     c3e:	89 f4       	brne	.+34     	; 0xc62 <LCD_u8PrintStr+0x5e>
			{
				su8_strIndex++ ;
     c40:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <su8_strIndex.1747>
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <su8_strIndex.1747>
{
	static uint8_t* spu8_lastDispStr = NULL_POINTER ;
	static uint8_t su8_strIndex = u8_LCD_INTIALIZING_VAR ;

	uint8_t u8_sendDataState = u8_LCD_NOK ;
	uint8_t u8_returnState = u8_LCD_NOK ;
     c4a:	84 e1       	ldi	r24, 0x14	; 20
     c4c:	08 95       	ret
			}
		}
		else
		{
			u8_returnState = u8_LCD_OK ;
			spu8_lastDispStr = NULL_POINTER ;
     c4e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <spu8_lastDispStr.1746+0x1>
     c52:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <spu8_lastDispStr.1746>
			su8_strIndex = u8_LCD_INTIALIZING_VAR ;
     c56:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <su8_strIndex.1747>
				su8_strIndex++ ;
			}
		}
		else
		{
			u8_returnState = u8_LCD_OK ;
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	08 95       	ret
{
	static uint8_t* spu8_lastDispStr = NULL_POINTER ;
	static uint8_t su8_strIndex = u8_LCD_INTIALIZING_VAR ;

	uint8_t u8_sendDataState = u8_LCD_NOK ;
	uint8_t u8_returnState = u8_LCD_NOK ;
     c5e:	84 e1       	ldi	r24, 0x14	; 20
     c60:	08 95       	ret
     c62:	84 e1       	ldi	r24, 0x14	; 20
			su8_strIndex = u8_LCD_INTIALIZING_VAR ;
		}
	}

	return u8_returnState ;
}
     c64:	08 95       	ret

00000c66 <SWPWM_voidChan1OnChan2Off>:
#include "../../MCAL/DIO/DIO_interface.h"


void SWPWM_voidChan1OnChan2Off(void)
{
	DIO_SetPinValue(PORTD,PIN4,HIGH);
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
    DIO_SetPinValue(PORTD,PIN5,LOW);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	65 e0       	ldi	r22, 0x05	; 5
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     c7a:	08 95       	ret

00000c7c <SWPWM_voidChan1OffChan2On>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void SWPWM_voidChan1OffChan2On(void)
{
	DIO_SetPinValue(PORTD,PIN4,LOW);
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
    DIO_SetPinValue(PORTD,PIN5,HIGH);
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	65 e0       	ldi	r22, 0x05	; 5
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     c90:	08 95       	ret

00000c92 <SWPWM_voidChan1OffChan2Off>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void SWPWM_voidChan1OffChan2Off(void)
{
	DIO_SetPinValue(PORTD,PIN4,LOW);
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
    DIO_SetPinValue(PORTD,PIN5,LOW);
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	65 e0       	ldi	r22, 0x05	; 5
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     ca6:	08 95       	ret

00000ca8 <SWPWM_voidChan1OnChan2On>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void SWPWM_voidChan1OnChan2On(void)
{
	DIO_SetPinValue(PORTD,PIN4,HIGH);
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	64 e0       	ldi	r22, 0x04	; 4
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
	DIO_SetPinValue(PORTD,PIN5,HIGH);
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	65 e0       	ldi	r22, 0x05	; 5
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     cbc:	08 95       	ret

00000cbe <SWPWM_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void SWPWM_voidInit(void)
{
	 TIMER2_voidInit() ;
     cbe:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <TIMER2_voidInit>
	 Timer2_u8setOverFlowRegTicksBeforeOV(u8_MAX_8BIT_REG_HOLD) ;
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Timer2_u8setOverFlowRegTicksBeforeOV>
	 DIO_SetPinDirection(PORTD,PIN4,OUTPUT);
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
	 DIO_SetPinDirection(PORTD,PIN5,OUTPUT);
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	65 e0       	ldi	r22, 0x05	; 5
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
	 DIO_SetPinValue(PORTD,PIN4,LOW);
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	64 e0       	ldi	r22, 0x04	; 4
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
	 DIO_SetPinValue(PORTD,PIN5,LOW);
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	65 e0       	ldi	r22, 0x05	; 5
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     cf0:	08 95       	ret

00000cf2 <SWPWM_u8ControlChannels>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
     cf2:	cf 93       	push	r28
	uint8_t u8_ErrorFlag = u8_OK ; 
	uint8_t u8_SetCompareVal = u8_SWPWM_INTIAL_VAL ;
	if(u8_wantedPWMDuty<=u8_PWM_100_DUTY_PERCENT)
     cf4:	85 36       	cpi	r24, 0x65	; 101
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <SWPWM_u8ControlChannels+0x8>
     cf8:	97 c0       	rjmp	.+302    	; 0xe28 <SWPWM_u8ControlChannels+0x136>
     cfa:	c6 2f       	mov	r28, r22
	{
		if(u8_wantedPWMDuty>u8_PWM_0_DUTY_PERCENT && u8_wantedPWMDuty<u8_PWM_100_DUTY_PERCENT)
     cfc:	9f ef       	ldi	r25, 0xFF	; 255
     cfe:	98 0f       	add	r25, r24
     d00:	93 36       	cpi	r25, 0x63	; 99
     d02:	08 f0       	brcs	.+2      	; 0xd06 <SWPWM_u8ControlChannels+0x14>
     d04:	45 c0       	rjmp	.+138    	; 0xd90 <SWPWM_u8ControlChannels+0x9e>
		{
			u8_SetCompareVal = (uint8_t)((uint16_t)(u8_wantedPWMDuty*u8_MAX_8BIT_REG_HOLD)/u8_PWM_100_DUTY_PERCENT) ;
     d06:	9f ef       	ldi	r25, 0xFF	; 255
     d08:	89 9f       	mul	r24, r25
     d0a:	90 01       	movw	r18, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	36 95       	lsr	r19
     d10:	27 95       	ror	r18
     d12:	36 95       	lsr	r19
     d14:	27 95       	ror	r18
     d16:	ab e7       	ldi	r26, 0x7B	; 123
     d18:	b4 e1       	ldi	r27, 0x14	; 20
     d1a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__umulhisi3>
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
			Timer2_u8setCompareRegTicksBeforeOV(u8_SetCompareVal) ;
     d22:	0e 94 80 0c 	call	0x1900	; 0x1900 <Timer2_u8setCompareRegTicksBeforeOV>
			switch(u8_wantedChannelForPwm)
     d26:	c9 37       	cpi	r28, 0x79	; 121
     d28:	81 f0       	breq	.+32     	; 0xd4a <SWPWM_u8ControlChannels+0x58>
     d2a:	ca 37       	cpi	r28, 0x7A	; 122
     d2c:	d1 f0       	breq	.+52     	; 0xd62 <SWPWM_u8ControlChannels+0x70>
     d2e:	c8 37       	cpi	r28, 0x78	; 120
     d30:	21 f5       	brne	.+72     	; 0xd7a <SWPWM_u8ControlChannels+0x88>
			{
				case u8_SWPWM_TO_CH1_STOP_CH2 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
     d32:	69 e4       	ldi	r22, 0x49	; 73
     d34:	76 e0       	ldi	r23, 0x06	; 6
     d36:	80 e2       	ldi	r24, 0x20	; 32
     d38:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OnChan2Off) ;
     d3c:	63 e3       	ldi	r22, 0x33	; 51
     d3e:	76 e0       	ldi	r23, 0x06	; 6
     d40:	8f e1       	ldi	r24, 0x1F	; 31
     d42:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     d46:	c1 e0       	ldi	r28, 0x01	; 1
			Timer2_u8setCompareRegTicksBeforeOV(u8_SetCompareVal) ;
			switch(u8_wantedChannelForPwm)
			{
				case u8_SWPWM_TO_CH1_STOP_CH2 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OnChan2Off) ;
											break ;  
     d48:	19 c0       	rjmp	.+50     	; 0xd7c <SWPWM_u8ControlChannels+0x8a>
				case u8_SWPWM_TO_CH2_STOP_CH1 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
     d4a:	69 e4       	ldi	r22, 0x49	; 73
     d4c:	76 e0       	ldi	r23, 0x06	; 6
     d4e:	80 e2       	ldi	r24, 0x20	; 32
     d50:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OffChan2On) ;
     d54:	6e e3       	ldi	r22, 0x3E	; 62
     d56:	76 e0       	ldi	r23, 0x06	; 6
     d58:	8f e1       	ldi	r24, 0x1F	; 31
     d5a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     d5e:	c1 e0       	ldi	r28, 0x01	; 1
				case u8_SWPWM_TO_CH1_STOP_CH2 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OnChan2Off) ;
											break ;  
				case u8_SWPWM_TO_CH2_STOP_CH1 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OffChan2On) ;
											break ; 
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <SWPWM_u8ControlChannels+0x8a>
				case u8_SWPWM_TO_CH1_AND_CH2  : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
     d62:	69 e4       	ldi	r22, 0x49	; 73
     d64:	76 e0       	ldi	r23, 0x06	; 6
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OnChan2On) ;
     d6c:	64 e5       	ldi	r22, 0x54	; 84
     d6e:	76 e0       	ldi	r23, 0x06	; 6
     d70:	8f e1       	ldi	r24, 0x1F	; 31
     d72:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     d76:	c1 e0       	ldi	r28, 0x01	; 1
				case u8_SWPWM_TO_CH2_STOP_CH1 : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OffChan2On) ;
											break ; 
				case u8_SWPWM_TO_CH1_AND_CH2  : TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,SWPWM_voidChan1OffChan2Off) ;
											TIMER2_u8setCallBack(u8_TIMER2_OVER_FLOW,SWPWM_voidChan1OnChan2On) ;
											break ; 
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <SWPWM_u8ControlChannels+0x8a>
				default 				  :  u8_ErrorFlag = u8_NOK ; 
     d7a:	c0 e0       	ldi	r28, 0x00	; 0
											break ; 
			}
			if(u8_ErrorFlag==u8_OK)
     d7c:	c1 30       	cpi	r28, 0x01	; 1
     d7e:	09 f0       	breq	.+2      	; 0xd82 <SWPWM_u8ControlChannels+0x90>
     d80:	54 c0       	rjmp	.+168    	; 0xe2a <SWPWM_u8ControlChannels+0x138>
			{
				TIMERS_u8IntModesEn(u8_TIMER2_OVER_FLOW) ; 
     d82:	8f e1       	ldi	r24, 0x1F	; 31
     d84:	0e 94 27 0c 	call	0x184e	; 0x184e <TIMERS_u8IntModesEn>
				TIMERS_u8IntModesEn(u8_TIMER2_COMPARE_ON_MATCH) ;
     d88:	80 e2       	ldi	r24, 0x20	; 32
     d8a:	0e 94 27 0c 	call	0x184e	; 0x184e <TIMERS_u8IntModesEn>
     d8e:	4d c0       	rjmp	.+154    	; 0xe2a <SWPWM_u8ControlChannels+0x138>
			}
		}
		else if (u8_wantedPWMDuty==u8_PWM_0_DUTY_PERCENT&&(u8_wantedChannelForPwm>=u8_SWPWM_TO_CH1_STOP_CH2)&&(u8_wantedChannelForPwm<=u8_SWPWM_TO_CH1_AND_CH2))
     d90:	81 11       	cpse	r24, r1
     d92:	16 c0       	rjmp	.+44     	; 0xdc0 <SWPWM_u8ControlChannels+0xce>
     d94:	68 37       	cpi	r22, 0x78	; 120
     d96:	a0 f0       	brcs	.+40     	; 0xdc0 <SWPWM_u8ControlChannels+0xce>
     d98:	6b 37       	cpi	r22, 0x7B	; 123
     d9a:	90 f4       	brcc	.+36     	; 0xdc0 <SWPWM_u8ControlChannels+0xce>
		{
			TIMERS_u8IntModesDis(u8_TIMER2_OVER_FLOW) ;
     d9c:	8f e1       	ldi	r24, 0x1F	; 31
     d9e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TIMERS_u8IntModesDis>
			TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ; 
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TIMERS_u8IntModesDis>
			DIO_SetPinValue(PORTD,PIN4,LOW);
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	64 e0       	ldi	r22, 0x04	; 4
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN5,LOW);
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	65 e0       	ldi	r22, 0x05	; 5
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     dbc:	c1 e0       	ldi	r28, 0x01	; 1
		else if (u8_wantedPWMDuty==u8_PWM_0_DUTY_PERCENT&&(u8_wantedChannelForPwm>=u8_SWPWM_TO_CH1_STOP_CH2)&&(u8_wantedChannelForPwm<=u8_SWPWM_TO_CH1_AND_CH2))
		{
			TIMERS_u8IntModesDis(u8_TIMER2_OVER_FLOW) ;
			TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ; 
			DIO_SetPinValue(PORTD,PIN4,LOW);
			DIO_SetPinValue(PORTD,PIN5,LOW);
     dbe:	35 c0       	rjmp	.+106    	; 0xe2a <SWPWM_u8ControlChannels+0x138>
		}
		else 
		{
			switch(u8_wantedChannelForPwm)
     dc0:	c9 37       	cpi	r28, 0x79	; 121
     dc2:	81 f0       	breq	.+32     	; 0xde4 <SWPWM_u8ControlChannels+0xf2>
     dc4:	ca 37       	cpi	r28, 0x7A	; 122
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <SWPWM_u8ControlChannels+0x10a>
     dc8:	c8 37       	cpi	r28, 0x78	; 120
     dca:	21 f5       	brne	.+72     	; 0xe14 <SWPWM_u8ControlChannels+0x122>
			{
				case u8_SWPWM_TO_CH1_STOP_CH2 : DIO_SetPinValue(PORTD,PIN4,HIGH);
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	64 e0       	ldi	r22, 0x04	; 4
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
											DIO_SetPinValue(PORTD,PIN5,LOW); 
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	65 e0       	ldi	r22, 0x05	; 5
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     de0:	c1 e0       	ldi	r28, 0x01	; 1
		{
			switch(u8_wantedChannelForPwm)
			{
				case u8_SWPWM_TO_CH1_STOP_CH2 : DIO_SetPinValue(PORTD,PIN4,HIGH);
											DIO_SetPinValue(PORTD,PIN5,LOW); 
											break ;  
     de2:	19 c0       	rjmp	.+50     	; 0xe16 <SWPWM_u8ControlChannels+0x124>
				case u8_SWPWM_TO_CH2_STOP_CH1 : DIO_SetPinValue(PORTD,PIN4,LOW);
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	64 e0       	ldi	r22, 0x04	; 4
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
											DIO_SetPinValue(PORTD,PIN5,HIGH); 
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	65 e0       	ldi	r22, 0x05	; 5
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     df8:	c1 e0       	ldi	r28, 0x01	; 1
				case u8_SWPWM_TO_CH1_STOP_CH2 : DIO_SetPinValue(PORTD,PIN4,HIGH);
											DIO_SetPinValue(PORTD,PIN5,LOW); 
											break ;  
				case u8_SWPWM_TO_CH2_STOP_CH1 : DIO_SetPinValue(PORTD,PIN4,LOW);
											DIO_SetPinValue(PORTD,PIN5,HIGH); 
											break ; 
     dfa:	0d c0       	rjmp	.+26     	; 0xe16 <SWPWM_u8ControlChannels+0x124>
				case u8_SWPWM_TO_CH1_AND_CH2  : DIO_SetPinValue(PORTD,PIN4,HIGH);
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	64 e0       	ldi	r22, 0x04	; 4
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
											DIO_SetPinValue(PORTD,PIN5,HIGH); 
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	65 e0       	ldi	r22, 0x05	; 5
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SWPWM_u8ControlChannels(uint8_t u8_wantedPWMDuty,uint8_t u8_wantedChannelForPwm)
{
	uint8_t u8_ErrorFlag = u8_OK ; 
     e10:	c1 e0       	ldi	r28, 0x01	; 1
				case u8_SWPWM_TO_CH2_STOP_CH1 : DIO_SetPinValue(PORTD,PIN4,LOW);
											DIO_SetPinValue(PORTD,PIN5,HIGH); 
											break ; 
				case u8_SWPWM_TO_CH1_AND_CH2  : DIO_SetPinValue(PORTD,PIN4,HIGH);
											DIO_SetPinValue(PORTD,PIN5,HIGH); 
											break ; 
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <SWPWM_u8ControlChannels+0x124>
				default 				  :  u8_ErrorFlag = u8_NOK ; 
     e14:	c0 e0       	ldi	r28, 0x00	; 0
											break ; 
			}
			
			if(u8_ErrorFlag==u8_OK)
     e16:	c1 30       	cpi	r28, 0x01	; 1
     e18:	41 f4       	brne	.+16     	; 0xe2a <SWPWM_u8ControlChannels+0x138>
			{
				TIMERS_u8IntModesDis(u8_TIMER2_OVER_FLOW) ;
     e1a:	8f e1       	ldi	r24, 0x1F	; 31
     e1c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TIMERS_u8IntModesDis>
				TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ; 
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TIMERS_u8IntModesDis>
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <SWPWM_u8ControlChannels+0x138>
			}
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     e28:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return u8_ErrorFlag ; 
	
}
     e2a:	8c 2f       	mov	r24, r28
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <ULTRASONIC_voidInit>:
#include "ULTRASONIC_interface.h"
#include "../LCD/LCD.h"

void ULTRASONIC_voidInit(void)
{
	TIMER1_init(PRESCALE_8);
     e30:	88 e0       	ldi	r24, 0x08	; 8
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 a6 09 	call	0x134c	; 0x134c <TIMER1_init>
	ICU_enuInit() ;
     e38:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ICU_enuInit>
	DIO_SetPinDirection(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,OUTPUT);
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
	DIO_SetPinDirection(u8_ULTRASONIC_PORT,u8_ULTRASONIC_ECHO_PIN,INPUT);
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinDirection>
    DIO_SetPinValue(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,LOW);
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
     e5a:	08 95       	ret

00000e5c <ULTRASONIC_u8GetObstacleDistInCm>:
}


uint8_t ULTRASONIC_u8GetObstacleDistInCm(uint16_t* pu16_returnDistInCm) 
{
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	00 d0       	rcall	.+0      	; 0xe66 <ULTRASONIC_u8GetObstacleDistInCm+0xa>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <ULTRASONIC_u8GetObstacleDistInCm+0xc>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	uint32_t u32_echoPulseTimeUS; 
	uint8_t u8_returnDistState = u8_ULTRASONIC_NOK ; 
	EN_timer1DelayStatus_t TIMER1_WaitAnotherTrig  ; 
	enu_ICU_ERROR ICU_status = ICU_NOK ; 

	if(pu16_returnDistInCm !=NULL_POINTER)
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	09 f4       	brne	.+2      	; 0xe72 <ULTRASONIC_u8GetObstacleDistInCm+0x16>
     e70:	40 c0       	rjmp	.+128    	; 0xef2 <ULTRASONIC_u8GetObstacleDistInCm+0x96>
     e72:	8c 01       	movw	r16, r24
	{
		if(u8_trigBegin==u8_ULTRASONIC_FALSE)
     e74:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <u8_trigBegin.1842>
     e78:	81 11       	cpse	r24, r1
     e7a:	13 c0       	rjmp	.+38     	; 0xea2 <ULTRASONIC_u8GetObstacleDistInCm+0x46>
		{
			DIO_SetPinValue(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,HIGH);
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			TIMER1_voidMicroSecDelay(u8_ULTRASONIC_TRIG_TIME_US) ; 
     e86:	8c e0       	ldi	r24, 0x0C	; 12
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 03 0a 	call	0x1406	; 0x1406 <TIMER1_voidMicroSecDelay>
			DIO_SetPinValue(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,LOW);
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_SetPinValue>
			u8_trigBegin = u8_ULTRASONIC_TRUE ; 
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <u8_trigBegin.1842>

uint8_t ULTRASONIC_u8GetObstacleDistInCm(uint16_t* pu16_returnDistInCm) 
{
	static uint8_t u8_trigBegin = u8_ULTRASONIC_FALSE ;
	uint32_t u32_echoPulseTimeUS; 
	uint8_t u8_returnDistState = u8_ULTRASONIC_NOK ; 
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	2d c0       	rjmp	.+90     	; 0xefc <ULTRASONIC_u8GetObstacleDistInCm+0xa0>
			DIO_SetPinValue(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,HIGH);
			TIMER1_voidMicroSecDelay(u8_ULTRASONIC_TRIG_TIME_US) ; 
			DIO_SetPinValue(u8_ULTRASONIC_PORT,u8_ULTRASONIC_TRIG_PIN,LOW);
			u8_trigBegin = u8_ULTRASONIC_TRUE ; 
		}
		else if(u8_trigBegin== u8_ULTRASONIC_TRUE )
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	e1 f4       	brne	.+56     	; 0xede <ULTRASONIC_u8GetObstacleDistInCm+0x82>
		{
			ICU_status = ICU_u8SingnalOnTime(&u32_echoPulseTimeUS) ;
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <ICU_u8SingnalOnTime>
			if(ICU_status == ICU_OK )
     eae:	81 11       	cpse	r24, r1
     eb0:	22 c0       	rjmp	.+68     	; 0xef6 <ULTRASONIC_u8GetObstacleDistInCm+0x9a>
			{   
				u8_returnDistState = u8_ULTRASONIC_OK ; 
				u8_trigBegin = u8_ULTRASONIC_WAIT_NEW_TRIG ; 
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <u8_trigBegin.1842>
				(*pu16_returnDistInCm) = (uint16_t)(((uint32_t)(u32_echoPulseTimeUS * u16_ULTRASONIC_LIGHT_SPEED_IN_m_PER_SEC*u8_ULTRASONIC_CONVERT_TO_Cm))
     eb8:	29 81       	ldd	r18, Y+1	; 0x01
     eba:	3a 81       	ldd	r19, Y+2	; 0x02
     ebc:	4b 81       	ldd	r20, Y+3	; 0x03
     ebe:	5c 81       	ldd	r21, Y+4	; 0x04
     ec0:	a0 ed       	ldi	r26, 0xD0	; 208
     ec2:	b4 e8       	ldi	r27, 0x84	; 132
     ec4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__muluhisi3>
													/((uint32_t)((uint32_t)u8_ULTRASONIC_HALF_ECHO_TIME * (uint32_t)u32_ULTRASONIC_CONVERT_FROM_MICRO_TO_SEC))) ; 
     ec8:	20 e8       	ldi	r18, 0x80	; 128
     eca:	34 e8       	ldi	r19, 0x84	; 132
     ecc:	4e e1       	ldi	r20, 0x1E	; 30
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodsi4>
			ICU_status = ICU_u8SingnalOnTime(&u32_echoPulseTimeUS) ;
			if(ICU_status == ICU_OK )
			{   
				u8_returnDistState = u8_ULTRASONIC_OK ; 
				u8_trigBegin = u8_ULTRASONIC_WAIT_NEW_TRIG ; 
				(*pu16_returnDistInCm) = (uint16_t)(((uint32_t)(u32_echoPulseTimeUS * u16_ULTRASONIC_LIGHT_SPEED_IN_m_PER_SEC*u8_ULTRASONIC_CONVERT_TO_Cm))
     ed4:	f8 01       	movw	r30, r16
     ed6:	31 83       	std	Z+1, r19	; 0x01
     ed8:	20 83       	st	Z, r18
		else if(u8_trigBegin== u8_ULTRASONIC_TRUE )
		{
			ICU_status = ICU_u8SingnalOnTime(&u32_echoPulseTimeUS) ;
			if(ICU_status == ICU_OK )
			{   
				u8_returnDistState = u8_ULTRASONIC_OK ; 
     eda:	8e e1       	ldi	r24, 0x1E	; 30
     edc:	0f c0       	rjmp	.+30     	; 0xefc <ULTRASONIC_u8GetObstacleDistInCm+0xa0>
													/((uint32_t)((uint32_t)u8_ULTRASONIC_HALF_ECHO_TIME * (uint32_t)u32_ULTRASONIC_CONVERT_FROM_MICRO_TO_SEC))) ; 
			}
		}
		else 
		{
			TIMER1_WaitAnotherTrig = TIMER1_msdelay(u8_ULTRASONIC_TIME_BETWEEN_ECHO_AND_TRIG) ; 
     ede:	8c e3       	ldi	r24, 0x3C	; 60
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 3e 0a 	call	0x147c	; 0x147c <TIMER1_msdelay>
			if(TIMER1_WaitAnotherTrig == TIMER1_MS_DELAY_FINISHED)
     ee6:	81 11       	cpse	r24, r1
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <ULTRASONIC_u8GetObstacleDistInCm+0x9e>
			{
				u8_trigBegin = u8_ULTRASONIC_FALSE ; 
     eea:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <u8_trigBegin.1842>

uint8_t ULTRASONIC_u8GetObstacleDistInCm(uint16_t* pu16_returnDistInCm) 
{
	static uint8_t u8_trigBegin = u8_ULTRASONIC_FALSE ;
	uint32_t u32_echoPulseTimeUS; 
	uint8_t u8_returnDistState = u8_ULTRASONIC_NOK ; 
     eee:	8f e1       	ldi	r24, 0x1F	; 31
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <ULTRASONIC_u8GetObstacleDistInCm+0xa0>
     ef2:	8f e1       	ldi	r24, 0x1F	; 31
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <ULTRASONIC_u8GetObstacleDistInCm+0xa0>
     ef6:	8f e1       	ldi	r24, 0x1F	; 31
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <ULTRASONIC_u8GetObstacleDistInCm+0xa0>
     efa:	8f e1       	ldi	r24, 0x1F	; 31
			}
		}
	}
	
	return u8_returnDistState ; 
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <DIO_SetPinDirection>:
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
	switch (au8_PORT)
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	31 f1       	breq	.+76     	; 0xf5e <DIO_SetPinDirection+0x50>
     f12:	38 f0       	brcs	.+14     	; 0xf22 <DIO_SetPinDirection+0x14>
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	09 f4       	brne	.+2      	; 0xf1a <DIO_SetPinDirection+0xc>
     f18:	40 c0       	rjmp	.+128    	; 0xf9a <DIO_SetPinDirection+0x8c>
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_SetPinDirection+0x12>
     f1e:	5a c0       	rjmp	.+180    	; 0xfd4 <DIO_SetPinDirection+0xc6>
     f20:	76 c0       	rjmp	.+236    	; 0x100e <DIO_SetPinDirection+0x100>
	{
		case PORTA: if (au8_DIRECTION==INPUT)
     f22:	41 11       	cpse	r20, r1
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <DIO_SetPinDirection+0x32>
					{
						CLR_BIT(DDRA_REG,au8_PIN);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_SetPinDirection+0x22>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	6a 95       	dec	r22
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_SetPinDirection+0x1e>
     f34:	80 95       	com	r24
     f36:	9a b3       	in	r25, 0x1a	; 26
     f38:	89 23       	and	r24, r25
     f3a:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	08 95       	ret
	{
		case PORTA: if (au8_DIRECTION==INPUT)
					{
						CLR_BIT(DDRA_REG,au8_PIN);
					}
					else if(au8_DIRECTION==OUTPUT)
     f40:	41 30       	cpi	r20, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <DIO_SetPinDirection+0x38>
     f44:	66 c0       	rjmp	.+204    	; 0x1012 <DIO_SetPinDirection+0x104>
					{
						SET_BIT(DDRA_REG,au8_PIN);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_SetPinDirection+0x42>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	6a 95       	dec	r22
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_SetPinDirection+0x3e>
     f54:	9a b3       	in	r25, 0x1a	; 26
     f56:	89 2b       	or	r24, r25
     f58:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	08 95       	ret
					else
					{
						//do noting
					}
					break;
		case PORTB: if (au8_DIRECTION==INPUT)
     f5e:	41 11       	cpse	r20, r1
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <DIO_SetPinDirection+0x6e>
					{
						CLR_BIT(DDRB_REG,au8_PIN);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_SetPinDirection+0x5e>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	6a 95       	dec	r22
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_SetPinDirection+0x5a>
     f70:	80 95       	com	r24
     f72:	97 b3       	in	r25, 0x17	; 23
     f74:	89 23       	and	r24, r25
     f76:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	08 95       	ret
					break;
		case PORTB: if (au8_DIRECTION==INPUT)
					{
						CLR_BIT(DDRB_REG,au8_PIN);
					}
					else if(au8_DIRECTION==OUTPUT)
     f7c:	41 30       	cpi	r20, 0x01	; 1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <DIO_SetPinDirection+0x74>
     f80:	4a c0       	rjmp	.+148    	; 0x1016 <DIO_SetPinDirection+0x108>
					{
						SET_BIT(DDRB_REG,au8_PIN);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_SetPinDirection+0x7e>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	6a 95       	dec	r22
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_SetPinDirection+0x7a>
     f90:	97 b3       	in	r25, 0x17	; 23
     f92:	89 2b       	or	r24, r25
     f94:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     f96:	84 e0       	ldi	r24, 0x04	; 4
     f98:	08 95       	ret
					else
					{
						//do noting
					}
					break;
		case PORTC: if (au8_DIRECTION==INPUT)
     f9a:	41 11       	cpse	r20, r1
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <DIO_SetPinDirection+0xaa>
					{
						CLR_BIT(DDRC_REG,au8_PIN);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_SetPinDirection+0x9a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	6a 95       	dec	r22
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_SetPinDirection+0x96>
     fac:	80 95       	com	r24
     fae:	94 b3       	in	r25, 0x14	; 20
     fb0:	89 23       	and	r24, r25
     fb2:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	08 95       	ret
					break;
		case PORTC: if (au8_DIRECTION==INPUT)
					{
						CLR_BIT(DDRC_REG,au8_PIN);
					}
					else if(au8_DIRECTION==OUTPUT)
     fb8:	41 30       	cpi	r20, 0x01	; 1
     fba:	79 f5       	brne	.+94     	; 0x101a <DIO_SetPinDirection+0x10c>
					{
						SET_BIT(DDRC_REG,au8_PIN);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_SetPinDirection+0xb8>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	6a 95       	dec	r22
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_SetPinDirection+0xb4>
     fca:	94 b3       	in	r25, 0x14	; 20
     fcc:	89 2b       	or	r24, r25
     fce:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	08 95       	ret
					else
					{
						//do noting
					}
					break;
		case PORTD: if (au8_DIRECTION==INPUT)
     fd4:	41 11       	cpse	r20, r1
     fd6:	0d c0       	rjmp	.+26     	; 0xff2 <DIO_SetPinDirection+0xe4>
					{
						CLR_BIT(DDRD_REG,au8_PIN);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_SetPinDirection+0xd4>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	6a 95       	dec	r22
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_SetPinDirection+0xd0>
     fe6:	80 95       	com	r24
     fe8:	91 b3       	in	r25, 0x11	; 17
     fea:	89 23       	and	r24, r25
     fec:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	08 95       	ret
					break;
		case PORTD: if (au8_DIRECTION==INPUT)
					{
						CLR_BIT(DDRD_REG,au8_PIN);
					}
					else if(au8_DIRECTION==OUTPUT)
     ff2:	41 30       	cpi	r20, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <DIO_SetPinDirection+0x110>
					{
						SET_BIT(DDRD_REG,au8_PIN);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_SetPinDirection+0xf2>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	6a 95       	dec	r22
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_SetPinDirection+0xee>
    1004:	91 b3       	in	r25, 0x11	; 17
    1006:	89 2b       	or	r24, r25
    1008:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	08 95       	ret
					else
					{
						//do noting
					}
					break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
    100e:	85 e0       	ldi	r24, 0x05	; 5
    1010:	08 95       	ret
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	08 95       	ret
    1016:	84 e0       	ldi	r24, 0x04	; 4
    1018:	08 95       	ret
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	08 95       	ret
    101e:	84 e0       	ldi	r24, 0x04	; 4
					break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
			break;
	}//switch
	return au8_errorstate;
}//function
    1020:	08 95       	ret

00001022 <DIO_SetPinValue>:
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
	switch (au8_PORT)
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	31 f1       	breq	.+76     	; 0x1072 <DIO_SetPinValue+0x50>
    1026:	38 f0       	brcs	.+14     	; 0x1036 <DIO_SetPinValue+0x14>
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_SetPinValue+0xc>
    102c:	40 c0       	rjmp	.+128    	; 0x10ae <DIO_SetPinValue+0x8c>
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	09 f4       	brne	.+2      	; 0x1034 <DIO_SetPinValue+0x12>
    1032:	5a c0       	rjmp	.+180    	; 0x10e8 <DIO_SetPinValue+0xc6>
    1034:	76 c0       	rjmp	.+236    	; 0x1122 <DIO_SetPinValue+0x100>
		{
			case PORTA: if (au8_VALUE==LOW)
    1036:	41 11       	cpse	r20, r1
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <DIO_SetPinValue+0x32>
						{
							CLR_BIT(PORTA_REG,au8_PIN);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_SetPinValue+0x22>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	6a 95       	dec	r22
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_SetPinValue+0x1e>
    1048:	80 95       	com	r24
    104a:	9b b3       	in	r25, 0x1b	; 27
    104c:	89 23       	and	r24, r25
    104e:	8b bb       	out	0x1b, r24	; 27
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	08 95       	ret
		{
			case PORTA: if (au8_VALUE==LOW)
						{
							CLR_BIT(PORTA_REG,au8_PIN);
						}
						else if(au8_VALUE==HIGH)
    1054:	41 30       	cpi	r20, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <DIO_SetPinValue+0x38>
    1058:	66 c0       	rjmp	.+204    	; 0x1126 <DIO_SetPinValue+0x104>
						{
							SET_BIT(PORTA_REG,au8_PIN);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_SetPinValue+0x42>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	6a 95       	dec	r22
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_SetPinValue+0x3e>
    1068:	9b b3       	in	r25, 0x1b	; 27
    106a:	89 2b       	or	r24, r25
    106c:	8b bb       	out	0x1b, r24	; 27
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	08 95       	ret
						else
						{
							//do noting
						}
						break;
			case PORTB: if (au8_VALUE==LOW)
    1072:	41 11       	cpse	r20, r1
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <DIO_SetPinValue+0x6e>
						{
							CLR_BIT(PORTB_REG,au8_PIN);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_SetPinValue+0x5e>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	6a 95       	dec	r22
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_SetPinValue+0x5a>
    1084:	80 95       	com	r24
    1086:	98 b3       	in	r25, 0x18	; 24
    1088:	89 23       	and	r24, r25
    108a:	88 bb       	out	0x18, r24	; 24
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	08 95       	ret
						break;
			case PORTB: if (au8_VALUE==LOW)
						{
							CLR_BIT(PORTB_REG,au8_PIN);
						}
						else if(au8_VALUE==HIGH)
    1090:	41 30       	cpi	r20, 0x01	; 1
    1092:	09 f0       	breq	.+2      	; 0x1096 <DIO_SetPinValue+0x74>
    1094:	4a c0       	rjmp	.+148    	; 0x112a <DIO_SetPinValue+0x108>
						{
							SET_BIT(PORTB_REG,au8_PIN);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_SetPinValue+0x7e>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	6a 95       	dec	r22
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_SetPinValue+0x7a>
    10a4:	98 b3       	in	r25, 0x18	; 24
    10a6:	89 2b       	or	r24, r25
    10a8:	88 bb       	out	0x18, r24	; 24
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    10aa:	84 e0       	ldi	r24, 0x04	; 4
    10ac:	08 95       	ret
						else
						{
							//do noting
						}
						break;
			case PORTC: if (au8_VALUE==LOW)
    10ae:	41 11       	cpse	r20, r1
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <DIO_SetPinValue+0xaa>
						{
							CLR_BIT(PORTC_REG,au8_PIN);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_SetPinValue+0x9a>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	6a 95       	dec	r22
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_SetPinValue+0x96>
    10c0:	80 95       	com	r24
    10c2:	95 b3       	in	r25, 0x15	; 21
    10c4:	89 23       	and	r24, r25
    10c6:	85 bb       	out	0x15, r24	; 21
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    10c8:	84 e0       	ldi	r24, 0x04	; 4
    10ca:	08 95       	ret
						break;
			case PORTC: if (au8_VALUE==LOW)
						{
							CLR_BIT(PORTC_REG,au8_PIN);
						}
						else if(au8_VALUE==HIGH)
    10cc:	41 30       	cpi	r20, 0x01	; 1
    10ce:	79 f5       	brne	.+94     	; 0x112e <DIO_SetPinValue+0x10c>
						{
							SET_BIT(PORTC_REG,au8_PIN);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_SetPinValue+0xb8>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	6a 95       	dec	r22
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_SetPinValue+0xb4>
    10de:	95 b3       	in	r25, 0x15	; 21
    10e0:	89 2b       	or	r24, r25
    10e2:	85 bb       	out	0x15, r24	; 21
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	08 95       	ret
						else
						{
							//do noting
						}
						break;
			case PORTD: if (au8_VALUE==LOW)
    10e8:	41 11       	cpse	r20, r1
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <DIO_SetPinValue+0xe4>
						{
							CLR_BIT(PORTD_REG,au8_PIN);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_SetPinValue+0xd4>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	6a 95       	dec	r22
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_SetPinValue+0xd0>
    10fa:	80 95       	com	r24
    10fc:	92 b3       	in	r25, 0x12	; 18
    10fe:	89 23       	and	r24, r25
    1100:	82 bb       	out	0x12, r24	; 18
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	08 95       	ret
						break;
			case PORTD: if (au8_VALUE==LOW)
						{
							CLR_BIT(PORTD_REG,au8_PIN);
						}
						else if(au8_VALUE==HIGH)
    1106:	41 30       	cpi	r20, 0x01	; 1
    1108:	a1 f4       	brne	.+40     	; 0x1132 <DIO_SetPinValue+0x110>
						{
							SET_BIT(PORTD_REG,au8_PIN);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_SetPinValue+0xf2>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	6a 95       	dec	r22
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_SetPinValue+0xee>
    1118:	92 b3       	in	r25, 0x12	; 18
    111a:	89 2b       	or	r24, r25
    111c:	82 bb       	out	0x12, r24	; 18
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	08 95       	ret
						else
						{
							//do noting
						}
						break;
			default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	08 95       	ret
	}//switch
	return au8_errorstate;
}//function
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
	uint8_t au8_errorstate = DIO_SUCCESS ;
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	08 95       	ret
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	08 95       	ret
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	08 95       	ret
    1132:	84 e0       	ldi	r24, 0x04	; 4
						break;
			default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
				break;
		}//switch
	return au8_errorstate;
}//function
    1134:	08 95       	ret

00001136 <External_Interrupts_Init>:
void(*External_Int0_Fun)(void)=NULL_POINTER;/*POINTER TO FUCTION CARRY THE ADRESS OF INT0_ISR_FUCTION  */
void(*External_Int1_Fun)(void)=NULL_POINTER;/*POINTER TO FUCTION CARRY THE ADRESS OF INT1_ISR_FUCTION  */
void(*External_Int2_Fun)(void)=NULL_POINTER;/*POINTER TO FUCTION CARRY THE ADRESS OF INT2_ISR_FUCTION  */
enu_EI_ERROR External_Interrupts_Init(uint8_t INT_Num,uint8_t Interrupt_triggering ,void(*External_Int_Fun_Address)(void))
{
	if(External_Int_Fun_Address== NULL_POINTER)
    1136:	41 15       	cp	r20, r1
    1138:	51 05       	cpc	r21, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <External_Interrupts_Init+0x8>
    113c:	4d c0       	rjmp	.+154    	; 0x11d8 <External_Interrupts_Init+0xa2>
	{
		return EI_NOK;
	}
	if(INT_Num==0)
    113e:	81 11       	cpse	r24, r1
    1140:	1a c0       	rjmp	.+52     	; 0x1176 <External_Interrupts_Init+0x40>
	{
		External_Int0_Fun=External_Int_Fun_Address;
    1142:	50 93 90 00 	sts	0x0090, r21	; 0x800090 <External_Int0_Fun+0x1>
    1146:	40 93 8f 00 	sts	0x008F, r20	; 0x80008f <External_Int0_Fun>
		GICR |= 1<<INT0;		/* Enable INT0*/
    114a:	8b b7       	in	r24, 0x3b	; 59
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	8b bf       	out	0x3b, r24	; 59
		if(Interrupt_triggering==RISING_EDGE)
    1150:	62 30       	cpi	r22, 0x02	; 2
    1152:	29 f4       	brne	.+10     	; 0x115e <External_Interrupts_Init+0x28>
		MCUCR |= 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
    1154:	85 b7       	in	r24, 0x35	; 53
    1156:	83 60       	ori	r24, 0x03	; 3
    1158:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	08 95       	ret
	{
		External_Int0_Fun=External_Int_Fun_Address;
		GICR |= 1<<INT0;		/* Enable INT0*/
		if(Interrupt_triggering==RISING_EDGE)
		MCUCR |= 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
		else if(Interrupt_triggering==FALLING_EDGE)
    115e:	61 30       	cpi	r22, 0x01	; 1
    1160:	29 f4       	brne	.+10     	; 0x116c <External_Interrupts_Init+0x36>
		MCUCR |= 1<<ISC01 ;  /* Trigger INT0 on falling edge */
    1162:	85 b7       	in	r24, 0x35	; 53
    1164:	82 60       	ori	r24, 0x02	; 2
    1166:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 95       	ret
		if(Interrupt_triggering==RISING_EDGE)
		MCUCR |= 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
		else if(Interrupt_triggering==FALLING_EDGE)
		MCUCR |= 1<<ISC01 ;  /* Trigger INT0 on falling edge */
		else
		MCUCR |= 1<<ISC00  ;  /* Trigger INT0 on falling edge */
    116c:	85 b7       	in	r24, 0x35	; 53
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret
		else if(Interrupt_triggering==FALLING_EDGE)
		MCUCR |= 1<<ISC01 ;  /* Trigger INT0 on falling edge */
		else
		MCUCR |= 1<<ISC00  ;  /* Trigger INT0 on falling edge */
	}
	else if(INT_Num==1)
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	d1 f4       	brne	.+52     	; 0x11ae <External_Interrupts_Init+0x78>
	{
		External_Int1_Fun=External_Int_Fun_Address;
    117a:	50 93 8e 00 	sts	0x008E, r21	; 0x80008e <External_Int1_Fun+0x1>
    117e:	40 93 8d 00 	sts	0x008D, r20	; 0x80008d <External_Int1_Fun>
		GICR |= 1<<INT1;		/* Enable INT1*/
    1182:	8b b7       	in	r24, 0x3b	; 59
    1184:	80 68       	ori	r24, 0x80	; 128
    1186:	8b bf       	out	0x3b, r24	; 59
		if(Interrupt_triggering==RISING_EDGE)
    1188:	62 30       	cpi	r22, 0x02	; 2
    118a:	29 f4       	brne	.+10     	; 0x1196 <External_Interrupts_Init+0x60>
		MCUCR |= 1<<ISC11 | 1<<ISC10;  /* Trigger INT1 on rising edge */
    118c:	85 b7       	in	r24, 0x35	; 53
    118e:	8c 60       	ori	r24, 0x0C	; 12
    1190:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret
	{
		External_Int1_Fun=External_Int_Fun_Address;
		GICR |= 1<<INT1;		/* Enable INT1*/
		if(Interrupt_triggering==RISING_EDGE)
		MCUCR |= 1<<ISC11 | 1<<ISC10;  /* Trigger INT1 on rising edge */
		else if(Interrupt_triggering==FALLING_EDGE)
    1196:	61 30       	cpi	r22, 0x01	; 1
    1198:	29 f4       	brne	.+10     	; 0x11a4 <External_Interrupts_Init+0x6e>
		MCUCR |= 1<<ISC11 ;  /* Trigger INT1 on falling edge */
    119a:	85 b7       	in	r24, 0x35	; 53
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret
		if(Interrupt_triggering==RISING_EDGE)
		MCUCR |= 1<<ISC11 | 1<<ISC10;  /* Trigger INT1 on rising edge */
		else if(Interrupt_triggering==FALLING_EDGE)
		MCUCR |= 1<<ISC11 ;  /* Trigger INT1 on falling edge */
		else
		MCUCR |= 1<<ISC10  ;  /* Trigger INT1 on falling edge */
    11a4:	85 b7       	in	r24, 0x35	; 53
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	85 bf       	out	0x35, r24	; 53
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	08 95       	ret
		else if(Interrupt_triggering==FALLING_EDGE)
		MCUCR |= 1<<ISC11 ;  /* Trigger INT1 on falling edge */
		else
		MCUCR |= 1<<ISC10  ;  /* Trigger INT1 on falling edge */
	}
	else if(INT_Num==2)
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	a9 f4       	brne	.+42     	; 0x11dc <External_Interrupts_Init+0xa6>
	{
		External_Int2_Fun=External_Int_Fun_Address;
    11b2:	50 93 8c 00 	sts	0x008C, r21	; 0x80008c <External_Int2_Fun+0x1>
    11b6:	40 93 8b 00 	sts	0x008B, r20	; 0x80008b <External_Int2_Fun>
		GICR |= 1<<INT2;		/* Enable INT2*/
    11ba:	8b b7       	in	r24, 0x3b	; 59
    11bc:	80 62       	ori	r24, 0x20	; 32
    11be:	8b bf       	out	0x3b, r24	; 59
		if(Interrupt_triggering==RISING_EDGE)
    11c0:	62 30       	cpi	r22, 0x02	; 2
    11c2:	29 f4       	brne	.+10     	; 0x11ce <External_Interrupts_Init+0x98>
		MCUCSR |= 1<<ISC2; /* Trigger INT2 on rising edge */
    11c4:	84 b7       	in	r24, 0x34	; 52
    11c6:	80 64       	ori	r24, 0x40	; 64
    11c8:	84 bf       	out	0x34, r24	; 52
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
	return EI_OK;
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	08 95       	ret
		External_Int2_Fun=External_Int_Fun_Address;
		GICR |= 1<<INT2;		/* Enable INT2*/
		if(Interrupt_triggering==RISING_EDGE)
		MCUCSR |= 1<<ISC2; /* Trigger INT2 on rising edge */
		else
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
    11ce:	84 b7       	in	r24, 0x34	; 52
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	84 bf       	out	0x34, r24	; 52
		
	}
	else
	return EI_NOK;
	return EI_OK;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	08 95       	ret
void(*External_Int2_Fun)(void)=NULL_POINTER;/*POINTER TO FUCTION CARRY THE ADRESS OF INT2_ISR_FUCTION  */
enu_EI_ERROR External_Interrupts_Init(uint8_t INT_Num,uint8_t Interrupt_triggering ,void(*External_Int_Fun_Address)(void))
{
	if(External_Int_Fun_Address== NULL_POINTER)
	{
		return EI_NOK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	08 95       	ret
		else
		MCUCSR &= ~(1<<ISC2);  /* Trigger INT2 on falling edge */
		
	}
	else
	return EI_NOK;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
	return EI_OK;
}
    11de:	08 95       	ret

000011e0 <__vector_1>:

/*external interrupt 00 ISR*/
void __vector_1(void)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	External_Int0_Fun();
    1202:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <External_Int0_Fun>
    1206:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <External_Int0_Fun+0x1>
    120a:	09 95       	icall
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_2>:
/*external interrupt 01 ISR*/
void __vector_2(void)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
	External_Int1_Fun();
    1250:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <External_Int1_Fun>
    1254:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <External_Int1_Fun+0x1>
    1258:	09 95       	icall
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_3>:
/*external interrupt 02 ISR*/
void __vector_3(void)
{
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
	External_Int2_Fun();
    129e:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <External_Int2_Fun>
    12a2:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <External_Int2_Fun+0x1>
    12a6:	09 95       	icall
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <TIMER1_setCountOverFlow>:
		case CHB:
		Ru8_TIMSK &= ~(HIGH << OCIE1B);
		break;
	}
	return (uint8_t)(EN_status);
}
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8d bd       	out	0x2d, r24	; 45
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	8c bd       	out	0x2c, r24	; 44
    12d2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu32_overFlowCounts>
    12d6:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu32_overFlowCounts+0x1>
    12da:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <gu32_overFlowCounts+0x2>
    12de:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <gu32_overFlowCounts+0x3>
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	a1 1d       	adc	r26, r1
    12e6:	b1 1d       	adc	r27, r1
    12e8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <gu32_overFlowCounts>
    12ec:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <gu32_overFlowCounts+0x1>
    12f0:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <gu32_overFlowCounts+0x2>
    12f4:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <gu32_overFlowCounts+0x3>
    12f8:	08 95       	ret

000012fa <__vector_9>:
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <TIMER1_setclbkOverFlow>
    1320:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <TIMER1_setclbkOverFlow+0x1>
    1324:	30 97       	sbiw	r30, 0x00	; 0
    1326:	09 f0       	breq	.+2      	; 0x132a <__vector_9+0x30>
    1328:	09 95       	icall
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <TIMER1_init>:
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	39 f4       	brne	.+14     	; 0x1360 <TIMER1_init+0x14>
    1352:	8e b5       	in	r24, 0x2e	; 46
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	8e bd       	out	0x2e, r24	; 46
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    135e:	3c c0       	rjmp	.+120    	; 0x13d8 <TIMER1_init+0x8c>
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	91 05       	cpc	r25, r1
    1364:	39 f4       	brne	.+14     	; 0x1374 <TIMER1_init+0x28>
    1366:	8e b5       	in	r24, 0x2e	; 46
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	8e bd       	out	0x2e, r24	; 46
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    1372:	32 c0       	rjmp	.+100    	; 0x13d8 <TIMER1_init+0x8c>
    1374:	80 32       	cpi	r24, 0x20	; 32
    1376:	91 05       	cpc	r25, r1
    1378:	39 f4       	brne	.+14     	; 0x1388 <TIMER1_init+0x3c>
    137a:	8e b5       	in	r24, 0x2e	; 46
    137c:	83 60       	ori	r24, 0x03	; 3
    137e:	8e bd       	out	0x2e, r24	; 46
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    1386:	28 c0       	rjmp	.+80     	; 0x13d8 <TIMER1_init+0x8c>
    1388:	80 34       	cpi	r24, 0x40	; 64
    138a:	91 05       	cpc	r25, r1
    138c:	39 f4       	brne	.+14     	; 0x139c <TIMER1_init+0x50>
    138e:	8e b5       	in	r24, 0x2e	; 46
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8e bd       	out	0x2e, r24	; 46
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    139a:	1e c0       	rjmp	.+60     	; 0x13d8 <TIMER1_init+0x8c>
    139c:	80 38       	cpi	r24, 0x80	; 128
    139e:	91 05       	cpc	r25, r1
    13a0:	39 f4       	brne	.+14     	; 0x13b0 <TIMER1_init+0x64>
    13a2:	8e b5       	in	r24, 0x2e	; 46
    13a4:	85 60       	ori	r24, 0x05	; 5
    13a6:	8e bd       	out	0x2e, r24	; 46
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <TIMER1_init+0x8c>
    13b0:	81 15       	cp	r24, r1
    13b2:	21 e0       	ldi	r18, 0x01	; 1
    13b4:	92 07       	cpc	r25, r18
    13b6:	39 f4       	brne	.+14     	; 0x13c6 <TIMER1_init+0x7a>
    13b8:	8e b5       	in	r24, 0x2e	; 46
    13ba:	86 60       	ori	r24, 0x06	; 6
    13bc:	8e bd       	out	0x2e, r24	; 46
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <TIMER1_init+0x8c>
    13c6:	84 30       	cpi	r24, 0x04	; 4
    13c8:	94 40       	sbci	r25, 0x04	; 4
    13ca:	31 f4       	brne	.+12     	; 0x13d8 <TIMER1_init+0x8c>
    13cc:	8e b5       	in	r24, 0x2e	; 46
    13ce:	87 60       	ori	r24, 0x07	; 7
    13d0:	8e bd       	out	0x2e, r24	; 46
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <EN_timerOneInitStatus>
    13d8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <EN_timerOneInitStatus>
    13dc:	08 95       	ret

000013de <TIMER1_stop>:
    13de:	1e bc       	out	0x2e, r1	; 46
    13e0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <gu32_overFlowCounts>
    13e4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <gu32_overFlowCounts+0x1>
    13e8:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <gu32_overFlowCounts+0x2>
    13ec:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gu32_overFlowCounts+0x3>
    13f0:	08 95       	ret

000013f2 <TIMER1_OverFlowInterruptEnable>:
    13f2:	89 b7       	in	r24, 0x39	; 57
    13f4:	84 60       	ori	r24, 0x04	; 4
    13f6:	89 bf       	out	0x39, r24	; 57
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	08 95       	ret

000013fc <TIMER1_OverFlowInterruptDisable>:
    13fc:	89 b7       	in	r24, 0x39	; 57
    13fe:	8b 7f       	andi	r24, 0xFB	; 251
    1400:	89 bf       	out	0x39, r24	; 57
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	08 95       	ret

00001406 <TIMER1_voidMicroSecDelay>:
}


void TIMER1_voidMicroSecDelay(uint16_t u16_usdelay){
	
	uint16_t u16_desiredCounts = BOTTOM + u16_usdelay;
    1406:	8b 5f       	subi	r24, 0xFB	; 251
    1408:	91 09       	sbc	r25, r1
	Ru8_OCR1AH = (uint8_t)((u16_desiredCounts) >> 8);
    140a:	9b bd       	out	0x2b, r25	; 43
	Ru8_OCR1AL = (uint8_t)(u16_desiredCounts);
    140c:	8a bd       	out	0x2a, r24	; 42
	Ru8_TCNT1H = (uint8_t)((BOTTOM) >> 8);
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	8d bd       	out	0x2d, r24	; 45
	Ru8_TCNT1L = (uint8_t)(BOTTOM);
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	8c bd       	out	0x2c, r24	; 44
	SET_BIT(Ru8_TIFR,4);
    1416:	88 b7       	in	r24, 0x38	; 56
    1418:	80 61       	ori	r24, 0x10	; 16
    141a:	88 bf       	out	0x38, r24	; 56
	TIMER1_init(PRESCALE_8);
    141c:	88 e0       	ldi	r24, 0x08	; 8
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 a6 09 	call	0x134c	; 0x134c <TIMER1_init>
	while(GET_BIT(Ru8_TIFR,4) != 1);
    1424:	08 b6       	in	r0, 0x38	; 56
    1426:	04 fe       	sbrs	r0, 4
    1428:	fd cf       	rjmp	.-6      	; 0x1424 <TIMER1_voidMicroSecDelay+0x1e>
	TIMER1_stop();
    142a:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER1_stop>
    142e:	08 95       	ret

00001430 <TIMER1_u32getCounts>:
	TIMER1_setclbk(TIMER1_setCountOverFlow);
	TIMER1_OverFlowInterruptEnable();                    //Enabling system interrupt and flag for overflow for timer 1
	TIMER1_init(PRESCALE_8);
}

void TIMER1_u32getCounts(uint32_t* pu32_clkCounts, uint8_t u8_status){
    1430:	cf 93       	push	r28
    1432:	fc 01       	movw	r30, r24
    1434:	c6 2f       	mov	r28, r22
	
	uint32_t u32_counts = (gu32_overFlowCounts*COUNTS_PER_OVF);
    1436:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <gu32_overFlowCounts>
    143a:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <gu32_overFlowCounts+0x1>
    143e:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <gu32_overFlowCounts+0x2>
    1442:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <gu32_overFlowCounts+0x3>
    1446:	aa ef       	ldi	r26, 0xFA	; 250
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__muluhisi3>
	*(pu32_clkCounts)   = NULL;
    144e:	10 82       	st	Z, r1
    1450:	11 82       	std	Z+1, r1	; 0x01
    1452:	12 82       	std	Z+2, r1	; 0x02
    1454:	13 82       	std	Z+3, r1	; 0x03
	if((TRUE == u8_status)){
    1456:	c1 30       	cpi	r28, 0x01	; 1
    1458:	51 f4       	brne	.+20     	; 0x146e <TIMER1_u32getCounts+0x3e>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
		*(pu32_clkCounts) = u32_counts;
    145e:	80 83       	st	Z, r24
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	a2 83       	std	Z+2, r26	; 0x02
    1464:	b3 83       	std	Z+3, r27	; 0x03
		TIMER1_OverFlowInterruptDisable();
    1466:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER1_OverFlowInterruptDisable>
		TIMER1_stop();
    146a:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER1_stop>
	}
	else{
	}
}
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <TIMER1_setclbk>:
	gu32_overFlowCounts++;
}

void TIMER1_setclbk(void (*ptrFun)(void)){
	
		TIMER1_setclbkOverFlow = ptrFun;
    1472:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <TIMER1_setclbkOverFlow+0x1>
    1476:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <TIMER1_setclbkOverFlow>
    147a:	08 95       	ret

0000147c <TIMER1_msdelay>:
		break;
	}
	return (uint8_t)(EN_status);
}
EN_timer1DelayStatus_t TIMER1_msdelay(uint16_t mseconds)
{
    147c:	cf 93       	push	r28
    147e:	ac 01       	movw	r20, r24
	static volatile uint32_t u32_ticks;
	static uint8_t u8_timerBusy = FALSE;
	EN_timer1DelayStatus_t EN_delayStatus;
	static EN_timer1DelayStatus_t EN_timer1Status = TIMER1_DELAY_NSTARTED;
	
	if(FALSE == u8_timerBusy)
    1480:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <u8_timerBusy.1805>
    1484:	91 11       	cpse	r25, r1
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <TIMER1_msdelay+0x1a>
	{
		Ru8_TCNT1H   = (uint8_t)((BOTTOM) >> 8);
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	8d bd       	out	0x2d, r24	; 45
		Ru8_TCNT1L   = (uint8_t)(BOTTOM);
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	8c bd       	out	0x2c, r24	; 44
		u8_timerBusy = TRUE;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <u8_timerBusy.1805>
	}
	if(TIMER1_DELAY_NSTARTED == EN_timer1Status)
    1496:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <EN_timer1Status.1807>
    149a:	93 30       	cpi	r25, 0x03	; 3
    149c:	b9 f5       	brne	.+110    	; 0x150c <TIMER1_msdelay+0x90>
	{
		u32_ticks = round(( ( mseconds * PERIODIC_TIME_IN_MS ) / COUNTS_PER_OVF ));
    149e:	88 ee       	ldi	r24, 0xE8	; 232
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	48 9f       	mul	r20, r24
    14a4:	90 01       	movw	r18, r0
    14a6:	49 9f       	mul	r20, r25
    14a8:	30 0d       	add	r19, r0
    14aa:	58 9f       	mul	r21, r24
    14ac:	30 0d       	add	r19, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	36 95       	lsr	r19
    14b2:	27 95       	ror	r18
    14b4:	a3 e1       	ldi	r26, 0x13	; 19
    14b6:	b3 e8       	ldi	r27, 0x83	; 131
    14b8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__umulhisi3>
    14bc:	00 24       	eor	r0, r0
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	00 1c       	adc	r0, r0
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	00 1c       	adc	r0, r0
    14ca:	89 2f       	mov	r24, r25
    14cc:	90 2d       	mov	r25, r0
    14ce:	bc 01       	movw	r22, r24
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatunsisf>
    14d8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <round>
    14dc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fixunssfsi>
    14e0:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <u32_ticks.1804>
    14e4:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <u32_ticks.1804+0x1>
    14e8:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <u32_ticks.1804+0x2>
    14ec:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <u32_ticks.1804+0x3>
		TIMER1_setclbk(TIMER1_setCountOverFlow);
    14f0:	85 e6       	ldi	r24, 0x65	; 101
    14f2:	99 e0       	ldi	r25, 0x09	; 9
    14f4:	0e 94 39 0a 	call	0x1472	; 0x1472 <TIMER1_setclbk>
		TIMER1_OverFlowInterruptEnable();                    //Enabling system interrupt and flag for overflow for timer 1
    14f8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TIMER1_OverFlowInterruptEnable>
		TIMER1_init(PRESCALE_8);                             //Prescaler of one that yields 8MHz frequency
    14fc:	88 e0       	ldi	r24, 0x08	; 8
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 a6 09 	call	0x134c	; 0x134c <TIMER1_init>
		EN_timer1Status  = TIMER1_DELAY_STARTED;
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <EN_timer1Status.1807>
    150a:	1f c0       	rjmp	.+62     	; 0x154a <TIMER1_msdelay+0xce>
	}
	else if(gu32_overFlowCounts == u32_ticks)
    150c:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <gu32_overFlowCounts>
    1510:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <gu32_overFlowCounts+0x1>
    1514:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <gu32_overFlowCounts+0x2>
    1518:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <gu32_overFlowCounts+0x3>
    151c:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u32_ticks.1804>
    1520:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <u32_ticks.1804+0x1>
    1524:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <u32_ticks.1804+0x2>
    1528:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <u32_ticks.1804+0x3>
    152c:	48 17       	cp	r20, r24
    152e:	59 07       	cpc	r21, r25
    1530:	6a 07       	cpc	r22, r26
    1532:	7b 07       	cpc	r23, r27
    1534:	49 f4       	brne	.+18     	; 0x1548 <TIMER1_msdelay+0xcc>
	{
		TIMER1_stop();
    1536:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER1_stop>
		u8_timerBusy        = FALSE;
    153a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <u8_timerBusy.1805>
		EN_timer1Status     = TIMER1_DELAY_NSTARTED;
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <EN_timer1Status.1807>
		EN_delayStatus      = TIMER1_MS_DELAY_FINISHED;
    1544:	c0 e0       	ldi	r28, 0x00	; 0
    1546:	01 c0       	rjmp	.+2      	; 0x154a <TIMER1_msdelay+0xce>
		
	}
	else
	EN_delayStatus   = TIMER1_DELAY_NFINISHED;
    1548:	c1 e0       	ldi	r28, 0x01	; 1
	
	return EN_delayStatus;
}
    154a:	8c 2f       	mov	r24, r28
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <TIMER1_voidStartCounting>:
	TIMER1_stop();
}

void TIMER1_voidStartCounting(void){
	
	Ru8_TCNT1H = (uint8_t)((BOTTOM) >> 8);
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	8d bd       	out	0x2d, r24	; 45
	Ru8_TCNT1L = (uint8_t)(BOTTOM);
    1554:	85 e0       	ldi	r24, 0x05	; 5
    1556:	8c bd       	out	0x2c, r24	; 44
	TIMER1_setclbk(TIMER1_setCountOverFlow);
    1558:	85 e6       	ldi	r24, 0x65	; 101
    155a:	99 e0       	ldi	r25, 0x09	; 9
    155c:	0e 94 39 0a 	call	0x1472	; 0x1472 <TIMER1_setclbk>
	TIMER1_OverFlowInterruptEnable();                    //Enabling system interrupt and flag for overflow for timer 1
    1560:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TIMER1_OverFlowInterruptEnable>
	TIMER1_init(PRESCALE_8);
    1564:	88 e0       	ldi	r24, 0x08	; 8
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 a6 09 	call	0x134c	; 0x134c <TIMER1_init>
    156c:	08 95       	ret

0000156e <TIMER0_voidIntWaitControlFlagCount>:
	{
		u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
	}
	return u8_Timer2FlagIfUsed ;

}
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gu8_timer0FlagIfUsed>
    157c:	8b 31       	cpi	r24, 0x1B	; 27
    157e:	81 f5       	brne	.+96     	; 0x15e0 <TIMER0_voidIntWaitControlFlagCount+0x72>
    1580:	f0 90 a5 00 	lds	r15, 0x00A5	; 0x8000a5 <gu64_timer0IntWaitcounter>
    1584:	00 91 a6 00 	lds	r16, 0x00A6	; 0x8000a6 <gu64_timer0IntWaitcounter+0x1>
    1588:	10 91 a7 00 	lds	r17, 0x00A7	; 0x8000a7 <gu64_timer0IntWaitcounter+0x2>
    158c:	d0 91 a8 00 	lds	r29, 0x00A8	; 0x8000a8 <gu64_timer0IntWaitcounter+0x3>
    1590:	c0 91 a9 00 	lds	r28, 0x00A9	; 0x8000a9 <gu64_timer0IntWaitcounter+0x4>
    1594:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <gu64_timer0IntWaitcounter+0x5>
    1598:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <gu64_timer0IntWaitcounter+0x6>
    159c:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <gu64_timer0IntWaitcounter+0x7>
    15a0:	2f 2d       	mov	r18, r15
    15a2:	30 2f       	mov	r19, r16
    15a4:	41 2f       	mov	r20, r17
    15a6:	5d 2f       	mov	r21, r29
    15a8:	6c 2f       	mov	r22, r28
    15aa:	7b 2f       	mov	r23, r27
    15ac:	8f 2f       	mov	r24, r31
    15ae:	9e 2f       	mov	r25, r30
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__cmpdi2_s8>
    15b6:	a1 f0       	breq	.+40     	; 0x15e0 <TIMER0_voidIntWaitControlFlagCount+0x72>
    15b8:	af ef       	ldi	r26, 0xFF	; 255
    15ba:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__adddi3_s8>
    15be:	20 93 a5 00 	sts	0x00A5, r18	; 0x8000a5 <gu64_timer0IntWaitcounter>
    15c2:	30 93 a6 00 	sts	0x00A6, r19	; 0x8000a6 <gu64_timer0IntWaitcounter+0x1>
    15c6:	40 93 a7 00 	sts	0x00A7, r20	; 0x8000a7 <gu64_timer0IntWaitcounter+0x2>
    15ca:	50 93 a8 00 	sts	0x00A8, r21	; 0x8000a8 <gu64_timer0IntWaitcounter+0x3>
    15ce:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <gu64_timer0IntWaitcounter+0x4>
    15d2:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <gu64_timer0IntWaitcounter+0x5>
    15d6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gu64_timer0IntWaitcounter+0x6>
    15da:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <gu64_timer0IntWaitcounter+0x7>
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <TIMER0_voidIntWaitControlFlagCount+0x7e>
    15e0:	8a e1       	ldi	r24, 0x1A	; 26
    15e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu8_timer0FlagIfUsed>
    15e6:	8d e1       	ldi	r24, 0x1D	; 29
    15e8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_timer0FinishIntWaitFlag>
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	08 95       	ret

000015f8 <TIMER2_voidIntWaitControlFlagCount>:
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gu8_timer2FlagIfUsed>
    1606:	82 32       	cpi	r24, 0x22	; 34
    1608:	81 f5       	brne	.+96     	; 0x166a <TIMER2_voidIntWaitControlFlagCount+0x72>
    160a:	f0 90 9d 00 	lds	r15, 0x009D	; 0x80009d <gu64_timer2IntWaitcounter>
    160e:	00 91 9e 00 	lds	r16, 0x009E	; 0x80009e <gu64_timer2IntWaitcounter+0x1>
    1612:	10 91 9f 00 	lds	r17, 0x009F	; 0x80009f <gu64_timer2IntWaitcounter+0x2>
    1616:	d0 91 a0 00 	lds	r29, 0x00A0	; 0x8000a0 <gu64_timer2IntWaitcounter+0x3>
    161a:	c0 91 a1 00 	lds	r28, 0x00A1	; 0x8000a1 <gu64_timer2IntWaitcounter+0x4>
    161e:	b0 91 a2 00 	lds	r27, 0x00A2	; 0x8000a2 <gu64_timer2IntWaitcounter+0x5>
    1622:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <gu64_timer2IntWaitcounter+0x6>
    1626:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <gu64_timer2IntWaitcounter+0x7>
    162a:	2f 2d       	mov	r18, r15
    162c:	30 2f       	mov	r19, r16
    162e:	41 2f       	mov	r20, r17
    1630:	5d 2f       	mov	r21, r29
    1632:	6c 2f       	mov	r22, r28
    1634:	7b 2f       	mov	r23, r27
    1636:	8f 2f       	mov	r24, r31
    1638:	9e 2f       	mov	r25, r30
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__cmpdi2_s8>
    1640:	a1 f0       	breq	.+40     	; 0x166a <TIMER2_voidIntWaitControlFlagCount+0x72>
    1642:	af ef       	ldi	r26, 0xFF	; 255
    1644:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__adddi3_s8>
    1648:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <gu64_timer2IntWaitcounter>
    164c:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <gu64_timer2IntWaitcounter+0x1>
    1650:	40 93 9f 00 	sts	0x009F, r20	; 0x80009f <gu64_timer2IntWaitcounter+0x2>
    1654:	50 93 a0 00 	sts	0x00A0, r21	; 0x8000a0 <gu64_timer2IntWaitcounter+0x3>
    1658:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <gu64_timer2IntWaitcounter+0x4>
    165c:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <gu64_timer2IntWaitcounter+0x5>
    1660:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <gu64_timer2IntWaitcounter+0x6>
    1664:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <gu64_timer2IntWaitcounter+0x7>
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <TIMER2_voidIntWaitControlFlagCount+0x7e>
    166a:	81 e2       	ldi	r24, 0x21	; 33
    166c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gu8_timer2FlagIfUsed>
    1670:	8d e1       	ldi	r24, 0x1D	; 29
    1672:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gu8_timer2FinishIntWaitFlag>
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	08 95       	ret

00001682 <TIMER0_voidInit>:
    1682:	83 b7       	in	r24, 0x33	; 51
    1684:	8f 7b       	andi	r24, 0xBF	; 191
    1686:	83 bf       	out	0x33, r24	; 51
    1688:	83 b7       	in	r24, 0x33	; 51
    168a:	88 60       	ori	r24, 0x08	; 8
    168c:	83 bf       	out	0x33, r24	; 51
    168e:	83 b7       	in	r24, 0x33	; 51
    1690:	8f 77       	andi	r24, 0x7F	; 127
    1692:	83 bf       	out	0x33, r24	; 51
    1694:	83 b7       	in	r24, 0x33	; 51
    1696:	8f 7d       	andi	r24, 0xDF	; 223
    1698:	83 bf       	out	0x33, r24	; 51
    169a:	83 b7       	in	r24, 0x33	; 51
    169c:	8f 7e       	andi	r24, 0xEF	; 239
    169e:	83 bf       	out	0x33, r24	; 51
    16a0:	83 b7       	in	r24, 0x33	; 51
    16a2:	8b 7f       	andi	r24, 0xFB	; 251
    16a4:	83 bf       	out	0x33, r24	; 51
    16a6:	83 b7       	in	r24, 0x33	; 51
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	83 bf       	out	0x33, r24	; 51
    16ac:	83 b7       	in	r24, 0x33	; 51
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	83 bf       	out	0x33, r24	; 51
    16b2:	08 95       	ret

000016b4 <TIMER2_voidInit>:
    16b4:	85 b5       	in	r24, 0x25	; 37
    16b6:	8f 7b       	andi	r24, 0xBF	; 191
    16b8:	85 bd       	out	0x25, r24	; 37
    16ba:	85 b5       	in	r24, 0x25	; 37
    16bc:	87 7f       	andi	r24, 0xF7	; 247
    16be:	85 bd       	out	0x25, r24	; 37
    16c0:	85 b5       	in	r24, 0x25	; 37
    16c2:	8f 77       	andi	r24, 0x7F	; 127
    16c4:	85 bd       	out	0x25, r24	; 37
    16c6:	85 b5       	in	r24, 0x25	; 37
    16c8:	8f 7d       	andi	r24, 0xDF	; 223
    16ca:	85 bd       	out	0x25, r24	; 37
    16cc:	85 b5       	in	r24, 0x25	; 37
    16ce:	8f 7e       	andi	r24, 0xEF	; 239
    16d0:	85 bd       	out	0x25, r24	; 37
    16d2:	85 b5       	in	r24, 0x25	; 37
    16d4:	8b 7f       	andi	r24, 0xFB	; 251
    16d6:	85 bd       	out	0x25, r24	; 37
    16d8:	85 b5       	in	r24, 0x25	; 37
    16da:	82 60       	ori	r24, 0x02	; 2
    16dc:	85 bd       	out	0x25, r24	; 37
    16de:	85 b5       	in	r24, 0x25	; 37
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	85 bd       	out	0x25, r24	; 37
    16e4:	08 95       	ret

000016e6 <TIMER0_u8StartWithclockAndPrescalerSelect>:
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	fc 01       	movw	r30, r24
    16ea:	39 97       	sbiw	r30, 0x09	; 9
    16ec:	e7 30       	cpi	r30, 0x07	; 7
    16ee:	f1 05       	cpc	r31, r1
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <TIMER0_u8StartWithclockAndPrescalerSelect+0xe>
    16f2:	51 c0       	rjmp	.+162    	; 0x1796 <TIMER0_u8StartWithclockAndPrescalerSelect+0xb0>
    16f4:	eb 5c       	subi	r30, 0xCB	; 203
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__tablejump2__>
    16fc:	83 b7       	in	r24, 0x33	; 51
    16fe:	8b 7f       	andi	r24, 0xFB	; 251
    1700:	83 bf       	out	0x33, r24	; 51
    1702:	83 b7       	in	r24, 0x33	; 51
    1704:	8d 7f       	andi	r24, 0xFD	; 253
    1706:	83 bf       	out	0x33, r24	; 51
    1708:	83 b7       	in	r24, 0x33	; 51
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	83 bf       	out	0x33, r24	; 51
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	08 95       	ret
    1712:	83 b7       	in	r24, 0x33	; 51
    1714:	8b 7f       	andi	r24, 0xFB	; 251
    1716:	83 bf       	out	0x33, r24	; 51
    1718:	83 b7       	in	r24, 0x33	; 51
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	83 bf       	out	0x33, r24	; 51
    171e:	83 b7       	in	r24, 0x33	; 51
    1720:	8e 7f       	andi	r24, 0xFE	; 254
    1722:	83 bf       	out	0x33, r24	; 51
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 95       	ret
    1728:	83 b7       	in	r24, 0x33	; 51
    172a:	8b 7f       	andi	r24, 0xFB	; 251
    172c:	83 bf       	out	0x33, r24	; 51
    172e:	83 b7       	in	r24, 0x33	; 51
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	83 bf       	out	0x33, r24	; 51
    1734:	83 b7       	in	r24, 0x33	; 51
    1736:	81 60       	ori	r24, 0x01	; 1
    1738:	83 bf       	out	0x33, r24	; 51
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	08 95       	ret
    173e:	83 b7       	in	r24, 0x33	; 51
    1740:	84 60       	ori	r24, 0x04	; 4
    1742:	83 bf       	out	0x33, r24	; 51
    1744:	83 b7       	in	r24, 0x33	; 51
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	83 bf       	out	0x33, r24	; 51
    174a:	83 b7       	in	r24, 0x33	; 51
    174c:	8e 7f       	andi	r24, 0xFE	; 254
    174e:	83 bf       	out	0x33, r24	; 51
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	08 95       	ret
    1754:	83 b7       	in	r24, 0x33	; 51
    1756:	84 60       	ori	r24, 0x04	; 4
    1758:	83 bf       	out	0x33, r24	; 51
    175a:	83 b7       	in	r24, 0x33	; 51
    175c:	8d 7f       	andi	r24, 0xFD	; 253
    175e:	83 bf       	out	0x33, r24	; 51
    1760:	83 b7       	in	r24, 0x33	; 51
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	83 bf       	out	0x33, r24	; 51
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	08 95       	ret
    176a:	83 b7       	in	r24, 0x33	; 51
    176c:	84 60       	ori	r24, 0x04	; 4
    176e:	83 bf       	out	0x33, r24	; 51
    1770:	83 b7       	in	r24, 0x33	; 51
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	83 bf       	out	0x33, r24	; 51
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	8e 7f       	andi	r24, 0xFE	; 254
    177a:	83 bf       	out	0x33, r24	; 51
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	08 95       	ret
    1780:	83 b7       	in	r24, 0x33	; 51
    1782:	84 60       	ori	r24, 0x04	; 4
    1784:	83 bf       	out	0x33, r24	; 51
    1786:	83 b7       	in	r24, 0x33	; 51
    1788:	82 60       	ori	r24, 0x02	; 2
    178a:	83 bf       	out	0x33, r24	; 51
    178c:	83 b7       	in	r24, 0x33	; 51
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	83 bf       	out	0x33, r24	; 51
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	08 95       	ret
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	08 95       	ret

0000179a <TIMER2_u8StartWithclockAndPrescalerSelect>:
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	fc 01       	movw	r30, r24
    179e:	39 97       	sbiw	r30, 0x09	; 9
    17a0:	e7 30       	cpi	r30, 0x07	; 7
    17a2:	f1 05       	cpc	r31, r1
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <TIMER2_u8StartWithclockAndPrescalerSelect+0xe>
    17a6:	51 c0       	rjmp	.+162    	; 0x184a <TIMER2_u8StartWithclockAndPrescalerSelect+0xb0>
    17a8:	e4 5c       	subi	r30, 0xC4	; 196
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__tablejump2__>
    17b0:	85 b5       	in	r24, 0x25	; 37
    17b2:	8b 7f       	andi	r24, 0xFB	; 251
    17b4:	85 bd       	out	0x25, r24	; 37
    17b6:	85 b5       	in	r24, 0x25	; 37
    17b8:	8d 7f       	andi	r24, 0xFD	; 253
    17ba:	85 bd       	out	0x25, r24	; 37
    17bc:	85 b5       	in	r24, 0x25	; 37
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	85 bd       	out	0x25, r24	; 37
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	08 95       	ret
    17c6:	85 b5       	in	r24, 0x25	; 37
    17c8:	8b 7f       	andi	r24, 0xFB	; 251
    17ca:	85 bd       	out	0x25, r24	; 37
    17cc:	85 b5       	in	r24, 0x25	; 37
    17ce:	82 60       	ori	r24, 0x02	; 2
    17d0:	85 bd       	out	0x25, r24	; 37
    17d2:	85 b5       	in	r24, 0x25	; 37
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	85 bd       	out	0x25, r24	; 37
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	08 95       	ret
    17dc:	85 b5       	in	r24, 0x25	; 37
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	85 bd       	out	0x25, r24	; 37
    17e2:	85 b5       	in	r24, 0x25	; 37
    17e4:	82 60       	ori	r24, 0x02	; 2
    17e6:	85 bd       	out	0x25, r24	; 37
    17e8:	85 b5       	in	r24, 0x25	; 37
    17ea:	81 60       	ori	r24, 0x01	; 1
    17ec:	85 bd       	out	0x25, r24	; 37
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	08 95       	ret
    17f2:	85 b5       	in	r24, 0x25	; 37
    17f4:	84 60       	ori	r24, 0x04	; 4
    17f6:	85 bd       	out	0x25, r24	; 37
    17f8:	85 b5       	in	r24, 0x25	; 37
    17fa:	8d 7f       	andi	r24, 0xFD	; 253
    17fc:	85 bd       	out	0x25, r24	; 37
    17fe:	85 b5       	in	r24, 0x25	; 37
    1800:	8e 7f       	andi	r24, 0xFE	; 254
    1802:	85 bd       	out	0x25, r24	; 37
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	08 95       	ret
    1808:	85 b5       	in	r24, 0x25	; 37
    180a:	84 60       	ori	r24, 0x04	; 4
    180c:	85 bd       	out	0x25, r24	; 37
    180e:	85 b5       	in	r24, 0x25	; 37
    1810:	8d 7f       	andi	r24, 0xFD	; 253
    1812:	85 bd       	out	0x25, r24	; 37
    1814:	85 b5       	in	r24, 0x25	; 37
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	85 bd       	out	0x25, r24	; 37
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	08 95       	ret
    181e:	85 b5       	in	r24, 0x25	; 37
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	85 bd       	out	0x25, r24	; 37
    1824:	85 b5       	in	r24, 0x25	; 37
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	85 bd       	out	0x25, r24	; 37
    182a:	85 b5       	in	r24, 0x25	; 37
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	85 bd       	out	0x25, r24	; 37
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	08 95       	ret
    1834:	85 b5       	in	r24, 0x25	; 37
    1836:	84 60       	ori	r24, 0x04	; 4
    1838:	85 bd       	out	0x25, r24	; 37
    183a:	85 b5       	in	r24, 0x25	; 37
    183c:	82 60       	ori	r24, 0x02	; 2
    183e:	85 bd       	out	0x25, r24	; 37
    1840:	85 b5       	in	r24, 0x25	; 37
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	85 bd       	out	0x25, r24	; 37
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	08 95       	ret
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	08 95       	ret

0000184e <TIMERS_u8IntModesEn>:
    184e:	89 31       	cpi	r24, 0x19	; 25
    1850:	89 f0       	breq	.+34     	; 0x1874 <TIMERS_u8IntModesEn+0x26>
    1852:	18 f4       	brcc	.+6      	; 0x185a <TIMERS_u8IntModesEn+0xc>
    1854:	88 31       	cpi	r24, 0x18	; 24
    1856:	31 f0       	breq	.+12     	; 0x1864 <TIMERS_u8IntModesEn+0x16>
    1858:	25 c0       	rjmp	.+74     	; 0x18a4 <TIMERS_u8IntModesEn+0x56>
    185a:	8f 31       	cpi	r24, 0x1F	; 31
    185c:	99 f0       	breq	.+38     	; 0x1884 <TIMERS_u8IntModesEn+0x36>
    185e:	80 32       	cpi	r24, 0x20	; 32
    1860:	c9 f0       	breq	.+50     	; 0x1894 <TIMERS_u8IntModesEn+0x46>
    1862:	20 c0       	rjmp	.+64     	; 0x18a4 <TIMERS_u8IntModesEn+0x56>
    1864:	88 b7       	in	r24, 0x38	; 56
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	88 bf       	out	0x38, r24	; 56
    186a:	89 b7       	in	r24, 0x39	; 57
    186c:	81 60       	ori	r24, 0x01	; 1
    186e:	89 bf       	out	0x39, r24	; 57
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	08 95       	ret
    1874:	88 b7       	in	r24, 0x38	; 56
    1876:	82 60       	ori	r24, 0x02	; 2
    1878:	88 bf       	out	0x38, r24	; 56
    187a:	89 b7       	in	r24, 0x39	; 57
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	89 bf       	out	0x39, r24	; 57
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	08 95       	ret
    1884:	88 b7       	in	r24, 0x38	; 56
    1886:	80 64       	ori	r24, 0x40	; 64
    1888:	88 bf       	out	0x38, r24	; 56
    188a:	89 b7       	in	r24, 0x39	; 57
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	89 bf       	out	0x39, r24	; 57
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	08 95       	ret
    1894:	88 b7       	in	r24, 0x38	; 56
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	88 bf       	out	0x38, r24	; 56
    189a:	89 b7       	in	r24, 0x39	; 57
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	89 bf       	out	0x39, r24	; 57
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	08 95       	ret
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	08 95       	ret

000018a8 <TIMERS_u8IntModesDis>:
    18a8:	89 31       	cpi	r24, 0x19	; 25
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <TIMERS_u8IntModesDis+0x20>
    18ac:	18 f4       	brcc	.+6      	; 0x18b4 <TIMERS_u8IntModesDis+0xc>
    18ae:	88 31       	cpi	r24, 0x18	; 24
    18b0:	31 f0       	breq	.+12     	; 0x18be <TIMERS_u8IntModesDis+0x16>
    18b2:	19 c0       	rjmp	.+50     	; 0x18e6 <TIMERS_u8IntModesDis+0x3e>
    18b4:	8f 31       	cpi	r24, 0x1F	; 31
    18b6:	69 f0       	breq	.+26     	; 0x18d2 <TIMERS_u8IntModesDis+0x2a>
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	81 f0       	breq	.+32     	; 0x18dc <TIMERS_u8IntModesDis+0x34>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <TIMERS_u8IntModesDis+0x3e>
    18be:	89 b7       	in	r24, 0x39	; 57
    18c0:	8e 7f       	andi	r24, 0xFE	; 254
    18c2:	89 bf       	out	0x39, r24	; 57
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	08 95       	ret
    18c8:	89 b7       	in	r24, 0x39	; 57
    18ca:	8d 7f       	andi	r24, 0xFD	; 253
    18cc:	89 bf       	out	0x39, r24	; 57
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	08 95       	ret
    18d2:	89 b7       	in	r24, 0x39	; 57
    18d4:	8f 7b       	andi	r24, 0xBF	; 191
    18d6:	89 bf       	out	0x39, r24	; 57
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	08 95       	ret
    18dc:	89 b7       	in	r24, 0x39	; 57
    18de:	8f 77       	andi	r24, 0x7F	; 127
    18e0:	89 bf       	out	0x39, r24	; 57
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	08 95       	ret
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 95       	ret

000018ea <Timer0_u8setOverFlowRegTicksBeforeOV>:
    18ea:	80 95       	com	r24
    18ec:	82 bf       	out	0x32, r24	; 50
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	08 95       	ret

000018f2 <Timer2_u8setOverFlowRegTicksBeforeOV>:
    18f2:	80 95       	com	r24
    18f4:	84 bd       	out	0x24, r24	; 36
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	08 95       	ret

000018fa <Timer0_u8setCompareRegTicksBeforeOV>:
    18fa:	8c bf       	out	0x3c, r24	; 60
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	08 95       	ret

00001900 <Timer2_u8setCompareRegTicksBeforeOV>:
    1900:	83 bd       	out	0x23, r24	; 35
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	08 95       	ret

00001906 <TIMER0_u8setCallBack>:
    1906:	61 15       	cp	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	89 f0       	breq	.+34     	; 0x192e <TIMER0_u8setCallBack+0x28>
    190c:	88 31       	cpi	r24, 0x18	; 24
    190e:	19 f0       	breq	.+6      	; 0x1916 <TIMER0_u8setCallBack+0x10>
    1910:	89 31       	cpi	r24, 0x19	; 25
    1912:	39 f0       	breq	.+14     	; 0x1922 <TIMER0_u8setCallBack+0x1c>
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <TIMER0_u8setCallBack+0x2c>
    1916:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <Timer0OverFlowSetCallBackISR+0x1>
    191a:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <Timer0OverFlowSetCallBackISR>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	08 95       	ret
    1922:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <Timer0CompareMatchSetCallBackISR+0x1>
    1926:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <Timer0CompareMatchSetCallBackISR>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	08 95       	ret
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	08 95       	ret
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	08 95       	ret

00001936 <TIMER2_u8setCallBack>:
    1936:	61 15       	cp	r22, r1
    1938:	71 05       	cpc	r23, r1
    193a:	89 f0       	breq	.+34     	; 0x195e <TIMER2_u8setCallBack+0x28>
    193c:	8f 31       	cpi	r24, 0x1F	; 31
    193e:	19 f0       	breq	.+6      	; 0x1946 <TIMER2_u8setCallBack+0x10>
    1940:	80 32       	cpi	r24, 0x20	; 32
    1942:	39 f0       	breq	.+14     	; 0x1952 <TIMER2_u8setCallBack+0x1c>
    1944:	0e c0       	rjmp	.+28     	; 0x1962 <TIMER2_u8setCallBack+0x2c>
    1946:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <Timer2OverFlowSetCallBackISR+0x1>
    194a:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <Timer2OverFlowSetCallBackISR>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	08 95       	ret
    1952:	70 93 b0 00 	sts	0x00B0, r23	; 0x8000b0 <Timer2CompareMatchSetCallBackISR+0x1>
    1956:	60 93 af 00 	sts	0x00AF, r22	; 0x8000af <Timer2CompareMatchSetCallBackISR>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	08 95       	ret
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	08 95       	ret
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	08 95       	ret

00001966 <__vector_10>:
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	af 93       	push	r26
    1982:	bf 93       	push	r27
    1984:	ef 93       	push	r30
    1986:	ff 93       	push	r31
    1988:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <Timer0CompareMatchSetCallBackISR>
    198c:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <Timer0CompareMatchSetCallBackISR+0x1>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	09 f0       	breq	.+2      	; 0x1996 <__vector_10+0x30>
    1994:	09 95       	icall
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <__vector_11>:
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	2f 93       	push	r18
    19c4:	3f 93       	push	r19
    19c6:	4f 93       	push	r20
    19c8:	5f 93       	push	r21
    19ca:	6f 93       	push	r22
    19cc:	7f 93       	push	r23
    19ce:	8f 93       	push	r24
    19d0:	9f 93       	push	r25
    19d2:	af 93       	push	r26
    19d4:	bf 93       	push	r27
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
    19da:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <Timer0OverFlowSetCallBackISR>
    19de:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <Timer0OverFlowSetCallBackISR+0x1>
    19e2:	30 97       	sbiw	r30, 0x00	; 0
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <__vector_11+0x30>
    19e6:	09 95       	icall
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_4>:
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Timer2CompareMatchSetCallBackISR>
    1a30:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Timer2CompareMatchSetCallBackISR+0x1>
    1a34:	30 97       	sbiw	r30, 0x00	; 0
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <__vector_4+0x30>
    1a38:	09 95       	icall
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	7f 91       	pop	r23
    1a48:	6f 91       	pop	r22
    1a4a:	5f 91       	pop	r21
    1a4c:	4f 91       	pop	r20
    1a4e:	3f 91       	pop	r19
    1a50:	2f 91       	pop	r18
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	0f 90       	pop	r0
    1a58:	1f 90       	pop	r1
    1a5a:	18 95       	reti

00001a5c <__vector_5>:
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
    1a7e:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <Timer2OverFlowSetCallBackISR>
    1a82:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <Timer2OverFlowSetCallBackISR+0x1>
    1a86:	30 97       	sbiw	r30, 0x00	; 0
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <__vector_5+0x30>
    1a8a:	09 95       	icall
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <TIMER0_u8InterruptWait>:
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <gu8_timer0FlagIfUsed>
    1ab6:	2a 31       	cpi	r18, 0x1A	; 26
    1ab8:	b9 f5       	brne	.+110    	; 0x1b28 <TIMER0_u8InterruptWait+0x7a>
    1aba:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <gu8_timer0FinishIntWaitFlag>
    1abe:	2e 31       	cpi	r18, 0x1E	; 30
    1ac0:	a9 f1       	breq	.+106    	; 0x1b2c <TIMER0_u8InterruptWait+0x7e>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <gu64_timer0IntWaitcounter>
    1ada:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <gu64_timer0IntWaitcounter+0x1>
    1ade:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <gu64_timer0IntWaitcounter+0x2>
    1ae2:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <gu64_timer0IntWaitcounter+0x3>
    1ae6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <gu64_timer0IntWaitcounter+0x4>
    1aea:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <gu64_timer0IntWaitcounter+0x5>
    1aee:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu64_timer0IntWaitcounter+0x6>
    1af2:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <gu64_timer0IntWaitcounter+0x7>
    1af6:	8a ef       	ldi	r24, 0xFA	; 250
    1af8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Timer0_u8setCompareRegTicksBeforeOV>
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Timer0_u8setOverFlowRegTicksBeforeOV>
    1b02:	8b e1       	ldi	r24, 0x1B	; 27
    1b04:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu8_timer0FlagIfUsed>
    1b08:	89 e1       	ldi	r24, 0x19	; 25
    1b0a:	0e 94 27 0c 	call	0x184e	; 0x184e <TIMERS_u8IntModesEn>
    1b0e:	67 eb       	ldi	r22, 0xB7	; 183
    1b10:	7a e0       	ldi	r23, 0x0A	; 10
    1b12:	89 e1       	ldi	r24, 0x19	; 25
    1b14:	0e 94 83 0c 	call	0x1906	; 0x1906 <TIMER0_u8setCallBack>
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TIMER0_u8StartWithclockAndPrescalerSelect>
    1b1e:	8e e1       	ldi	r24, 0x1E	; 30
    1b20:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_timer0FinishIntWaitFlag>
    1b24:	8a e1       	ldi	r24, 0x1A	; 26
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <TIMER0_u8InterruptWait+0x80>
    1b28:	8b e1       	ldi	r24, 0x1B	; 27
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <TIMER0_u8InterruptWait+0x80>
    1b2c:	8b e1       	ldi	r24, 0x1B	; 27
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <TIMER0_u8GetIntWaitStatus>:
    1b34:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gu8_timer0FinishIntWaitFlag>
    1b38:	08 95       	ret

00001b3a <TIMER2_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER2_u8InterruptWait(uint32_t u32_interruptTimeInMilliSec)
{
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
	uint8_t u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
	if(gu8_timer2FlagIfUsed==u8_TIMER2_FLAG_NOT_USED &&gu8_timer2FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
    1b3e:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <gu8_timer2FlagIfUsed>
    1b42:	21 32       	cpi	r18, 0x21	; 33
    1b44:	b9 f5       	brne	.+110    	; 0x1bb4 <TIMER2_u8InterruptWait+0x7a>
    1b46:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <gu8_timer2FinishIntWaitFlag>
    1b4a:	2e 31       	cpi	r18, 0x1E	; 30
    1b4c:	a9 f1       	breq	.+106    	; 0x1bb8 <TIMER2_u8InterruptWait+0x7e>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
	{
		gu64_timer2IntWaitcounter = (uint64_t)(u32_interruptTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	aa 1f       	adc	r26, r26
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	aa 1f       	adc	r26, r26
    1b60:	bb 1f       	adc	r27, r27
    1b62:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <gu64_timer2IntWaitcounter>
    1b66:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <gu64_timer2IntWaitcounter+0x1>
    1b6a:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <gu64_timer2IntWaitcounter+0x2>
    1b6e:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <gu64_timer2IntWaitcounter+0x3>
    1b72:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <gu64_timer2IntWaitcounter+0x4>
    1b76:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <gu64_timer2IntWaitcounter+0x5>
    1b7a:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <gu64_timer2IntWaitcounter+0x6>
    1b7e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <gu64_timer2IntWaitcounter+0x7>
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1b82:	8a ef       	ldi	r24, 0xFA	; 250
    1b84:	0e 94 80 0c 	call	0x1900	; 0x1900 <Timer2_u8setCompareRegTicksBeforeOV>
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Timer2_u8setOverFlowRegTicksBeforeOV>
		gu8_timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    1b8e:	82 e2       	ldi	r24, 0x22	; 34
    1b90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gu8_timer2FlagIfUsed>
		TIMERS_u8IntModesEn(u8_TIMER2_COMPARE_ON_MATCH);
    1b94:	80 e2       	ldi	r24, 0x20	; 32
    1b96:	0e 94 27 0c 	call	0x184e	; 0x184e <TIMERS_u8IntModesEn>
		TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,TIMER2_voidIntWaitControlFlagCount) ;
    1b9a:	6c ef       	ldi	r22, 0xFC	; 252
    1b9c:	7a e0       	ldi	r23, 0x0A	; 10
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <TIMER2_u8setCallBack>
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1ba4:	8a e0       	ldi	r24, 0x0A	; 10
    1ba6:	0e 94 cd 0b 	call	0x179a	; 0x179a <TIMER2_u8StartWithclockAndPrescalerSelect>
		gu8_timer2FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    1baa:	8e e1       	ldi	r24, 0x1E	; 30
    1bac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gu8_timer2FinishIntWaitFlag>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER2_u8InterruptWait(uint32_t u32_interruptTimeInMilliSec)
{
	uint8_t u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
    1bb0:	81 e2       	ldi	r24, 0x21	; 33
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
		gu8_timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
		TIMERS_u8IntModesEn(u8_TIMER2_COMPARE_ON_MATCH);
		TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,TIMER2_voidIntWaitControlFlagCount) ;
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		gu8_timer2FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <TIMER2_u8InterruptWait+0x80>

	}
	else
	{
		u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    1bb4:	82 e2       	ldi	r24, 0x22	; 34
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <TIMER2_u8InterruptWait+0x80>
    1bb8:	82 e2       	ldi	r24, 0x22	; 34
	}
	return u8_Timer2FlagIfUsed ;
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	08 95       	ret

00001bc0 <TIMER2_u8GetIntWaitStatus>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t TIMER2_u8GetIntWaitStatus(void)
{
	return gu8_timer2FinishIntWaitFlag  ;
}
    1bc0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gu8_timer2FinishIntWaitFlag>
    1bc4:	08 95       	ret

00001bc6 <__fixunssfsi>:
    1bc6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__fp_splitA>
    1bca:	88 f0       	brcs	.+34     	; 0x1bee <__fixunssfsi+0x28>
    1bcc:	9f 57       	subi	r25, 0x7F	; 127
    1bce:	98 f0       	brcs	.+38     	; 0x1bf6 <__fixunssfsi+0x30>
    1bd0:	b9 2f       	mov	r27, r25
    1bd2:	99 27       	eor	r25, r25
    1bd4:	b7 51       	subi	r27, 0x17	; 23
    1bd6:	b0 f0       	brcs	.+44     	; 0x1c04 <__fixunssfsi+0x3e>
    1bd8:	e1 f0       	breq	.+56     	; 0x1c12 <__fixunssfsi+0x4c>
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	1a f0       	brmi	.+6      	; 0x1bea <__fixunssfsi+0x24>
    1be4:	ba 95       	dec	r27
    1be6:	c9 f7       	brne	.-14     	; 0x1bda <__fixunssfsi+0x14>
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <__fixunssfsi+0x4c>
    1bea:	b1 30       	cpi	r27, 0x01	; 1
    1bec:	91 f0       	breq	.+36     	; 0x1c12 <__fixunssfsi+0x4c>
    1bee:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fp_zero>
    1bf2:	b1 e0       	ldi	r27, 0x01	; 1
    1bf4:	08 95       	ret
    1bf6:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_zero>
    1bfa:	67 2f       	mov	r22, r23
    1bfc:	78 2f       	mov	r23, r24
    1bfe:	88 27       	eor	r24, r24
    1c00:	b8 5f       	subi	r27, 0xF8	; 248
    1c02:	39 f0       	breq	.+14     	; 0x1c12 <__fixunssfsi+0x4c>
    1c04:	b9 3f       	cpi	r27, 0xF9	; 249
    1c06:	cc f3       	brlt	.-14     	; 0x1bfa <__fixunssfsi+0x34>
    1c08:	86 95       	lsr	r24
    1c0a:	77 95       	ror	r23
    1c0c:	67 95       	ror	r22
    1c0e:	b3 95       	inc	r27
    1c10:	d9 f7       	brne	.-10     	; 0x1c08 <__fixunssfsi+0x42>
    1c12:	3e f4       	brtc	.+14     	; 0x1c22 <__fixunssfsi+0x5c>
    1c14:	90 95       	com	r25
    1c16:	80 95       	com	r24
    1c18:	70 95       	com	r23
    1c1a:	61 95       	neg	r22
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	08 95       	ret

00001c24 <__floatunsisf>:
    1c24:	e8 94       	clt
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <__floatsisf+0x12>

00001c28 <__floatsisf>:
    1c28:	97 fb       	bst	r25, 7
    1c2a:	3e f4       	brtc	.+14     	; 0x1c3a <__floatsisf+0x12>
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	61 95       	neg	r22
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	99 23       	and	r25, r25
    1c3c:	a9 f0       	breq	.+42     	; 0x1c68 <__floatsisf+0x40>
    1c3e:	f9 2f       	mov	r31, r25
    1c40:	96 e9       	ldi	r25, 0x96	; 150
    1c42:	bb 27       	eor	r27, r27
    1c44:	93 95       	inc	r25
    1c46:	f6 95       	lsr	r31
    1c48:	87 95       	ror	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b7 95       	ror	r27
    1c50:	f1 11       	cpse	r31, r1
    1c52:	f8 cf       	rjmp	.-16     	; 0x1c44 <__floatsisf+0x1c>
    1c54:	fa f4       	brpl	.+62     	; 0x1c94 <__floatsisf+0x6c>
    1c56:	bb 0f       	add	r27, r27
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <__floatsisf+0x36>
    1c5a:	60 ff       	sbrs	r22, 0
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <__floatsisf+0x6c>
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	8f 4f       	sbci	r24, 0xFF	; 255
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <__floatsisf+0x6c>
    1c68:	88 23       	and	r24, r24
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <__floatsisf+0x48>
    1c6c:	96 e9       	ldi	r25, 0x96	; 150
    1c6e:	11 c0       	rjmp	.+34     	; 0x1c92 <__floatsisf+0x6a>
    1c70:	77 23       	and	r23, r23
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <__floatsisf+0x54>
    1c74:	9e e8       	ldi	r25, 0x8E	; 142
    1c76:	87 2f       	mov	r24, r23
    1c78:	76 2f       	mov	r23, r22
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <__floatsisf+0x5e>
    1c7c:	66 23       	and	r22, r22
    1c7e:	71 f0       	breq	.+28     	; 0x1c9c <__floatsisf+0x74>
    1c80:	96 e8       	ldi	r25, 0x86	; 134
    1c82:	86 2f       	mov	r24, r22
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	2a f0       	brmi	.+10     	; 0x1c94 <__floatsisf+0x6c>
    1c8a:	9a 95       	dec	r25
    1c8c:	66 0f       	add	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	da f7       	brpl	.-10     	; 0x1c8a <__floatsisf+0x62>
    1c94:	88 0f       	add	r24, r24
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	08 95       	ret

00001c9e <__fp_split3>:
    1c9e:	57 fd       	sbrc	r21, 7
    1ca0:	90 58       	subi	r25, 0x80	; 128
    1ca2:	44 0f       	add	r20, r20
    1ca4:	55 1f       	adc	r21, r21
    1ca6:	59 f0       	breq	.+22     	; 0x1cbe <__fp_splitA+0x10>
    1ca8:	5f 3f       	cpi	r21, 0xFF	; 255
    1caa:	71 f0       	breq	.+28     	; 0x1cc8 <__fp_splitA+0x1a>
    1cac:	47 95       	ror	r20

00001cae <__fp_splitA>:
    1cae:	88 0f       	add	r24, r24
    1cb0:	97 fb       	bst	r25, 7
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <__fp_splitA+0x20>
    1cb6:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb8:	79 f0       	breq	.+30     	; 0x1cd8 <__fp_splitA+0x2a>
    1cba:	87 95       	ror	r24
    1cbc:	08 95       	ret
    1cbe:	12 16       	cp	r1, r18
    1cc0:	13 06       	cpc	r1, r19
    1cc2:	14 06       	cpc	r1, r20
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	f2 cf       	rjmp	.-28     	; 0x1cac <__fp_split3+0xe>
    1cc8:	46 95       	lsr	r20
    1cca:	f1 df       	rcall	.-30     	; 0x1cae <__fp_splitA>
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <__fp_splitA+0x30>
    1cce:	16 16       	cp	r1, r22
    1cd0:	17 06       	cpc	r1, r23
    1cd2:	18 06       	cpc	r1, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	f1 cf       	rjmp	.-30     	; 0x1cba <__fp_splitA+0xc>
    1cd8:	86 95       	lsr	r24
    1cda:	71 05       	cpc	r23, r1
    1cdc:	61 05       	cpc	r22, r1
    1cde:	08 94       	sec
    1ce0:	08 95       	ret

00001ce2 <__fp_zero>:
    1ce2:	e8 94       	clt

00001ce4 <__fp_szero>:
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	66 27       	eor	r22, r22
    1ce8:	77 27       	eor	r23, r23
    1cea:	cb 01       	movw	r24, r22
    1cec:	97 f9       	bld	r25, 7
    1cee:	08 95       	ret

00001cf0 <round>:
    1cf0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__fp_splitA>
    1cf4:	e8 f0       	brcs	.+58     	; 0x1d30 <round+0x40>
    1cf6:	9e 37       	cpi	r25, 0x7E	; 126
    1cf8:	e8 f0       	brcs	.+58     	; 0x1d34 <round+0x44>
    1cfa:	96 39       	cpi	r25, 0x96	; 150
    1cfc:	b8 f4       	brcc	.+46     	; 0x1d2c <round+0x3c>
    1cfe:	9e 38       	cpi	r25, 0x8E	; 142
    1d00:	48 f4       	brcc	.+18     	; 0x1d14 <round+0x24>
    1d02:	67 2f       	mov	r22, r23
    1d04:	78 2f       	mov	r23, r24
    1d06:	88 27       	eor	r24, r24
    1d08:	98 5f       	subi	r25, 0xF8	; 248
    1d0a:	f9 cf       	rjmp	.-14     	; 0x1cfe <round+0xe>
    1d0c:	86 95       	lsr	r24
    1d0e:	77 95       	ror	r23
    1d10:	67 95       	ror	r22
    1d12:	93 95       	inc	r25
    1d14:	95 39       	cpi	r25, 0x95	; 149
    1d16:	d0 f3       	brcs	.-12     	; 0x1d0c <round+0x1c>
    1d18:	b6 2f       	mov	r27, r22
    1d1a:	b1 70       	andi	r27, 0x01	; 1
    1d1c:	6b 0f       	add	r22, r27
    1d1e:	71 1d       	adc	r23, r1
    1d20:	81 1d       	adc	r24, r1
    1d22:	20 f4       	brcc	.+8      	; 0x1d2c <round+0x3c>
    1d24:	87 95       	ror	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	93 95       	inc	r25
    1d2c:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__fp_mintl>
    1d30:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_mpack>
    1d34:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__fp_szero>

00001d38 <__fp_mintl>:
    1d38:	88 23       	and	r24, r24
    1d3a:	71 f4       	brne	.+28     	; 0x1d58 <__fp_mintl+0x20>
    1d3c:	77 23       	and	r23, r23
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <__fp_mintl+0x10>
    1d40:	98 50       	subi	r25, 0x08	; 8
    1d42:	87 2b       	or	r24, r23
    1d44:	76 2f       	mov	r23, r22
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <__fp_mintl+0x1e>
    1d48:	66 23       	and	r22, r22
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <__fp_mintl+0x18>
    1d4c:	99 27       	eor	r25, r25
    1d4e:	0d c0       	rjmp	.+26     	; 0x1d6a <__fp_mintl+0x32>
    1d50:	90 51       	subi	r25, 0x10	; 16
    1d52:	86 2b       	or	r24, r22
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	2a f0       	brmi	.+10     	; 0x1d64 <__fp_mintl+0x2c>
    1d5a:	9a 95       	dec	r25
    1d5c:	66 0f       	add	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	88 1f       	adc	r24, r24
    1d62:	da f7       	brpl	.-10     	; 0x1d5a <__fp_mintl+0x22>
    1d64:	88 0f       	add	r24, r24
    1d66:	96 95       	lsr	r25
    1d68:	87 95       	ror	r24
    1d6a:	97 f9       	bld	r25, 7
    1d6c:	08 95       	ret

00001d6e <__fp_mpack>:
    1d6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d70:	31 f0       	breq	.+12     	; 0x1d7e <__fp_mpack_finite+0xc>

00001d72 <__fp_mpack_finite>:
    1d72:	91 50       	subi	r25, 0x01	; 1
    1d74:	20 f4       	brcc	.+8      	; 0x1d7e <__fp_mpack_finite+0xc>
    1d76:	87 95       	ror	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b7 95       	ror	r27
    1d7e:	88 0f       	add	r24, r24
    1d80:	91 1d       	adc	r25, r1
    1d82:	96 95       	lsr	r25
    1d84:	87 95       	ror	r24
    1d86:	97 f9       	bld	r25, 7
    1d88:	08 95       	ret

00001d8a <__udivmodsi4>:
    1d8a:	a1 e2       	ldi	r26, 0x21	; 33
    1d8c:	1a 2e       	mov	r1, r26
    1d8e:	aa 1b       	sub	r26, r26
    1d90:	bb 1b       	sub	r27, r27
    1d92:	fd 01       	movw	r30, r26
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <__udivmodsi4_ep>

00001d96 <__udivmodsi4_loop>:
    1d96:	aa 1f       	adc	r26, r26
    1d98:	bb 1f       	adc	r27, r27
    1d9a:	ee 1f       	adc	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	a2 17       	cp	r26, r18
    1da0:	b3 07       	cpc	r27, r19
    1da2:	e4 07       	cpc	r30, r20
    1da4:	f5 07       	cpc	r31, r21
    1da6:	20 f0       	brcs	.+8      	; 0x1db0 <__udivmodsi4_ep>
    1da8:	a2 1b       	sub	r26, r18
    1daa:	b3 0b       	sbc	r27, r19
    1dac:	e4 0b       	sbc	r30, r20
    1dae:	f5 0b       	sbc	r31, r21

00001db0 <__udivmodsi4_ep>:
    1db0:	66 1f       	adc	r22, r22
    1db2:	77 1f       	adc	r23, r23
    1db4:	88 1f       	adc	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	1a 94       	dec	r1
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <__udivmodsi4_loop>
    1dbc:	60 95       	com	r22
    1dbe:	70 95       	com	r23
    1dc0:	80 95       	com	r24
    1dc2:	90 95       	com	r25
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	bd 01       	movw	r22, r26
    1dca:	cf 01       	movw	r24, r30
    1dcc:	08 95       	ret

00001dce <__tablejump2__>:
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	05 90       	lpm	r0, Z+
    1dd4:	f4 91       	lpm	r31, Z
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	09 94       	ijmp

00001dda <__umulhisi3>:
    1dda:	a2 9f       	mul	r26, r18
    1ddc:	b0 01       	movw	r22, r0
    1dde:	b3 9f       	mul	r27, r19
    1de0:	c0 01       	movw	r24, r0
    1de2:	a3 9f       	mul	r26, r19
    1de4:	70 0d       	add	r23, r0
    1de6:	81 1d       	adc	r24, r1
    1de8:	11 24       	eor	r1, r1
    1dea:	91 1d       	adc	r25, r1
    1dec:	b2 9f       	mul	r27, r18
    1dee:	70 0d       	add	r23, r0
    1df0:	81 1d       	adc	r24, r1
    1df2:	11 24       	eor	r1, r1
    1df4:	91 1d       	adc	r25, r1
    1df6:	08 95       	ret

00001df8 <__muluhisi3>:
    1df8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__umulhisi3>
    1dfc:	a5 9f       	mul	r26, r21
    1dfe:	90 0d       	add	r25, r0
    1e00:	b4 9f       	mul	r27, r20
    1e02:	90 0d       	add	r25, r0
    1e04:	a4 9f       	mul	r26, r20
    1e06:	80 0d       	add	r24, r0
    1e08:	91 1d       	adc	r25, r1
    1e0a:	11 24       	eor	r1, r1
    1e0c:	08 95       	ret

00001e0e <__adddi3_s8>:
    1e0e:	00 24       	eor	r0, r0
    1e10:	a7 fd       	sbrc	r26, 7
    1e12:	00 94       	com	r0
    1e14:	2a 0f       	add	r18, r26
    1e16:	30 1d       	adc	r19, r0
    1e18:	40 1d       	adc	r20, r0
    1e1a:	50 1d       	adc	r21, r0
    1e1c:	60 1d       	adc	r22, r0
    1e1e:	70 1d       	adc	r23, r0
    1e20:	80 1d       	adc	r24, r0
    1e22:	90 1d       	adc	r25, r0
    1e24:	08 95       	ret

00001e26 <__cmpdi2_s8>:
    1e26:	00 24       	eor	r0, r0
    1e28:	a7 fd       	sbrc	r26, 7
    1e2a:	00 94       	com	r0
    1e2c:	2a 17       	cp	r18, r26
    1e2e:	30 05       	cpc	r19, r0
    1e30:	40 05       	cpc	r20, r0
    1e32:	50 05       	cpc	r21, r0
    1e34:	60 05       	cpc	r22, r0
    1e36:	70 05       	cpc	r23, r0
    1e38:	80 05       	cpc	r24, r0
    1e3a:	90 05       	cpc	r25, r0
    1e3c:	08 95       	ret

00001e3e <_exit>:
    1e3e:	f8 94       	cli

00001e40 <__stop_program>:
    1e40:	ff cf       	rjmp	.-2      	; 0x1e40 <__stop_program>
