
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000276  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e69  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062b  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000756  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067b  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_10>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
GPIO_Value Temp=RESET;


int main(void)
{
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 ef       	ldi	r22, 0xF0	; 240
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_Init>
	GPIO_Init ( _PORTB,(PIN2),InPut);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_Init>
	//timer_callback(Timer_OVF_ISR);
	//TCNT0 = 0xB2;
    /* Replace with your application code */
    while (1) 
    {
		GPIO_Read (&PINB, PIN2 ,&Temp);
  a6:	40 e6       	ldi	r20, 0x60	; 96
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	86 e3       	ldi	r24, 0x36	; 54
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 b9 00 	call	0x172	; 0x172 <GPIO_Read>
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e8       	ldi	r25, 0x82	; 130
  b8:	a3 e0       	ldi	r26, 0x03	; 3
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
		for(uinteg32_t i=0;i<230000;i++);/*40ms delay for denouncing */
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
  c4:	f0 cf       	rjmp	.-32     	; 0xa6 <main+0x14>

000000c6 <GPIO_Init>:
genu_ERROR_t GPIO_Toggle (volatile uinteg8_t *PORTX,PIN_t PINX)
{
	if(PORTX == NULL ) return DIO_ERROR_NOK;
	TOGGLE_BITS(*PORTX,PINX);
	return DIO_ERROR_OK;
}
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	e1 f4       	brne	.+56     	; 0x102 <GPIO_Init+0x3c>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	59 f0       	breq	.+22     	; 0xe4 <GPIO_Init+0x1e>
  ce:	28 f0       	brcs	.+10     	; 0xda <GPIO_Init+0x14>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	69 f0       	breq	.+26     	; 0xee <GPIO_Init+0x28>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	81 f0       	breq	.+32     	; 0xf8 <GPIO_Init+0x32>
  d8:	46 c0       	rjmp	.+140    	; 0x166 <GPIO_Init+0xa0>
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	68 2b       	or	r22, r24
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	68 2b       	or	r22, r24
  e8:	67 bb       	out	0x17, r22	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	68 2b       	or	r22, r24
  f2:	64 bb       	out	0x14, r22	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	68 2b       	or	r22, r24
  fc:	61 bb       	out	0x11, r22	; 17
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	41 11       	cpse	r20, r1
 104:	32 c0       	rjmp	.+100    	; 0x16a <GPIO_Init+0xa4>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	81 f0       	breq	.+32     	; 0x12a <GPIO_Init+0x64>
 10a:	28 f0       	brcs	.+10     	; 0x116 <GPIO_Init+0x50>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	b9 f0       	breq	.+46     	; 0x13e <GPIO_Init+0x78>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	f9 f0       	breq	.+62     	; 0x152 <GPIO_Init+0x8c>
 114:	2c c0       	rjmp	.+88     	; 0x16e <GPIO_Init+0xa8>
 116:	8a b3       	in	r24, 0x1a	; 26
 118:	96 2f       	mov	r25, r22
 11a:	90 95       	com	r25
 11c:	89 23       	and	r24, r25
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	68 2b       	or	r22, r24
 124:	6b bb       	out	0x1b, r22	; 27
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	96 2f       	mov	r25, r22
 12e:	90 95       	com	r25
 130:	89 23       	and	r24, r25
 132:	87 bb       	out	0x17, r24	; 23
 134:	88 b3       	in	r24, 0x18	; 24
 136:	68 2b       	or	r22, r24
 138:	68 bb       	out	0x18, r22	; 24
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	84 b3       	in	r24, 0x14	; 20
 140:	96 2f       	mov	r25, r22
 142:	90 95       	com	r25
 144:	89 23       	and	r24, r25
 146:	84 bb       	out	0x14, r24	; 20
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	68 2b       	or	r22, r24
 14c:	65 bb       	out	0x15, r22	; 21
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
 152:	81 b3       	in	r24, 0x11	; 17
 154:	96 2f       	mov	r25, r22
 156:	90 95       	com	r25
 158:	89 23       	and	r24, r25
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	68 2b       	or	r22, r24
 160:	62 bb       	out	0x12, r22	; 18
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	08 95       	ret
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret

00000172 <GPIO_Read>:
/*EX: GPIO_Read (&PORTA, PIN0 ,&enu_GPIOTemp);*/
genu_ERROR_t GPIO_Read (volatile uinteg8_t *PORTX,PIN_t PINX,GPIO_Value *GPIO_Value)
{
	if(PORTX == NULL || GPIO_Value == NULL) return DIO_ERROR_NOK;
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	79 f0       	breq	.+30     	; 0x194 <GPIO_Read+0x22>
 176:	41 15       	cp	r20, r1
 178:	51 05       	cpc	r21, r1
 17a:	71 f0       	breq	.+28     	; 0x198 <GPIO_Read+0x26>
	if(GET_BITS((*PORTX),PINX))
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	68 23       	and	r22, r24
 182:	21 f0       	breq	.+8      	; 0x18c <GPIO_Read+0x1a>
	{
		*GPIO_Value=SET;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	fa 01       	movw	r30, r20
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret
	}
	else 
	{
		*GPIO_Value=RESET;
 18c:	fa 01       	movw	r30, r20
 18e:	10 82       	st	Z, r1

	}
	return DIO_ERROR_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	08 95       	ret
	return DIO_ERROR_OK;
}
/*EX: GPIO_Read (&PORTA, PIN0 ,&enu_GPIOTemp);*/
genu_ERROR_t GPIO_Read (volatile uinteg8_t *PORTX,PIN_t PINX,GPIO_Value *GPIO_Value)
{
	if(PORTX == NULL || GPIO_Value == NULL) return DIO_ERROR_NOK;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret
 198:	80 e0       	ldi	r24, 0x00	; 0
	{
		*GPIO_Value=RESET;

	}
	return DIO_ERROR_OK;
}
 19a:	08 95       	ret

0000019c <__vector_11>:
	}
}


void __vector_11(void)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	gcallBack();
 1be:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <gcallBack>
 1c2:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <gcallBack+0x1>
 1c6:	09 95       	icall
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_10>:
void __vector_10(void)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
	
}
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
