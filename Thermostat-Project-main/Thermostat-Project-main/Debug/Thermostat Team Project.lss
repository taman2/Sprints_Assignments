
Thermostat Team Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001672  00001706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080008a  0080008a  00001730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027c3  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d33  00000000  00000000  00004207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017fd  00000000  00000000  00004f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00006738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9c  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b76  00000000  00000000  00007b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__vector_15>
      40:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e7       	ldi	r30, 0x72	; 114
      ea:	f6 e1       	ldi	r31, 0x16	; 22
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	aa 38       	cpi	r26, 0x8A	; 138
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	aa e8       	ldi	r26, 0x8A	; 138
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a8 39       	cpi	r26, 0x98	; 152
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
     10c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <keypad_init>:
#include "keypad.h"

void keypad_init(void)
{
	//Setting rows as outputs
	DIO_SetPinDirection(PORTC,2,OUTPUT);
     114:	41 e0       	ldi	r20, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,3,OUTPUT);
     11e:	41 e0       	ldi	r20, 0x01	; 1
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,4,OUTPUT);
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	//Setting rows initial values to high
	DIO_SetPinValue(PORTC,2,HIGH);
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,3,HIGH);
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,4,HIGH);
     146:	41 e0       	ldi	r20, 0x01	; 1
     148:	64 e0       	ldi	r22, 0x04	; 4
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	//Setting columns as inputs
	DIO_SetPinDirection(PORTC,5,INPUT);
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	65 e0       	ldi	r22, 0x05	; 5
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,6,INPUT);
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	66 e0       	ldi	r22, 0x06	; 6
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,7,INPUT);
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	67 e0       	ldi	r22, 0x07	; 7
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	//Setting columns initial values to high
	DIO_SetPinValue(PORTC,5,HIGH);
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	65 e0       	ldi	r22, 0x05	; 5
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,6,HIGH);
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	66 e0       	ldi	r22, 0x06	; 6
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,7,HIGH);
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	67 e0       	ldi	r22, 0x07	; 7
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     18c:	08 95       	ret

0000018e <keypad_scan>:
}

uint8_t keypad_scan(void)
{
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     194:	12 e0       	ldi	r17, 0x02	; 2
	DIO_SetPinValue(PORTC,7,HIGH);
}

uint8_t keypad_scan(void)
{
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
     196:	d1 e3       	ldi	r29, 0x31	; 49
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     198:	28 c0       	rjmp	.+80     	; 0x1ea <keypad_scan+0x5c>
	{
	    DIO_SetPinValue(PORTC,u8_row,LOW);
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	61 2f       	mov	r22, r17
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
		for (u8_column = FIRST_COLUMN ; u8_column <= COLUMNS ; u8_column++)
     1a4:	c5 e0       	ldi	r28, 0x05	; 5
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <keypad_scan+0x4c>
	    {
		    if(LOW == DIO_GetPinValue(PORTC,u8_column))
     1a8:	6c 2f       	mov	r22, r28
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 1f 06 	call	0xc3e	; 0xc3e <DIO_GetPinValue>
     1b0:	81 11       	cpse	r24, r1
     1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <keypad_scan+0x48>
		    {
				TIMER0_msdelay(40);
     1b4:	88 e2       	ldi	r24, 0x28	; 40
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
				while(LOW == DIO_GetPinValue(PORTC,u8_column));
     1bc:	6c 2f       	mov	r22, r28
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <DIO_GetPinValue>
     1c4:	88 23       	and	r24, r24
     1c6:	d1 f3       	breq	.-12     	; 0x1bc <keypad_scan+0x2e>
			    DIO_SetPinValue(PORTC,u8_row,HIGH);
     1c8:	41 e0       	ldi	r20, 0x01	; 1
     1ca:	61 2f       	mov	r22, r17
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
			    return u8_button;
     1d2:	8d 2f       	mov	r24, r29
     1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <keypad_scan+0x62>
		    }
		    else
		    {
			    u8_button++;
     1d6:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
	{
	    DIO_SetPinValue(PORTC,u8_row,LOW);
		for (u8_column = FIRST_COLUMN ; u8_column <= COLUMNS ; u8_column++)
     1d8:	cf 5f       	subi	r28, 0xFF	; 255
     1da:	c8 30       	cpi	r28, 0x08	; 8
     1dc:	28 f3       	brcs	.-54     	; 0x1a8 <keypad_scan+0x1a>
		    else
		    {
			    u8_button++;
		    }
	    }
		DIO_SetPinValue(PORTC,u8_row,HIGH);
     1de:	41 e0       	ldi	r20, 0x01	; 1
     1e0:	61 2f       	mov	r22, r17
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>

uint8_t keypad_scan(void)
{
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
     1ea:	15 30       	cpi	r17, 0x05	; 5
     1ec:	b0 f2       	brcs	.-84     	; 0x19a <keypad_scan+0xc>
			    u8_button++;
		    }
	    }
		DIO_SetPinValue(PORTC,u8_row,HIGH);
	}
	return NO_BUTTON_PRESSED;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	08 95       	ret

000001f8 <LCD_command>:
	LCD_command(0x0C);
	TIMER0_msdelay(10);                                    
}

void LCD_command(uint8_t u8_command)
{	
     1f8:	cf 93       	push	r28
     1fa:	c8 2f       	mov	r28, r24
	/**************************************************************/ 
	
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER =  (DATA_REGISTER & (0x0F)) |  (u8_command & (0xF0));
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	9c 2f       	mov	r25, r28
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,LOW);
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	63 e0       	ldi	r22, 0x03	; 3
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);
     21c:	8a e0       	ldi	r24, 0x0A	; 10
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	63 e0       	ldi	r22, 0x03	; 3
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);
     22e:	8a e0       	ldi	r24, 0x0A	; 10
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_command << 4);
     236:	2b b3       	in	r18, 0x1b	; 27
     238:	30 e1       	ldi	r19, 0x10	; 16
     23a:	c3 9f       	mul	r28, r19
     23c:	c0 01       	movw	r24, r0
     23e:	11 24       	eor	r1, r1
     240:	92 2f       	mov	r25, r18
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	89 2b       	or	r24, r25
     246:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);  /**********************************************************/
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	63 e0       	ldi	r22, 0x03	; 3
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Here we set EN pin to high when reading               */
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	63 e0       	ldi	r22, 0x03	; 3
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
}                                    /**********************************************************/
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <LCD_init>:

#include "LCD.h"

void LCD_init()
{
	TIMER0_msdelay(100);
     270:	84 e6       	ldi	r24, 0x64	; 100
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	/*******************************************************/
	/* Configuring LCD Control and Data pins to be outputs */
	/*******************************************************/
	DIO_SetPinDirection(PORTA,RS,OUTPUT);
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,RW,OUTPUT);
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,EN,OUTPUT);
     28c:	41 e0       	ldi	r20, 0x01	; 1
     28e:	63 e0       	ldi	r22, 0x03	; 3
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D4,OUTPUT);
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	64 e0       	ldi	r22, 0x04	; 4
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D5,OUTPUT);
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	65 e0       	ldi	r22, 0x05	; 5
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D6,OUTPUT);
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D7,OUTPUT);
     2b4:	41 e0       	ldi	r20, 0x01	; 1
     2b6:	67 e0       	ldi	r22, 0x07	; 7
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	//TIMER0_msdelay(100);
	
	/********************/
	/* Initial Commands */
	/********************/    
	LCD_command(0x3);
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x3);
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x3);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x2);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2ee:	8a e0       	ldi	r24, 0x0A	; 10
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x20);
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2fc:	8a e0       	ldi	r24, 0x0A	; 10
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x08);
     304:	88 e0       	ldi	r24, 0x08	; 8
     306:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x01);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x06);
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     326:	8a e0       	ldi	r24, 0x0A	; 10
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	LCD_command(0x0C);
     32e:	8c e0       	ldi	r24, 0x0C	; 12
     330:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);                                    
     334:	8a e0       	ldi	r24, 0x0A	; 10
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
     33c:	08 95       	ret

0000033e <LCD_data>:
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
}                                    /**********************************************************/

void LCD_data(uint8_t u8_data)
{	
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data & (0xF0));
     342:	8b b3       	in	r24, 0x1b	; 27
     344:	8f 70       	andi	r24, 0x0F	; 15
     346:	9c 2f       	mov	r25, r28
     348:	90 7f       	andi	r25, 0xF0	; 240
     34a:	89 2b       	or	r24, r25
     34c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,HIGH);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	63 e0       	ldi	r22, 0x03	; 3
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);
     362:	8a e0       	ldi	r24, 0x0A	; 10
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	63 e0       	ldi	r22, 0x03	; 3
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data << 4);
     37c:	2b b3       	in	r18, 0x1b	; 27
     37e:	30 e1       	ldi	r19, 0x10	; 16
     380:	c3 9f       	mul	r28, r19
     382:	c0 01       	movw	r24, r0
     384:	11 24       	eor	r1, r1
     386:	92 2f       	mov	r25, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	89 2b       	or	r24, r25
     38c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10);
     398:	8a e0       	ldi	r24, 0x0A	; 10
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	63 e0       	ldi	r22, 0x03	; 3
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	TIMER0_msdelay(10); 
     3aa:	8a e0       	ldi	r24, 0x0A	; 10
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
}
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <LCD_printString>:

void LCD_printString(uint8_t* stream)
{
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	8c 01       	movw	r16, r24
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <LCD_printString+0x12>
	{
		LCD_data(stream[u8_index]);
     3c2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_data>

void LCD_printString(uint8_t* stream)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	f8 01       	movw	r30, r16
     3ca:	ec 0f       	add	r30, r28
     3cc:	f1 1d       	adc	r31, r1
     3ce:	80 81       	ld	r24, Z
     3d0:	81 11       	cpse	r24, r1
     3d2:	f7 cf       	rjmp	.-18     	; 0x3c2 <LCD_printString+0xc>
	{
		LCD_data(stream[u8_index]);
	}
}
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <LCD_printDigits>:

void LCD_printDigits(uint32_t u32_number)
{	volatile uint8_t  u8_temp;
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	28 97       	sbiw	r28, 0x08	; 8
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t  u8_weight;
	volatile uint8_t  u8_data;
	volatile uint8_t  u8_digits;
	volatile float    f32_temp;
	
	u8_weight = log10(u32_number);
     3f8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__floatunsisf>
     3fc:	6b 01       	movw	r12, r22
     3fe:	7c 01       	movw	r14, r24
     400:	0e 94 01 09 	call	0x1202	; 0x1202 <log10>
     404:	0e 94 44 08 	call	0x1088	; 0x1088 <__fixunssfsi>
     408:	6a 83       	std	Y+2, r22	; 0x02
	u8_digits = (u8_weight + 1);
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	8c 83       	std	Y+4, r24	; 0x04
	u8_temp   = (u32_number / pow(10,u8_weight));
     410:	6a 81       	ldd	r22, Y+2	; 0x02
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__floatunsisf>
     41c:	9b 01       	movw	r18, r22
     41e:	ac 01       	movw	r20, r24
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	91 e4       	ldi	r25, 0x41	; 65
     428:	0e 94 c6 09 	call	0x138c	; 0x138c <pow>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
     438:	0e 94 44 08 	call	0x1088	; 0x1088 <__fixunssfsi>
     43c:	69 83       	std	Y+1, r22	; 0x01
	f32_temp  = ((u32_number*1.0) / pow(10,u8_weight));
     43e:	6a 81       	ldd	r22, Y+2	; 0x02
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__floatunsisf>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	91 e4       	ldi	r25, 0x41	; 65
     456:	0e 94 c6 09 	call	0x138c	; 0x138c <pow>
     45a:	9b 01       	movw	r18, r22
     45c:	ac 01       	movw	r20, r24
     45e:	c7 01       	movw	r24, r14
     460:	b6 01       	movw	r22, r12
     462:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
     466:	6d 83       	std	Y+5, r22	; 0x05
     468:	7e 83       	std	Y+6, r23	; 0x06
     46a:	8f 83       	std	Y+7, r24	; 0x07
     46c:	98 87       	std	Y+8, r25	; 0x08
	do
	{
		u8_data  = (u8_temp | (3 << 4));
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	80 63       	ori	r24, 0x30	; 48
     472:	8b 83       	std	Y+3, r24	; 0x03
		LCD_data(u8_data);
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_data>
		u8_digits--;
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	81 50       	subi	r24, 0x01	; 1
     47e:	8c 83       	std	Y+4, r24	; 0x04
		f32_temp = f32_temp - u8_temp;
     480:	cd 80       	ldd	r12, Y+5	; 0x05
     482:	de 80       	ldd	r13, Y+6	; 0x06
     484:	ef 80       	ldd	r14, Y+7	; 0x07
     486:	f8 84       	ldd	r15, Y+8	; 0x08
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 75 08 	call	0x10ea	; 0x10ea <__floatsisf>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	c7 01       	movw	r24, r14
     49a:	b6 01       	movw	r22, r12
     49c:	0e 94 65 07 	call	0xeca	; 0xeca <__subsf3>
     4a0:	6d 83       	std	Y+5, r22	; 0x05
     4a2:	7e 83       	std	Y+6, r23	; 0x06
     4a4:	8f 83       	std	Y+7, r24	; 0x07
     4a6:	98 87       	std	Y+8, r25	; 0x08
		u8_temp  = (f32_temp * 10);
     4a8:	6d 81       	ldd	r22, Y+5	; 0x05
     4aa:	7e 81       	ldd	r23, Y+6	; 0x06
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	51 e4       	ldi	r21, 0x41	; 65
     4b8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     4bc:	0e 94 44 08 	call	0x1088	; 0x1088 <__fixunssfsi>
     4c0:	69 83       	std	Y+1, r22	; 0x01
		f32_temp = (f32_temp *(10*1.0));
     4c2:	6d 81       	ldd	r22, Y+5	; 0x05
     4c4:	7e 81       	ldd	r23, Y+6	; 0x06
     4c6:	8f 81       	ldd	r24, Y+7	; 0x07
     4c8:	98 85       	ldd	r25, Y+8	; 0x08
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e2       	ldi	r20, 0x20	; 32
     4d0:	51 e4       	ldi	r21, 0x41	; 65
     4d2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     4d6:	6d 83       	std	Y+5, r22	; 0x05
     4d8:	7e 83       	std	Y+6, r23	; 0x06
     4da:	8f 83       	std	Y+7, r24	; 0x07
     4dc:	98 87       	std	Y+8, r25	; 0x08
	} while (u8_digits);
     4de:	8c 81       	ldd	r24, Y+4	; 0x04
     4e0:	81 11       	cpse	r24, r1
     4e2:	c5 cf       	rjmp	.-118    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
}
     4e4:	28 96       	adiw	r28, 0x08	; 8
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <LCD_cursorMove>:

void LCD_cursorMove(uint8_t u8_direction){
	if(LEFT == u8_direction){
     4fe:	80 31       	cpi	r24, 0x10	; 16
     500:	39 f4       	brne	.+14     	; 0x510 <LCD_cursorMove+0x12>
		LCD_command(LEFT);
     502:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
		TIMER0_msdelay(5);
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
     50e:	08 95       	ret
	}
	else if(RIGHT == u8_direction){
     510:	84 31       	cpi	r24, 0x14	; 20
     512:	31 f4       	brne	.+12     	; 0x520 <LCD_cursorMove+0x22>
		LCD_command(RIGHT);
     514:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
		TIMER0_msdelay(5);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
     520:	08 95       	ret

00000522 <Motor_Init>:
{
	Motor_setDirection(MOTOR_ID_01,u8_Motor01Direction);
	Motor_setDirection(MOTOR_ID_02,u8_Motor02Direction);
	return MOTOR_ERROR_OK;

}
     522:	84 31       	cpi	r24, 0x14	; 20
     524:	19 f0       	breq	.+6      	; 0x52c <Motor_Init+0xa>
     526:	85 31       	cpi	r24, 0x15	; 21
     528:	09 f1       	breq	.+66     	; 0x56c <Motor_Init+0x4a>
     52a:	36 c0       	rjmp	.+108    	; 0x598 <Motor_Init+0x76>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	63 e0       	ldi	r22, 0x03	; 3
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
     540:	41 e0       	ldi	r20, 0x01	; 1
     542:	64 e0       	ldi	r22, 0x04	; 4
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	64 e0       	ldi	r22, 0x04	; 4
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	08 95       	ret
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	67 e0       	ldi	r22, 0x07	; 7
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	66 e0       	ldi	r22, 0x06	; 6
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	08 95       	ret
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	08 95       	ret

0000059c <Motor_setDirection>:
     59c:	84 31       	cpi	r24, 0x14	; 20
     59e:	19 f0       	breq	.+6      	; 0x5a6 <Motor_setDirection+0xa>
     5a0:	85 31       	cpi	r24, 0x15	; 21
     5a2:	d9 f0       	breq	.+54     	; 0x5da <Motor_setDirection+0x3e>
     5a4:	34 c0       	rjmp	.+104    	; 0x60e <Motor_setDirection+0x72>
     5a6:	67 31       	cpi	r22, 0x17	; 23
     5a8:	61 f4       	brne	.+24     	; 0x5c2 <Motor_setDirection+0x26>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	08 95       	ret
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	62 e0       	ldi	r22, 0x02	; 2
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	63 e0       	ldi	r22, 0x03	; 3
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	08 95       	ret
     5da:	67 31       	cpi	r22, 0x17	; 23
     5dc:	61 f4       	brne	.+24     	; 0x5f6 <Motor_setDirection+0x5a>
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	66 e0       	ldi	r22, 0x06	; 6
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	67 e0       	ldi	r22, 0x07	; 7
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	08 95       	ret
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	66 e0       	ldi	r22, 0x06	; 6
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	67 e0       	ldi	r22, 0x07	; 7
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	08 95       	ret

00000612 <motorOn>:
uint8_t motorOn(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     612:	84 31       	cpi	r24, 0x14	; 20
     614:	19 f0       	breq	.+6      	; 0x61c <motorOn+0xa>
     616:	85 31       	cpi	r24, 0x15	; 21
     618:	51 f0       	breq	.+20     	; 0x62e <motorOn+0x1c>
     61a:	0d c0       	rjmp	.+26     	; 0x636 <motorOn+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     61c:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, HIGH);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     62e:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			return MOTOR_ERROR_OK;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     636:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     638:	08 95       	ret

0000063a <motorOff>:
uint8_t motorOff(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     63a:	84 31       	cpi	r24, 0x14	; 20
     63c:	19 f0       	breq	.+6      	; 0x644 <motorOff+0xa>
     63e:	85 31       	cpi	r24, 0x15	; 21
     640:	51 f0       	breq	.+20     	; 0x656 <motorOff+0x1c>
     642:	0d c0       	rjmp	.+26     	; 0x65e <motorOff+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     644:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, LOW);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     656:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			return MOTOR_ERROR_OK;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     65e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
     660:	08 95       	ret

00000662 <LM35_voidInit>:



void LM35_voidInit(void) 
{
	DIO_SetPinDirection(PORTA,PIN0,INPUT); 
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTA,PIN0,LOW); 
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinValue>
	ADC_voidInit(); 
     676:	0e 94 8c 04 	call	0x918	; 0x918 <ADC_voidInit>
	ADC_voidStartConversion();
     67a:	0e 94 bd 04 	call	0x97a	; 0x97a <ADC_voidStartConversion>
     67e:	08 95       	ret

00000680 <LM35_u8GetTempInC>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <LM35_u8GetTempInC+0xa>
     68a:	1f 92       	push	r1
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     690:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16_AdcResult = u8_LM35_INTIALIZE_VAR ;
     692:	1b 82       	std	Y+3, r1	; 0x03
     694:	1a 82       	std	Y+2, r1	; 0x02
	if(pu8_ReturnAvgTemp!=NULL_POINTER)
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	09 f4       	brne	.+2      	; 0x69c <LM35_u8GetTempInC+0x1c>
     69a:	56 c0       	rjmp	.+172    	; 0x748 <LM35_u8GetTempInC+0xc8>
     69c:	8c 01       	movw	r16, r24
	{
		ADC_u8GetFlagInt(&u8_AdcIntFlag); 
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_u8GetFlagInt>
		if(u8_AdcIntFlag==u8_ADC_FLAG_RISE )
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	a1 f4       	brne	.+40     	; 0x6d4 <LM35_u8GetTempInC+0x54>
		{
			ADC_u8GetResult(&u16_AdcResult) ;
     6ac:	ce 01       	movw	r24, r28
     6ae:	02 96       	adiw	r24, 0x02	; 2
     6b0:	0e 94 cf 04 	call	0x99e	; 0x99e <ADC_u8GetResult>
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			else if(u8_ADC_VREF== u8_ADC_2560mV_INTERNAL_REF)
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
     6b4:	2a 81       	ldd	r18, Y+2	; 0x02
     6b6:	3b 81       	ldd	r19, Y+3	; 0x03
     6b8:	a4 ec       	ldi	r26, 0xC4	; 196
     6ba:	b9 e0       	ldi	r27, 0x09	; 9
     6bc:	0e 94 1d 0b 	call	0x163a	; 0x163a <__umulhisi3>
     6c0:	20 e1       	ldi	r18, 0x10	; 16
     6c2:	37 e2       	ldi	r19, 0x27	; 39
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__udivmodsi4>
     6cc:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <su8_NewTemp3.1638>
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
     6d0:	8d e3       	ldi	r24, 0x3D	; 61
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <LM35_u8GetTempInC+0x56>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     6d4:	8c e3       	ldi	r24, 0x3C	; 60
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
		}
		if(su8_Temp2==u8_LM35_INTIALIZE_VAR)
     6d6:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <su8_Temp2.1637>
     6da:	91 11       	cpse	r25, r1
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <LM35_u8GetTempInC+0x66>
		{
			su8_Temp2 = su8_NewTemp3 ; 
     6de:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <su8_NewTemp3.1638>
     6e2:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <su8_Temp2.1637>
		}
		if(su8_Temp1==u8_LM35_INTIALIZE_VAR)
     6e6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <su8_Temp1.1636>
     6ea:	91 11       	cpse	r25, r1
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <LM35_u8GetTempInC+0x76>
		{
			su8_Temp1 = su8_Temp2 ; 
     6ee:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <su8_Temp2.1637>
     6f2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <su8_Temp1.1636>
		}
		if(su8_Temp4==u8_LM35_INTIALIZE_VAR)
     6f6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <__data_end>
     6fa:	91 11       	cpse	r25, r1
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <LM35_u8GetTempInC+0x86>
		{
			su8_Temp4 = su8_Temp1;
     6fe:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <su8_Temp1.1636>
     702:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <__data_end>
		}
		*pu8_ReturnAvgTemp = (su8_Temp1 + su8_Temp2 + su8_Temp4 + su8_NewTemp3) / u8_LM35_NUM_OF_READINGS ; 
     706:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <su8_Temp1.1636>
     70a:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <su8_Temp2.1637>
     70e:	24 2f       	mov	r18, r20
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	25 0f       	add	r18, r21
     714:	31 1d       	adc	r19, r1
     716:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <__data_end>
     71a:	29 0f       	add	r18, r25
     71c:	31 1d       	adc	r19, r1
     71e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <su8_NewTemp3.1638>
     722:	29 0f       	add	r18, r25
     724:	31 1d       	adc	r19, r1
     726:	33 23       	and	r19, r19
     728:	14 f4       	brge	.+4      	; 0x72e <LM35_u8GetTempInC+0xae>
     72a:	2d 5f       	subi	r18, 0xFD	; 253
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	35 95       	asr	r19
     730:	27 95       	ror	r18
     732:	35 95       	asr	r19
     734:	27 95       	ror	r18
     736:	f8 01       	movw	r30, r16
     738:	20 83       	st	Z, r18
		su8_Temp4 = su8_Temp1 ; 
     73a:	50 93 8a 00 	sts	0x008A, r21	; 0x80008a <__data_end>
		su8_Temp1 = su8_Temp2 ;
     73e:	40 93 8b 00 	sts	0x008B, r20	; 0x80008b <su8_Temp1.1636>
		su8_Temp2 = su8_NewTemp3; 
     742:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <su8_Temp2.1637>
     746:	01 c0       	rjmp	.+2      	; 0x74a <LM35_u8GetTempInC+0xca>
	}
	else 
	{
		u8_ErrorState = u8_LM35_NOK ;
     748:	8e e3       	ldi	r24, 0x3E	; 62
	}
	return u8_ErrorState ; 
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <main>:
}genu_ProgState_t;

  extern struct gstr_USART_Config_t gstr_USART_Config;

int main(void)
{	
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	1f 92       	push	r1
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_SensTemperature = INITIAL_VAL;
     764:	19 82       	std	Y+1, r1	; 0x01

/**********************************************************************/
/*                       Program Initializations                      */
/**********************************************************************/
	                                                                   /***************************************************/
	LM35_voidInit();                                                   /* 1 - Initialize LM35 Temperature Sensor          */ 
     766:	0e 94 31 03 	call	0x662	; 0x662 <LM35_voidInit>
	LCD_init();                                                        /* 2 - Initialize The LCD                          */
     76a:	0e 94 38 01 	call	0x270	; 0x270 <LCD_init>
	keypad_init();	                                                   /* 3 - Initialize The Keypad                       */
     76e:	0e 94 8a 00 	call	0x114	; 0x114 <keypad_init>
	Motor_Init (MOTOR_ID_01);                                          /* 4 - Initialize The Fan Motor                    */
     772:	84 e1       	ldi	r24, 0x14	; 20
     774:	0e 94 91 02 	call	0x522	; 0x522 <Motor_Init>
	DIO_SetPinDirection(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN,INPUT);   /* 5 - Enable PB1 to be used in case switching     */
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	62 e0       	ldi	r22, 0x02	; 2
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_SetPinDirection>
	LM35_u8GetTempInC(&u8_SensTemperature);                            /* 6 - Get Current Temperature                     */
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	0e 94 40 03 	call	0x680	; 0x680 <LM35_u8GetTempInC>
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
	uint8_t u8_firstTime       = TRUE;
	genu_ProgState_t genu_ProgState = SET_MAX_TEMP;                    /* Initial State; Setting Maximum Temperature */
     78a:	ff 24       	eor	r15, r15
     78c:	f3 94       	inc	r15
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
	uint8_t u8_firstTime       = TRUE;
     78e:	dd 24       	eor	r13, r13
     790:	d3 94       	inc	r13
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
     792:	10 e0       	ldi	r17, 0x00	; 0
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
     794:	00 e0       	ldi	r16, 0x00	; 0

int main(void)
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
     796:	c1 2c       	mov	r12, r1
  extern struct gstr_USART_Config_t gstr_USART_Config;

int main(void)
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
     798:	e1 2c       	mov	r14, r1
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <main+0x48>
					motorOff(MOTOR_ID_01,STOP);
				}
				
				if(u8_userInputSwitch == SWITCH_BUTTON_PRESSED)
				{
					genu_ProgState=SET_MAX_TEMP;
     79c:	ff 24       	eor	r15, r15
     79e:	f3 94       	inc	r15
					u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     7a0:	10 e0       	ldi	r17, 0x00	; 0
/*                     End of Initializations                         */
/**********************************************************************/

	while (1) 
    {
		if(u8_firstTime == FALSE)
     7a2:	d1 10       	cpse	r13, r1
     7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <main+0x6a>
		{
			u8_userInputSwitch = DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN);
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <DIO_GetPinValue>
     7ae:	18 2f       	mov	r17, r24
			TIMER0_msdelay(DEBOUNCING_DELAY);
     7b0:	82 e3       	ldi	r24, 0x32	; 50
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
			while(DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN)==SWITCH_BUTTON_PRESSED);	
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <DIO_GetPinValue>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	d1 f3       	breq	.-12     	; 0x7b8 <main+0x5e>
		}
		
		switch(genu_ProgState)
     7c4:	ff 20       	and	r15, r15
     7c6:	21 f0       	breq	.+8      	; 0x7d0 <main+0x76>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	f8 16       	cp	r15, r24
     7cc:	11 f1       	breq	.+68     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7ce:	e9 cf       	rjmp	.-46     	; 0x7a2 <main+0x48>
		{	
			case SHOW_CURRENT_TEMP:
				
				LM35_u8GetTempInC(&u8_SensTemperature);
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	0e 94 40 03 	call	0x680	; 0x680 <LM35_u8GetTempInC>
				LCD_printDigits(u8_SensTemperature);
     7d8:	69 81       	ldd	r22, Y+1	; 0x01
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
				LCD_cursorMove(LEFT);
     7e4:	80 e1       	ldi	r24, 0x10	; 16
     7e6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_cursorMove>
				LCD_cursorMove(LEFT);
     7ea:	80 e1       	ldi	r24, 0x10	; 16
     7ec:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_cursorMove>
				
				if(u8_SensTemperature >= u8_highSwitchTemp )
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	8e 15       	cp	r24, r14
     7f4:	28 f0       	brcs	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
				{
					/* Turn On Fan */
					motorOn(MOTOR_ID_01,FORWARD);
     7f6:	67 e1       	ldi	r22, 0x17	; 23
     7f8:	84 e1       	ldi	r24, 0x14	; 20
     7fa:	0e 94 09 03 	call	0x612	; 0x612 <motorOn>
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>

				}
				else if(u8_SensTemperature <= u8_lowSwitchTemp)
     800:	c8 16       	cp	r12, r24
     802:	20 f0       	brcs	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				{
					/* Turn Off Fan */
					motorOff(MOTOR_ID_01,STOP);
     804:	69 e1       	ldi	r22, 0x19	; 25
     806:	84 e1       	ldi	r24, 0x14	; 20
     808:	0e 94 1d 03 	call	0x63a	; 0x63a <motorOff>
				}
				
				if(u8_userInputSwitch == SWITCH_BUTTON_PRESSED)
     80c:	11 30       	cpi	r17, 0x01	; 1
     80e:	49 f6       	brne	.-110    	; 0x7a2 <main+0x48>
     810:	c5 cf       	rjmp	.-118    	; 0x79c <main+0x42>
				}
				break;
				
			case SET_MAX_TEMP:
			
				LCD_command(DISPLAY_CLEAR);
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
				LCD_printString("SET MAX TEMP:");
     818:	80 e6       	ldi	r24, 0x60	; 96
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
				
				/* Get Input of Max Temperature From User */
				
				while(genu_ProgState == SET_MAX_TEMP )
     820:	76 c0       	rjmp	.+236    	; 0x90e <__stack+0xaf>
				{
				   	u8_progUserInput=keypad_scan()- ASCII_CONV_FACTOR;
     822:	0e 94 c7 00 	call	0x18e	; 0x18e <keypad_scan>
     826:	10 ed       	ldi	r17, 0xD0	; 208
     828:	18 0f       	add	r17, r24
					
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
     82a:	81 53       	subi	r24, 0x31	; 49
     82c:	89 30       	cpi	r24, 0x09	; 9
     82e:	60 f4       	brcc	.+24     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     830:	01 11       	cpse	r16, r1
     832:	0a c0       	rjmp	.+20     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
					{
						u8_firstTime      = FALSE;
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
     834:	61 2f       	mov	r22, r17
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
						u8_highSwitchTemp=u8_progUserInput;
						u8_count++;						
     840:	0f 5f       	subi	r16, 0xFF	; 255
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
					{
						u8_firstTime      = FALSE;
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
						u8_highSwitchTemp=u8_progUserInput;
     842:	e1 2e       	mov	r14, r17
				{
				   	u8_progUserInput=keypad_scan()- ASCII_CONV_FACTOR;
					
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
					{
						u8_firstTime      = FALSE;
     844:	d1 2c       	mov	r13, r1
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
						u8_highSwitchTemp=u8_progUserInput;
						u8_count++;						
     846:	2a c0       	rjmp	.+84     	; 0x89c <__stack+0x3d>
					}
					else if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == ONE_DIGIT)
     848:	89 30       	cpi	r24, 0x09	; 9
     84a:	80 f4       	brcc	.+32     	; 0x86c <__stack+0xd>
     84c:	01 30       	cpi	r16, 0x01	; 1
     84e:	71 f4       	brne	.+28     	; 0x86c <__stack+0xd>
					{
						LCD_printDigits((uint32_t)u8_progUserInput);
     850:	61 2f       	mov	r22, r17
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
						u8_highSwitchTemp  = u8_highSwitchTemp * WEIGHT;
     85c:	ee 0c       	add	r14, r14
     85e:	8e 2d       	mov	r24, r14
     860:	88 0f       	add	r24, r24
     862:	88 0f       	add	r24, r24
     864:	e8 0e       	add	r14, r24
						u8_highSwitchTemp += u8_progUserInput;
     866:	e1 0e       	add	r14, r17
						u8_count++;
     868:	0f 5f       	subi	r16, 0xFF	; 255
     86a:	18 c0       	rjmp	.+48     	; 0x89c <__stack+0x3d>
					}
					else if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == TWO_DIGITS)
     86c:	89 30       	cpi	r24, 0x09	; 9
     86e:	b0 f4       	brcc	.+44     	; 0x89c <__stack+0x3d>
     870:	02 30       	cpi	r16, 0x02	; 2
     872:	a1 f4       	brne	.+40     	; 0x89c <__stack+0x3d>
					{
						
						LCD_command(DISPLAY_CLEAR);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
						LCD_printString("WRONG INPUT!!");
     87a:	8e e6       	ldi	r24, 0x6E	; 110
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
						TIMER0_msdelay(ONE_SECOND);
     882:	88 ee       	ldi	r24, 0xE8	; 232
     884:	93 e0       	ldi	r25, 0x03	; 3
     886:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
						LCD_command(DISPLAY_CLEAR);
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
						LCD_printString("SET MAX TEMP:");
     890:	80 e6       	ldi	r24, 0x60	; 96
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
						u8_count=INITIAL_VAL;
     898:	00 e0       	ldi	r16, 0x00	; 0
						u8_highSwitchTemp=INITIAL_VAL;
     89a:	e1 2c       	mov	r14, r1
					}
					u8_userInputSwitch=DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN);
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <DIO_GetPinValue>
     8a4:	18 2f       	mov	r17, r24
					TIMER0_msdelay(DEBOUNCING_DELAY);
     8a6:	82 e3       	ldi	r24, 0x32	; 50
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
					
					if((u8_userInputSwitch == SWITCH_BUTTON_PRESSED) && (u8_firstTime == FALSE))
     8ae:	11 30       	cpi	r17, 0x01	; 1
     8b0:	71 f5       	brne	.+92     	; 0x90e <__stack+0xaf>
     8b2:	d1 10       	cpse	r13, r1
     8b4:	2c c0       	rjmp	.+88     	; 0x90e <__stack+0xaf>
					{	
						if(u8_highSwitchTemp < MAX_ALLOWED_TEMP)
     8b6:	87 e2       	ldi	r24, 0x27	; 39
     8b8:	8e 15       	cp	r24, r14
     8ba:	a0 f0       	brcs	.+40     	; 0x8e4 <__stack+0x85>
						{
							motorOff(MOTOR_ID_01,STOP);
     8bc:	69 e1       	ldi	r22, 0x19	; 25
     8be:	84 e1       	ldi	r24, 0x14	; 20
     8c0:	0e 94 1d 03 	call	0x63a	; 0x63a <motorOff>
							u8_lowSwitchTemp = u8_highSwitchTemp -TOLERANCE;
     8c4:	0f 2e       	mov	r0, r31
     8c6:	fd ef       	ldi	r31, 0xFD	; 253
     8c8:	cf 2e       	mov	r12, r31
     8ca:	f0 2d       	mov	r31, r0
     8cc:	ce 0c       	add	r12, r14
							LCD_command(DISPLAY_CLEAR);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("Temperature:");
     8d4:	8c e7       	ldi	r24, 0x7C	; 124
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							genu_ProgState=SHOW_CURRENT_TEMP;
     8dc:	f1 2c       	mov	r15, r1
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("SET MAX TEMP:");
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
						}
						u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	15 c0       	rjmp	.+42     	; 0x90e <__stack+0xaf>
							genu_ProgState=SHOW_CURRENT_TEMP;
							u8_count = INITIAL_VAL;
						}
						else
						{
							LCD_command(DISPLAY_CLEAR);
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("WRONG INPUT!!");
     8ea:	8e e6       	ldi	r24, 0x6E	; 110
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							TIMER0_msdelay(1000);
     8f2:	88 ee       	ldi	r24, 0xE8	; 232
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TIMER0_msdelay>
							LCD_command(DISPLAY_CLEAR);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("SET MAX TEMP:");
     900:	80 e6       	ldi	r24, 0x60	; 96
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
						}
						u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     908:	10 e0       	ldi	r17, 0x00	; 0
						{
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("WRONG INPUT!!");
							TIMER0_msdelay(1000);
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("SET MAX TEMP:");
     90a:	00 e0       	ldi	r16, 0x00	; 0
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
     90c:	e1 2c       	mov	r14, r1
				LCD_command(DISPLAY_CLEAR);
				LCD_printString("SET MAX TEMP:");
				
				/* Get Input of Max Temperature From User */
				
				while(genu_ProgState == SET_MAX_TEMP )
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	f8 16       	cp	r15, r24
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0xb7>
     914:	86 cf       	rjmp	.-244    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     916:	45 cf       	rjmp	.-374    	; 0x7a2 <main+0x48>

00000918 <ADC_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidSetCallBack(void(*ISRFuncToSet)(void)) 
{
	ADCSetCallBackISR = ISRFuncToSet ;
     918:	87 b1       	in	r24, 0x07	; 7
     91a:	80 68       	ori	r24, 0x80	; 128
     91c:	87 b9       	out	0x07, r24	; 7
     91e:	87 b1       	in	r24, 0x07	; 7
     920:	80 64       	ori	r24, 0x40	; 64
     922:	87 b9       	out	0x07, r24	; 7
     924:	87 b1       	in	r24, 0x07	; 7
     926:	8f 7e       	andi	r24, 0xEF	; 239
     928:	87 b9       	out	0x07, r24	; 7
     92a:	87 b1       	in	r24, 0x07	; 7
     92c:	87 7f       	andi	r24, 0xF7	; 247
     92e:	87 b9       	out	0x07, r24	; 7
     930:	87 b1       	in	r24, 0x07	; 7
     932:	8b 7f       	andi	r24, 0xFB	; 251
     934:	87 b9       	out	0x07, r24	; 7
     936:	87 b1       	in	r24, 0x07	; 7
     938:	8d 7f       	andi	r24, 0xFD	; 253
     93a:	87 b9       	out	0x07, r24	; 7
     93c:	87 b1       	in	r24, 0x07	; 7
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	87 b9       	out	0x07, r24	; 7
     942:	86 b1       	in	r24, 0x06	; 6
     944:	80 68       	ori	r24, 0x80	; 128
     946:	86 b9       	out	0x06, r24	; 6
     948:	86 b1       	in	r24, 0x06	; 6
     94a:	87 7f       	andi	r24, 0xF7	; 247
     94c:	86 b9       	out	0x06, r24	; 6
     94e:	86 b1       	in	r24, 0x06	; 6
     950:	80 62       	ori	r24, 0x20	; 32
     952:	86 b9       	out	0x06, r24	; 6
     954:	80 b7       	in	r24, 0x30	; 48
     956:	8f 77       	andi	r24, 0x7F	; 127
     958:	80 bf       	out	0x30, r24	; 48
     95a:	80 b7       	in	r24, 0x30	; 48
     95c:	8f 7b       	andi	r24, 0xBF	; 191
     95e:	80 bf       	out	0x30, r24	; 48
     960:	80 b7       	in	r24, 0x30	; 48
     962:	8f 7d       	andi	r24, 0xDF	; 223
     964:	80 bf       	out	0x30, r24	; 48
     966:	86 b1       	in	r24, 0x06	; 6
     968:	84 60       	ori	r24, 0x04	; 4
     96a:	86 b9       	out	0x06, r24	; 6
     96c:	86 b1       	in	r24, 0x06	; 6
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	86 b9       	out	0x06, r24	; 6
     972:	86 b1       	in	r24, 0x06	; 6
     974:	81 60       	ori	r24, 0x01	; 1
     976:	86 b9       	out	0x06, r24	; 6
     978:	08 95       	ret

0000097a <ADC_voidStartConversion>:
     97a:	86 b1       	in	r24, 0x06	; 6
     97c:	80 68       	ori	r24, 0x80	; 128
     97e:	86 b9       	out	0x06, r24	; 6
     980:	86 b1       	in	r24, 0x06	; 6
     982:	80 64       	ori	r24, 0x40	; 64
     984:	86 b9       	out	0x06, r24	; 6
     986:	08 95       	ret

00000988 <ADC_u8GetFlagInt>:
     988:	fc 01       	movw	r30, r24
     98a:	89 2b       	or	r24, r25
     98c:	31 f0       	breq	.+12     	; 0x99a <ADC_u8GetFlagInt+0x12>
     98e:	96 b1       	in	r25, 0x06	; 6
     990:	92 95       	swap	r25
     992:	91 70       	andi	r25, 0x01	; 1
     994:	90 83       	st	Z, r25
     996:	8e e2       	ldi	r24, 0x2E	; 46
     998:	08 95       	ret
     99a:	8d e2       	ldi	r24, 0x2D	; 45
     99c:	08 95       	ret

0000099e <ADC_u8GetResult>:
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	79 f0       	breq	.+30     	; 0x9c0 <ADC_u8GetResult+0x22>
     9a2:	24 b1       	in	r18, 0x04	; 4
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	31 83       	std	Z+1, r19	; 0x01
     9aa:	20 83       	st	Z, r18
     9ac:	45 b1       	in	r20, 0x05	; 5
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	54 2f       	mov	r21, r20
     9b2:	44 27       	eor	r20, r20
     9b4:	24 2b       	or	r18, r20
     9b6:	35 2b       	or	r19, r21
     9b8:	31 83       	std	Z+1, r19	; 0x01
     9ba:	20 83       	st	Z, r18
     9bc:	8e e2       	ldi	r24, 0x2E	; 46
     9be:	08 95       	ret
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	08 95       	ret

000009c4 <__vector_16>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_16 (void)      __attribute__((signal));
void __vector_16 (void)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	if(ADCSetCallBackISR!=NULL_POINTER)
     9e6:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <ADCSetCallBackISR>
     9ea:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <ADCSetCallBackISR+0x1>
     9ee:	30 97       	sbiw	r30, 0x00	; 0
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__vector_16+0x30>
	{
		ADCSetCallBackISR() ;
     9f2:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <DIO_SetPinDirection>:
		case PORTD: PORTD_REG=VALUE;break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
			break;
	}//switch
	return au8_errorstate;
}//function
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	31 f1       	breq	.+76     	; 0xa66 <DIO_SetPinDirection+0x50>
     a1a:	38 f0       	brcs	.+14     	; 0xa2a <DIO_SetPinDirection+0x14>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	09 f4       	brne	.+2      	; 0xa22 <DIO_SetPinDirection+0xc>
     a20:	40 c0       	rjmp	.+128    	; 0xaa2 <DIO_SetPinDirection+0x8c>
     a22:	83 30       	cpi	r24, 0x03	; 3
     a24:	09 f4       	brne	.+2      	; 0xa28 <DIO_SetPinDirection+0x12>
     a26:	5a c0       	rjmp	.+180    	; 0xadc <DIO_SetPinDirection+0xc6>
     a28:	76 c0       	rjmp	.+236    	; 0xb16 <DIO_SetPinDirection+0x100>
     a2a:	41 11       	cpse	r20, r1
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <DIO_SetPinDirection+0x32>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_SetPinDirection+0x22>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	6a 95       	dec	r22
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_SetPinDirection+0x1e>
     a3c:	80 95       	com	r24
     a3e:	9a b3       	in	r25, 0x1a	; 26
     a40:	89 23       	and	r24, r25
     a42:	8a bb       	out	0x1a, r24	; 26
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	08 95       	ret
     a48:	41 30       	cpi	r20, 0x01	; 1
     a4a:	09 f0       	breq	.+2      	; 0xa4e <DIO_SetPinDirection+0x38>
     a4c:	66 c0       	rjmp	.+204    	; 0xb1a <DIO_SetPinDirection+0x104>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_SetPinDirection+0x42>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	6a 95       	dec	r22
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <DIO_SetPinDirection+0x3e>
     a5c:	9a b3       	in	r25, 0x1a	; 26
     a5e:	89 2b       	or	r24, r25
     a60:	8a bb       	out	0x1a, r24	; 26
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	08 95       	ret
     a66:	41 11       	cpse	r20, r1
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <DIO_SetPinDirection+0x6e>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_SetPinDirection+0x5e>
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	6a 95       	dec	r22
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_SetPinDirection+0x5a>
     a78:	80 95       	com	r24
     a7a:	97 b3       	in	r25, 0x17	; 23
     a7c:	89 23       	and	r24, r25
     a7e:	87 bb       	out	0x17, r24	; 23
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	08 95       	ret
     a84:	41 30       	cpi	r20, 0x01	; 1
     a86:	09 f0       	breq	.+2      	; 0xa8a <DIO_SetPinDirection+0x74>
     a88:	4a c0       	rjmp	.+148    	; 0xb1e <DIO_SetPinDirection+0x108>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_SetPinDirection+0x7e>
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_SetPinDirection+0x7a>
     a98:	97 b3       	in	r25, 0x17	; 23
     a9a:	89 2b       	or	r24, r25
     a9c:	87 bb       	out	0x17, r24	; 23
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	08 95       	ret
     aa2:	41 11       	cpse	r20, r1
     aa4:	0d c0       	rjmp	.+26     	; 0xac0 <DIO_SetPinDirection+0xaa>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_SetPinDirection+0x9a>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	6a 95       	dec	r22
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_SetPinDirection+0x96>
     ab4:	80 95       	com	r24
     ab6:	94 b3       	in	r25, 0x14	; 20
     ab8:	89 23       	and	r24, r25
     aba:	84 bb       	out	0x14, r24	; 20
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	08 95       	ret
     ac0:	41 30       	cpi	r20, 0x01	; 1
     ac2:	79 f5       	brne	.+94     	; 0xb22 <DIO_SetPinDirection+0x10c>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_SetPinDirection+0xb8>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	6a 95       	dec	r22
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_SetPinDirection+0xb4>
     ad2:	94 b3       	in	r25, 0x14	; 20
     ad4:	89 2b       	or	r24, r25
     ad6:	84 bb       	out	0x14, r24	; 20
     ad8:	84 e0       	ldi	r24, 0x04	; 4
     ada:	08 95       	ret
     adc:	41 11       	cpse	r20, r1
     ade:	0d c0       	rjmp	.+26     	; 0xafa <DIO_SetPinDirection+0xe4>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <DIO_SetPinDirection+0xd4>
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	6a 95       	dec	r22
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <DIO_SetPinDirection+0xd0>
     aee:	80 95       	com	r24
     af0:	91 b3       	in	r25, 0x11	; 17
     af2:	89 23       	and	r24, r25
     af4:	81 bb       	out	0x11, r24	; 17
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	08 95       	ret
     afa:	41 30       	cpi	r20, 0x01	; 1
     afc:	a1 f4       	brne	.+40     	; 0xb26 <DIO_SetPinDirection+0x110>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_SetPinDirection+0xf2>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	6a 95       	dec	r22
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_SetPinDirection+0xee>
     b0c:	91 b3       	in	r25, 0x11	; 17
     b0e:	89 2b       	or	r24, r25
     b10:	81 bb       	out	0x11, r24	; 17
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	08 95       	ret
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	08 95       	ret
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	08 95       	ret
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	08 95       	ret
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	08 95       	ret
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	08 95       	ret

00000b2a <DIO_SetPinValue>:
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	31 f1       	breq	.+76     	; 0xb7a <DIO_SetPinValue+0x50>
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <DIO_SetPinValue+0x14>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	09 f4       	brne	.+2      	; 0xb36 <DIO_SetPinValue+0xc>
     b34:	40 c0       	rjmp	.+128    	; 0xbb6 <DIO_SetPinValue+0x8c>
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	09 f4       	brne	.+2      	; 0xb3c <DIO_SetPinValue+0x12>
     b3a:	5a c0       	rjmp	.+180    	; 0xbf0 <DIO_SetPinValue+0xc6>
     b3c:	76 c0       	rjmp	.+236    	; 0xc2a <DIO_SetPinValue+0x100>
     b3e:	41 11       	cpse	r20, r1
     b40:	0d c0       	rjmp	.+26     	; 0xb5c <DIO_SetPinValue+0x32>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <DIO_SetPinValue+0x22>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	6a 95       	dec	r22
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <DIO_SetPinValue+0x1e>
     b50:	80 95       	com	r24
     b52:	9b b3       	in	r25, 0x1b	; 27
     b54:	89 23       	and	r24, r25
     b56:	8b bb       	out	0x1b, r24	; 27
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	08 95       	ret
     b5c:	41 30       	cpi	r20, 0x01	; 1
     b5e:	09 f0       	breq	.+2      	; 0xb62 <DIO_SetPinValue+0x38>
     b60:	66 c0       	rjmp	.+204    	; 0xc2e <DIO_SetPinValue+0x104>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_SetPinValue+0x42>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	6a 95       	dec	r22
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_SetPinValue+0x3e>
     b70:	9b b3       	in	r25, 0x1b	; 27
     b72:	89 2b       	or	r24, r25
     b74:	8b bb       	out	0x1b, r24	; 27
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	08 95       	ret
     b7a:	41 11       	cpse	r20, r1
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <DIO_SetPinValue+0x6e>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <DIO_SetPinValue+0x5e>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	6a 95       	dec	r22
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <DIO_SetPinValue+0x5a>
     b8c:	80 95       	com	r24
     b8e:	98 b3       	in	r25, 0x18	; 24
     b90:	89 23       	and	r24, r25
     b92:	88 bb       	out	0x18, r24	; 24
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	08 95       	ret
     b98:	41 30       	cpi	r20, 0x01	; 1
     b9a:	09 f0       	breq	.+2      	; 0xb9e <DIO_SetPinValue+0x74>
     b9c:	4a c0       	rjmp	.+148    	; 0xc32 <DIO_SetPinValue+0x108>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <DIO_SetPinValue+0x7e>
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	6a 95       	dec	r22
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <DIO_SetPinValue+0x7a>
     bac:	98 b3       	in	r25, 0x18	; 24
     bae:	89 2b       	or	r24, r25
     bb0:	88 bb       	out	0x18, r24	; 24
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	08 95       	ret
     bb6:	41 11       	cpse	r20, r1
     bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <DIO_SetPinValue+0xaa>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x9a>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	6a 95       	dec	r22
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x96>
     bc8:	80 95       	com	r24
     bca:	95 b3       	in	r25, 0x15	; 21
     bcc:	89 23       	and	r24, r25
     bce:	85 bb       	out	0x15, r24	; 21
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	08 95       	ret
     bd4:	41 30       	cpi	r20, 0x01	; 1
     bd6:	79 f5       	brne	.+94     	; 0xc36 <DIO_SetPinValue+0x10c>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_SetPinValue+0xb8>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	6a 95       	dec	r22
     be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_SetPinValue+0xb4>
     be6:	95 b3       	in	r25, 0x15	; 21
     be8:	89 2b       	or	r24, r25
     bea:	85 bb       	out	0x15, r24	; 21
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	08 95       	ret
     bf0:	41 11       	cpse	r20, r1
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <DIO_SetPinValue+0xe4>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_SetPinValue+0xd4>
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	6a 95       	dec	r22
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_SetPinValue+0xd0>
     c02:	80 95       	com	r24
     c04:	92 b3       	in	r25, 0x12	; 18
     c06:	89 23       	and	r24, r25
     c08:	82 bb       	out	0x12, r24	; 18
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	08 95       	ret
     c0e:	41 30       	cpi	r20, 0x01	; 1
     c10:	a1 f4       	brne	.+40     	; 0xc3a <DIO_SetPinValue+0x110>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_SetPinValue+0xf2>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	6a 95       	dec	r22
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_SetPinValue+0xee>
     c20:	92 b3       	in	r25, 0x12	; 18
     c22:	89 2b       	or	r24, r25
     c24:	82 bb       	out	0x12, r24	; 18
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	08 95       	ret
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	08 95       	ret
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	08 95       	ret
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	08 95       	ret
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	08 95       	ret
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	08 95       	ret

00000c3e <DIO_GetPinValue>:
uint8_t DIO_GetPinValue(uint8_t au8_PORT,uint8_t PIN)
{
	uint8_t PinValue;
	switch(au8_PORT)
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	79 f0       	breq	.+30     	; 0xc60 <DIO_GetPinValue+0x22>
     c42:	28 f0       	brcs	.+10     	; 0xc4e <DIO_GetPinValue+0x10>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	a9 f0       	breq	.+42     	; 0xc72 <DIO_GetPinValue+0x34>
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	e1 f0       	breq	.+56     	; 0xc84 <DIO_GetPinValue+0x46>
     c4c:	24 c0       	rjmp	.+72     	; 0xc96 <DIO_GetPinValue+0x58>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
     c4e:	89 b3       	in	r24, 0x19	; 25
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_GetPinValue+0x1a>
     c54:	95 95       	asr	r25
     c56:	87 95       	ror	r24
     c58:	6a 95       	dec	r22
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_GetPinValue+0x16>
     c5c:	81 70       	andi	r24, 0x01	; 1
     c5e:	08 95       	ret
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
     c60:	86 b3       	in	r24, 0x16	; 22
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_GetPinValue+0x2c>
     c66:	95 95       	asr	r25
     c68:	87 95       	ror	r24
     c6a:	6a 95       	dec	r22
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_GetPinValue+0x28>
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	08 95       	ret
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
     c72:	83 b3       	in	r24, 0x13	; 19
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_GetPinValue+0x3e>
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	6a 95       	dec	r22
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_GetPinValue+0x3a>
     c80:	81 70       	andi	r24, 0x01	; 1
     c82:	08 95       	ret
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
     c84:	80 b3       	in	r24, 0x10	; 16
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_GetPinValue+0x50>
     c8a:	95 95       	asr	r25
     c8c:	87 95       	ror	r24
     c8e:	6a 95       	dec	r22
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_GetPinValue+0x4c>
     c92:	81 70       	andi	r24, 0x01	; 1
     c94:	08 95       	ret
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
     c96:	85 e0       	ldi	r24, 0x05	; 5
			break;
	}//switch
	return PinValue;
}//function
     c98:	08 95       	ret

00000c9a <__vector_11>:
}

void OCI2_init(void)
{
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <counts>
     cb0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <counts+0x1>
     cb4:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <counts+0x2>
     cb8:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <counts+0x3>
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	a1 1d       	adc	r26, r1
     cc0:	b1 1d       	adc	r27, r1
     cc2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <counts>
     cc6:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <counts+0x1>
     cca:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <counts+0x2>
     cce:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <counts+0x3>
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <OVI0_init>:
     ce4:	89 b7       	in	r24, 0x39	; 57
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	89 bf       	out	0x39, r24	; 57
     cea:	8f b7       	in	r24, 0x3f	; 63
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	8f bf       	out	0x3f, r24	; 63
     cf0:	08 95       	ret

00000cf2 <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	21 f4       	brne	.+8      	; 0xd00 <TIMER0_start+0xe>
	{
		Ru8_TCCR0 |= (1<<CS00);
     cf8:	83 b7       	in	r24, 0x33	; 51
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	83 bf       	out	0x33, r24	; 51
     cfe:	08 95       	ret
	}
	else if (8 == u16_prescale)
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	91 05       	cpc	r25, r1
     d04:	21 f4       	brne	.+8      	; 0xd0e <TIMER0_start+0x1c>
	{
		Ru8_TCCR0 |= (1<<CS01);	
     d06:	83 b7       	in	r24, 0x33	; 51
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	83 bf       	out	0x33, r24	; 51
     d0c:	08 95       	ret
	}
	else if (32 == u16_prescale)
     d0e:	80 32       	cpi	r24, 0x20	; 32
     d10:	91 05       	cpc	r25, r1
     d12:	21 f4       	brne	.+8      	; 0xd1c <TIMER0_start+0x2a>
	{
		Ru8_TCCR0 |= (1<<CS01) | (1<<CS00);
     d14:	83 b7       	in	r24, 0x33	; 51
     d16:	83 60       	ori	r24, 0x03	; 3
     d18:	83 bf       	out	0x33, r24	; 51
     d1a:	08 95       	ret
	}
	else if (64 == u16_prescale)
     d1c:	80 34       	cpi	r24, 0x40	; 64
     d1e:	91 05       	cpc	r25, r1
     d20:	21 f4       	brne	.+8      	; 0xd2a <TIMER0_start+0x38>
	{
		Ru8_TCCR0 |= (1<<CS02);
     d22:	83 b7       	in	r24, 0x33	; 51
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	83 bf       	out	0x33, r24	; 51
     d28:	08 95       	ret
	}
	else if (128 == u16_prescale)
     d2a:	80 38       	cpi	r24, 0x80	; 128
     d2c:	91 05       	cpc	r25, r1
     d2e:	21 f4       	brne	.+8      	; 0xd38 <TIMER0_start+0x46>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS00);
     d30:	83 b7       	in	r24, 0x33	; 51
     d32:	85 60       	ori	r24, 0x05	; 5
     d34:	83 bf       	out	0x33, r24	; 51
     d36:	08 95       	ret
	}
	else if (256 == u16_prescale)
     d38:	81 15       	cp	r24, r1
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	92 07       	cpc	r25, r18
     d3e:	21 f4       	brne	.+8      	; 0xd48 <TIMER0_start+0x56>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01);
     d40:	83 b7       	in	r24, 0x33	; 51
     d42:	86 60       	ori	r24, 0x06	; 6
     d44:	83 bf       	out	0x33, r24	; 51
     d46:	08 95       	ret
	}
	else if (1024 == u16_prescale)
     d48:	81 15       	cp	r24, r1
     d4a:	94 40       	sbci	r25, 0x04	; 4
     d4c:	19 f4       	brne	.+6      	; 0xd54 <TIMER0_start+0x62>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
     d4e:	83 b7       	in	r24, 0x33	; 51
     d50:	87 60       	ori	r24, 0x07	; 7
     d52:	83 bf       	out	0x33, r24	; 51
     d54:	08 95       	ret

00000d56 <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	Ru8_TCCR0 = 0;
     d56:	13 be       	out	0x33, r1	; 51
     d58:	08 95       	ret

00000d5a <TIMER0_msdelay>:
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	00 d0       	rcall	.+0      	; 0xd68 <TIMER0_msdelay+0xe>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <TIMER0_msdelay+0x10>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <TIMER0_msdelay+0x12>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
     d70:	bc 01       	movw	r22, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__floatunsisf>
     d7a:	2f e6       	ldi	r18, 0x6F	; 111
     d7c:	32 e1       	ldi	r19, 0x12	; 18
     d7e:	43 e8       	ldi	r20, 0x83	; 131
     d80:	5a e3       	ldi	r21, 0x3A	; 58
     d82:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	53 e4       	ldi	r21, 0x43	; 67
     d92:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
     d96:	0e 94 44 08 	call	0x1088	; 0x1088 <__fixunssfsi>
     d9a:	69 83       	std	Y+1, r22	; 0x01
     d9c:	7a 83       	std	Y+2, r23	; 0x02
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
     da2:	29 81       	ldd	r18, Y+1	; 0x01
     da4:	3a 81       	ldd	r19, Y+2	; 0x02
     da6:	4b 81       	ldd	r20, Y+3	; 0x03
     da8:	5c 81       	ldd	r21, Y+4	; 0x04
     daa:	af ef       	ldi	r26, 0xFF	; 255
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__muluhisi3>
     db2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__floatunsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 65 07 	call	0xeca	; 0xeca <__subsf3>
     dc2:	0e 94 44 08 	call	0x1088	; 0x1088 <__fixunssfsi>
     dc6:	7e 83       	std	Y+6, r23	; 0x06
     dc8:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init();                                         //Enabling system interrupt and flag for overflow int timer 0
     dca:	0e 94 72 06 	call	0xce4	; 0xce4 <OVI0_init>
	TIMER0_start(8);                                     //Prescaler of one that yields 8MHz frequency
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <TIMER0_start>
	while (counts < ticks)
     dd6:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <counts>
     dda:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <counts+0x1>
     dde:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <counts+0x2>
     de2:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <counts+0x3>
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	ab 81       	ldd	r26, Y+3	; 0x03
     dec:	bc 81       	ldd	r27, Y+4	; 0x04
     dee:	48 17       	cp	r20, r24
     df0:	59 07       	cpc	r21, r25
     df2:	6a 07       	cpc	r22, r26
     df4:	7b 07       	cpc	r23, r27
     df6:	78 f3       	brcs	.-34     	; 0xdd6 <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	Ru8_TCNT0 = (255-remainder);                      //Compensation of ticks remaining fraction to increase accuracy
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	80 95       	com	r24
     dfe:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
     e00:	0e 94 ab 06 	call	0xd56	; 0xd56 <TIMER0_stop>
	counts = 0; 
     e04:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <counts>
     e08:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <counts+0x1>
     e0c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <counts+0x2>
     e10:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <counts+0x3>
}
     e14:	26 96       	adiw	r28, 0x06	; 6
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	08 95       	ret

00000e2e <__vector_13>:
	ptr_To_TX_Int_fun=ptr_To_Fun;
	
}
/*RX ISR*/
void __vector_13(void)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
     e50:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <ptr_To_RX_Int_fun>
     e54:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <ptr_To_RX_Int_fun+0x1>
     e58:	09 95       	icall
}
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
     e9e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <ptr_To_TX_Int_fun>
     ea2:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <ptr_To_TX_Int_fun+0x1>
     ea6:	09 95       	icall
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__subsf3>:
     eca:	50 58       	subi	r21, 0x80	; 128

00000ecc <__addsf3>:
     ecc:	bb 27       	eor	r27, r27
     ece:	aa 27       	eor	r26, r26
     ed0:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3x>
     ed4:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
     ed8:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
     edc:	38 f0       	brcs	.+14     	; 0xeec <__addsf3+0x20>
     ede:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__addsf3+0x20>
     ee4:	39 f4       	brne	.+14     	; 0xef4 <__addsf3+0x28>
     ee6:	9f 3f       	cpi	r25, 0xFF	; 255
     ee8:	19 f4       	brne	.+6      	; 0xef0 <__addsf3+0x24>
     eea:	26 f4       	brtc	.+8      	; 0xef4 <__addsf3+0x28>
     eec:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
     ef0:	0e f4       	brtc	.+2      	; 0xef4 <__addsf3+0x28>
     ef2:	e0 95       	com	r30
     ef4:	e7 fb       	bst	r30, 7
     ef6:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>

00000efa <__addsf3x>:
     efa:	e9 2f       	mov	r30, r25
     efc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
     f00:	58 f3       	brcs	.-42     	; 0xed8 <__addsf3+0xc>
     f02:	ba 17       	cp	r27, r26
     f04:	62 07       	cpc	r22, r18
     f06:	73 07       	cpc	r23, r19
     f08:	84 07       	cpc	r24, r20
     f0a:	95 07       	cpc	r25, r21
     f0c:	20 f0       	brcs	.+8      	; 0xf16 <__addsf3x+0x1c>
     f0e:	79 f4       	brne	.+30     	; 0xf2e <__addsf3x+0x34>
     f10:	a6 f5       	brtc	.+104    	; 0xf7a <__addsf3x+0x80>
     f12:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_zero>
     f16:	0e f4       	brtc	.+2      	; 0xf1a <__addsf3x+0x20>
     f18:	e0 95       	com	r30
     f1a:	0b 2e       	mov	r0, r27
     f1c:	ba 2f       	mov	r27, r26
     f1e:	a0 2d       	mov	r26, r0
     f20:	0b 01       	movw	r0, r22
     f22:	b9 01       	movw	r22, r18
     f24:	90 01       	movw	r18, r0
     f26:	0c 01       	movw	r0, r24
     f28:	ca 01       	movw	r24, r20
     f2a:	a0 01       	movw	r20, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	ff 27       	eor	r31, r31
     f30:	59 1b       	sub	r21, r25
     f32:	99 f0       	breq	.+38     	; 0xf5a <__addsf3x+0x60>
     f34:	59 3f       	cpi	r21, 0xF9	; 249
     f36:	50 f4       	brcc	.+20     	; 0xf4c <__addsf3x+0x52>
     f38:	50 3e       	cpi	r21, 0xE0	; 224
     f3a:	68 f1       	brcs	.+90     	; 0xf96 <__addsf3x+0x9c>
     f3c:	1a 16       	cp	r1, r26
     f3e:	f0 40       	sbci	r31, 0x00	; 0
     f40:	a2 2f       	mov	r26, r18
     f42:	23 2f       	mov	r18, r19
     f44:	34 2f       	mov	r19, r20
     f46:	44 27       	eor	r20, r20
     f48:	58 5f       	subi	r21, 0xF8	; 248
     f4a:	f3 cf       	rjmp	.-26     	; 0xf32 <__addsf3x+0x38>
     f4c:	46 95       	lsr	r20
     f4e:	37 95       	ror	r19
     f50:	27 95       	ror	r18
     f52:	a7 95       	ror	r26
     f54:	f0 40       	sbci	r31, 0x00	; 0
     f56:	53 95       	inc	r21
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__addsf3x+0x52>
     f5a:	7e f4       	brtc	.+30     	; 0xf7a <__addsf3x+0x80>
     f5c:	1f 16       	cp	r1, r31
     f5e:	ba 0b       	sbc	r27, r26
     f60:	62 0b       	sbc	r22, r18
     f62:	73 0b       	sbc	r23, r19
     f64:	84 0b       	sbc	r24, r20
     f66:	ba f0       	brmi	.+46     	; 0xf96 <__addsf3x+0x9c>
     f68:	91 50       	subi	r25, 0x01	; 1
     f6a:	a1 f0       	breq	.+40     	; 0xf94 <__addsf3x+0x9a>
     f6c:	ff 0f       	add	r31, r31
     f6e:	bb 1f       	adc	r27, r27
     f70:	66 1f       	adc	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	c2 f7       	brpl	.-16     	; 0xf68 <__addsf3x+0x6e>
     f78:	0e c0       	rjmp	.+28     	; 0xf96 <__addsf3x+0x9c>
     f7a:	ba 0f       	add	r27, r26
     f7c:	62 1f       	adc	r22, r18
     f7e:	73 1f       	adc	r23, r19
     f80:	84 1f       	adc	r24, r20
     f82:	48 f4       	brcc	.+18     	; 0xf96 <__addsf3x+0x9c>
     f84:	87 95       	ror	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	b7 95       	ror	r27
     f8c:	f7 95       	ror	r31
     f8e:	9e 3f       	cpi	r25, 0xFE	; 254
     f90:	08 f0       	brcs	.+2      	; 0xf94 <__addsf3x+0x9a>
     f92:	b0 cf       	rjmp	.-160    	; 0xef4 <__addsf3+0x28>
     f94:	93 95       	inc	r25
     f96:	88 0f       	add	r24, r24
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__addsf3x+0xa2>
     f9a:	99 27       	eor	r25, r25
     f9c:	ee 0f       	add	r30, r30
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret

00000fa4 <__divsf3>:
     fa4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__divsf3x>
     fa8:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
     fac:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
     fb0:	58 f0       	brcs	.+22     	; 0xfc8 <__divsf3+0x24>
     fb2:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
     fb6:	40 f0       	brcs	.+16     	; 0xfc8 <__divsf3+0x24>
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <__divsf3+0x20>
     fba:	5f 3f       	cpi	r21, 0xFF	; 255
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <__divsf3+0x24>
     fbe:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
     fc2:	51 11       	cpse	r21, r1
     fc4:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
     fc8:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>

00000fcc <__divsf3x>:
     fcc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
     fd0:	68 f3       	brcs	.-38     	; 0xfac <__divsf3+0x8>

00000fd2 <__divsf3_pse>:
     fd2:	99 23       	and	r25, r25
     fd4:	b1 f3       	breq	.-20     	; 0xfc2 <__divsf3+0x1e>
     fd6:	55 23       	and	r21, r21
     fd8:	91 f3       	breq	.-28     	; 0xfbe <__divsf3+0x1a>
     fda:	95 1b       	sub	r25, r21
     fdc:	55 0b       	sbc	r21, r21
     fde:	bb 27       	eor	r27, r27
     fe0:	aa 27       	eor	r26, r26
     fe2:	62 17       	cp	r22, r18
     fe4:	73 07       	cpc	r23, r19
     fe6:	84 07       	cpc	r24, r20
     fe8:	38 f0       	brcs	.+14     	; 0xff8 <__divsf3_pse+0x26>
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	44 1f       	adc	r20, r20
     ff4:	aa 1f       	adc	r26, r26
     ff6:	a9 f3       	breq	.-22     	; 0xfe2 <__divsf3_pse+0x10>
     ff8:	35 d0       	rcall	.+106    	; 0x1064 <__divsf3_pse+0x92>
     ffa:	0e 2e       	mov	r0, r30
     ffc:	3a f0       	brmi	.+14     	; 0x100c <__divsf3_pse+0x3a>
     ffe:	e0 e8       	ldi	r30, 0x80	; 128
    1000:	32 d0       	rcall	.+100    	; 0x1066 <__divsf3_pse+0x94>
    1002:	91 50       	subi	r25, 0x01	; 1
    1004:	50 40       	sbci	r21, 0x00	; 0
    1006:	e6 95       	lsr	r30
    1008:	00 1c       	adc	r0, r0
    100a:	ca f7       	brpl	.-14     	; 0xffe <__divsf3_pse+0x2c>
    100c:	2b d0       	rcall	.+86     	; 0x1064 <__divsf3_pse+0x92>
    100e:	fe 2f       	mov	r31, r30
    1010:	29 d0       	rcall	.+82     	; 0x1064 <__divsf3_pse+0x92>
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	bb 1f       	adc	r27, r27
    101a:	26 17       	cp	r18, r22
    101c:	37 07       	cpc	r19, r23
    101e:	48 07       	cpc	r20, r24
    1020:	ab 07       	cpc	r26, r27
    1022:	b0 e8       	ldi	r27, 0x80	; 128
    1024:	09 f0       	breq	.+2      	; 0x1028 <__divsf3_pse+0x56>
    1026:	bb 0b       	sbc	r27, r27
    1028:	80 2d       	mov	r24, r0
    102a:	bf 01       	movw	r22, r30
    102c:	ff 27       	eor	r31, r31
    102e:	93 58       	subi	r25, 0x83	; 131
    1030:	5f 4f       	sbci	r21, 0xFF	; 255
    1032:	3a f0       	brmi	.+14     	; 0x1042 <__divsf3_pse+0x70>
    1034:	9e 3f       	cpi	r25, 0xFE	; 254
    1036:	51 05       	cpc	r21, r1
    1038:	78 f0       	brcs	.+30     	; 0x1058 <__divsf3_pse+0x86>
    103a:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    103e:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
    1042:	5f 3f       	cpi	r21, 0xFF	; 255
    1044:	e4 f3       	brlt	.-8      	; 0x103e <__divsf3_pse+0x6c>
    1046:	98 3e       	cpi	r25, 0xE8	; 232
    1048:	d4 f3       	brlt	.-12     	; 0x103e <__divsf3_pse+0x6c>
    104a:	86 95       	lsr	r24
    104c:	77 95       	ror	r23
    104e:	67 95       	ror	r22
    1050:	b7 95       	ror	r27
    1052:	f7 95       	ror	r31
    1054:	9f 5f       	subi	r25, 0xFF	; 255
    1056:	c9 f7       	brne	.-14     	; 0x104a <__divsf3_pse+0x78>
    1058:	88 0f       	add	r24, r24
    105a:	91 1d       	adc	r25, r1
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret
    1064:	e1 e0       	ldi	r30, 0x01	; 1
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	88 1f       	adc	r24, r24
    106c:	bb 1f       	adc	r27, r27
    106e:	62 17       	cp	r22, r18
    1070:	73 07       	cpc	r23, r19
    1072:	84 07       	cpc	r24, r20
    1074:	ba 07       	cpc	r27, r26
    1076:	20 f0       	brcs	.+8      	; 0x1080 <__divsf3_pse+0xae>
    1078:	62 1b       	sub	r22, r18
    107a:	73 0b       	sbc	r23, r19
    107c:	84 0b       	sbc	r24, r20
    107e:	ba 0b       	sbc	r27, r26
    1080:	ee 1f       	adc	r30, r30
    1082:	88 f7       	brcc	.-30     	; 0x1066 <__divsf3_pse+0x94>
    1084:	e0 95       	com	r30
    1086:	08 95       	ret

00001088 <__fixunssfsi>:
    1088:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_splitA>
    108c:	88 f0       	brcs	.+34     	; 0x10b0 <__fixunssfsi+0x28>
    108e:	9f 57       	subi	r25, 0x7F	; 127
    1090:	98 f0       	brcs	.+38     	; 0x10b8 <__fixunssfsi+0x30>
    1092:	b9 2f       	mov	r27, r25
    1094:	99 27       	eor	r25, r25
    1096:	b7 51       	subi	r27, 0x17	; 23
    1098:	b0 f0       	brcs	.+44     	; 0x10c6 <__fixunssfsi+0x3e>
    109a:	e1 f0       	breq	.+56     	; 0x10d4 <__fixunssfsi+0x4c>
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	88 1f       	adc	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	1a f0       	brmi	.+6      	; 0x10ac <__fixunssfsi+0x24>
    10a6:	ba 95       	dec	r27
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__fixunssfsi+0x14>
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <__fixunssfsi+0x4c>
    10ac:	b1 30       	cpi	r27, 0x01	; 1
    10ae:	91 f0       	breq	.+36     	; 0x10d4 <__fixunssfsi+0x4c>
    10b0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_zero>
    10b4:	b1 e0       	ldi	r27, 0x01	; 1
    10b6:	08 95       	ret
    10b8:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_zero>
    10bc:	67 2f       	mov	r22, r23
    10be:	78 2f       	mov	r23, r24
    10c0:	88 27       	eor	r24, r24
    10c2:	b8 5f       	subi	r27, 0xF8	; 248
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <__fixunssfsi+0x4c>
    10c6:	b9 3f       	cpi	r27, 0xF9	; 249
    10c8:	cc f3       	brlt	.-14     	; 0x10bc <__fixunssfsi+0x34>
    10ca:	86 95       	lsr	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	b3 95       	inc	r27
    10d2:	d9 f7       	brne	.-10     	; 0x10ca <__fixunssfsi+0x42>
    10d4:	3e f4       	brtc	.+14     	; 0x10e4 <__fixunssfsi+0x5c>
    10d6:	90 95       	com	r25
    10d8:	80 95       	com	r24
    10da:	70 95       	com	r23
    10dc:	61 95       	neg	r22
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8f 4f       	sbci	r24, 0xFF	; 255
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	08 95       	ret

000010e6 <__floatunsisf>:
    10e6:	e8 94       	clt
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <__floatsisf+0x12>

000010ea <__floatsisf>:
    10ea:	97 fb       	bst	r25, 7
    10ec:	3e f4       	brtc	.+14     	; 0x10fc <__floatsisf+0x12>
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	99 23       	and	r25, r25
    10fe:	a9 f0       	breq	.+42     	; 0x112a <__floatsisf+0x40>
    1100:	f9 2f       	mov	r31, r25
    1102:	96 e9       	ldi	r25, 0x96	; 150
    1104:	bb 27       	eor	r27, r27
    1106:	93 95       	inc	r25
    1108:	f6 95       	lsr	r31
    110a:	87 95       	ror	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	f1 11       	cpse	r31, r1
    1114:	f8 cf       	rjmp	.-16     	; 0x1106 <__floatsisf+0x1c>
    1116:	fa f4       	brpl	.+62     	; 0x1156 <__floatsisf+0x6c>
    1118:	bb 0f       	add	r27, r27
    111a:	11 f4       	brne	.+4      	; 0x1120 <__floatsisf+0x36>
    111c:	60 ff       	sbrs	r22, 0
    111e:	1b c0       	rjmp	.+54     	; 0x1156 <__floatsisf+0x6c>
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	16 c0       	rjmp	.+44     	; 0x1156 <__floatsisf+0x6c>
    112a:	88 23       	and	r24, r24
    112c:	11 f0       	breq	.+4      	; 0x1132 <__floatsisf+0x48>
    112e:	96 e9       	ldi	r25, 0x96	; 150
    1130:	11 c0       	rjmp	.+34     	; 0x1154 <__floatsisf+0x6a>
    1132:	77 23       	and	r23, r23
    1134:	21 f0       	breq	.+8      	; 0x113e <__floatsisf+0x54>
    1136:	9e e8       	ldi	r25, 0x8E	; 142
    1138:	87 2f       	mov	r24, r23
    113a:	76 2f       	mov	r23, r22
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <__floatsisf+0x5e>
    113e:	66 23       	and	r22, r22
    1140:	71 f0       	breq	.+28     	; 0x115e <__floatsisf+0x74>
    1142:	96 e8       	ldi	r25, 0x86	; 134
    1144:	86 2f       	mov	r24, r22
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	2a f0       	brmi	.+10     	; 0x1156 <__floatsisf+0x6c>
    114c:	9a 95       	dec	r25
    114e:	66 0f       	add	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	88 1f       	adc	r24, r24
    1154:	da f7       	brpl	.-10     	; 0x114c <__floatsisf+0x62>
    1156:	88 0f       	add	r24, r24
    1158:	96 95       	lsr	r25
    115a:	87 95       	ror	r24
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <__fp_inf>:
    1160:	97 f9       	bld	r25, 7
    1162:	9f 67       	ori	r25, 0x7F	; 127
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	08 95       	ret

0000116c <__fp_nan>:
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	80 ec       	ldi	r24, 0xC0	; 192
    1170:	08 95       	ret

00001172 <__fp_pscA>:
    1172:	00 24       	eor	r0, r0
    1174:	0a 94       	dec	r0
    1176:	16 16       	cp	r1, r22
    1178:	17 06       	cpc	r1, r23
    117a:	18 06       	cpc	r1, r24
    117c:	09 06       	cpc	r0, r25
    117e:	08 95       	ret

00001180 <__fp_pscB>:
    1180:	00 24       	eor	r0, r0
    1182:	0a 94       	dec	r0
    1184:	12 16       	cp	r1, r18
    1186:	13 06       	cpc	r1, r19
    1188:	14 06       	cpc	r1, r20
    118a:	05 06       	cpc	r0, r21
    118c:	08 95       	ret

0000118e <__fp_round>:
    118e:	09 2e       	mov	r0, r25
    1190:	03 94       	inc	r0
    1192:	00 0c       	add	r0, r0
    1194:	11 f4       	brne	.+4      	; 0x119a <__fp_round+0xc>
    1196:	88 23       	and	r24, r24
    1198:	52 f0       	brmi	.+20     	; 0x11ae <__fp_round+0x20>
    119a:	bb 0f       	add	r27, r27
    119c:	40 f4       	brcc	.+16     	; 0x11ae <__fp_round+0x20>
    119e:	bf 2b       	or	r27, r31
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__fp_round+0x18>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__fp_round+0x20>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__fp_split3>:
    11b0:	57 fd       	sbrc	r21, 7
    11b2:	90 58       	subi	r25, 0x80	; 128
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <__fp_splitA+0x10>
    11ba:	5f 3f       	cpi	r21, 0xFF	; 255
    11bc:	71 f0       	breq	.+28     	; 0x11da <__fp_splitA+0x1a>
    11be:	47 95       	ror	r20

000011c0 <__fp_splitA>:
    11c0:	88 0f       	add	r24, r24
    11c2:	97 fb       	bst	r25, 7
    11c4:	99 1f       	adc	r25, r25
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <__fp_splitA+0x20>
    11c8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ca:	79 f0       	breq	.+30     	; 0x11ea <__fp_splitA+0x2a>
    11cc:	87 95       	ror	r24
    11ce:	08 95       	ret
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	14 06       	cpc	r1, r20
    11d6:	55 1f       	adc	r21, r21
    11d8:	f2 cf       	rjmp	.-28     	; 0x11be <__fp_split3+0xe>
    11da:	46 95       	lsr	r20
    11dc:	f1 df       	rcall	.-30     	; 0x11c0 <__fp_splitA>
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <__fp_splitA+0x30>
    11e0:	16 16       	cp	r1, r22
    11e2:	17 06       	cpc	r1, r23
    11e4:	18 06       	cpc	r1, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	f1 cf       	rjmp	.-30     	; 0x11cc <__fp_splitA+0xc>
    11ea:	86 95       	lsr	r24
    11ec:	71 05       	cpc	r23, r1
    11ee:	61 05       	cpc	r22, r1
    11f0:	08 94       	sec
    11f2:	08 95       	ret

000011f4 <__fp_zero>:
    11f4:	e8 94       	clt

000011f6 <__fp_szero>:
    11f6:	bb 27       	eor	r27, r27
    11f8:	66 27       	eor	r22, r22
    11fa:	77 27       	eor	r23, r23
    11fc:	cb 01       	movw	r24, r22
    11fe:	97 f9       	bld	r25, 7
    1200:	08 95       	ret

00001202 <log10>:
    1202:	0e 94 11 09 	call	0x1222	; 0x1222 <log>
    1206:	29 ed       	ldi	r18, 0xD9	; 217
    1208:	3b e5       	ldi	r19, 0x5B	; 91
    120a:	4e ed       	ldi	r20, 0xDE	; 222
    120c:	5e e3       	ldi	r21, 0x3E	; 62
    120e:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__mulsf3>
    1212:	16 f0       	brts	.+4      	; 0x1218 <log10+0x16>
    1214:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_mpack>
    1218:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
    121c:	68 94       	set
    121e:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>

00001222 <log>:
    1222:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_splitA>
    1226:	a8 f3       	brcs	.-22     	; 0x1212 <log10+0x10>
    1228:	99 23       	and	r25, r25
    122a:	c1 f3       	breq	.-16     	; 0x121c <log10+0x1a>
    122c:	ae f3       	brts	.-22     	; 0x1218 <log10+0x16>
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	1f 93       	push	r17
    1234:	0f 93       	push	r16
    1236:	ff 92       	push	r15
    1238:	c9 2f       	mov	r28, r25
    123a:	dd 27       	eor	r29, r29
    123c:	88 23       	and	r24, r24
    123e:	2a f0       	brmi	.+10     	; 0x124a <log+0x28>
    1240:	21 97       	sbiw	r28, 0x01	; 1
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	da f7       	brpl	.-10     	; 0x1240 <log+0x1e>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f eb       	ldi	r21, 0xBF	; 191
    1252:	9f e3       	ldi	r25, 0x3F	; 63
    1254:	88 39       	cpi	r24, 0x98	; 152
    1256:	20 f0       	brcs	.+8      	; 0x1260 <log+0x3e>
    1258:	80 3e       	cpi	r24, 0xE0	; 224
    125a:	38 f0       	brcs	.+14     	; 0x126a <log+0x48>
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	8f 77       	andi	r24, 0x7F	; 127
    1260:	0e 94 66 07 	call	0xecc	; 0xecc <__addsf3>
    1264:	e4 e5       	ldi	r30, 0x54	; 84
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <log+0x50>
    126a:	0e 94 66 07 	call	0xecc	; 0xecc <__addsf3>
    126e:	e1 e8       	ldi	r30, 0x81	; 129
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_powser>
    1276:	8b 01       	movw	r16, r22
    1278:	be 01       	movw	r22, r28
    127a:	ec 01       	movw	r28, r24
    127c:	fb 2e       	mov	r15, r27
    127e:	6f 57       	subi	r22, 0x7F	; 127
    1280:	71 09       	sbc	r23, r1
    1282:	75 95       	asr	r23
    1284:	77 1f       	adc	r23, r23
    1286:	88 0b       	sbc	r24, r24
    1288:	99 0b       	sbc	r25, r25
    128a:	0e 94 75 08 	call	0x10ea	; 0x10ea <__floatsisf>
    128e:	28 e1       	ldi	r18, 0x18	; 24
    1290:	32 e7       	ldi	r19, 0x72	; 114
    1292:	41 e3       	ldi	r20, 0x31	; 49
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    129a:	af 2d       	mov	r26, r15
    129c:	98 01       	movw	r18, r16
    129e:	ae 01       	movw	r20, r28
    12a0:	ff 90       	pop	r15
    12a2:	0f 91       	pop	r16
    12a4:	1f 91       	pop	r17
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3x>
    12ae:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>

000012b2 <__mulsf3>:
    12b2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    12b6:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
    12ba:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__mulsf3+0x1c>
    12c0:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__mulsf3+0x1c>
    12c6:	95 23       	and	r25, r21
    12c8:	11 f0       	breq	.+4      	; 0x12ce <__mulsf3+0x1c>
    12ca:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    12ce:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>

000012d8 <__mulsf3x>:
    12d8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
    12dc:	70 f3       	brcs	.-36     	; 0x12ba <__mulsf3+0x8>

000012de <__mulsf3_pse>:
    12de:	95 9f       	mul	r25, r21
    12e0:	c1 f3       	breq	.-16     	; 0x12d2 <__mulsf3+0x20>
    12e2:	95 0f       	add	r25, r21
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 1f       	adc	r21, r21
    12e8:	62 9f       	mul	r22, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	72 9f       	mul	r23, r18
    12ee:	bb 27       	eor	r27, r27
    12f0:	f0 0d       	add	r31, r0
    12f2:	b1 1d       	adc	r27, r1
    12f4:	63 9f       	mul	r22, r19
    12f6:	aa 27       	eor	r26, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	aa 1f       	adc	r26, r26
    12fe:	64 9f       	mul	r22, r20
    1300:	66 27       	eor	r22, r22
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	66 1f       	adc	r22, r22
    1308:	82 9f       	mul	r24, r18
    130a:	22 27       	eor	r18, r18
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	62 1f       	adc	r22, r18
    1312:	73 9f       	mul	r23, r19
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	83 9f       	mul	r24, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	22 1f       	adc	r18, r18
    1322:	74 9f       	mul	r23, r20
    1324:	33 27       	eor	r19, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	23 1f       	adc	r18, r19
    132c:	84 9f       	mul	r24, r20
    132e:	60 0d       	add	r22, r0
    1330:	21 1d       	adc	r18, r1
    1332:	82 2f       	mov	r24, r18
    1334:	76 2f       	mov	r23, r22
    1336:	6a 2f       	mov	r22, r26
    1338:	11 24       	eor	r1, r1
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	9a f0       	brmi	.+38     	; 0x1366 <__mulsf3_pse+0x88>
    1340:	f1 f0       	breq	.+60     	; 0x137e <__mulsf3_pse+0xa0>
    1342:	88 23       	and	r24, r24
    1344:	4a f0       	brmi	.+18     	; 0x1358 <__mulsf3_pse+0x7a>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	bb 1f       	adc	r27, r27
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__mulsf3_pse+0x64>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	80 f0       	brcs	.+32     	; 0x137e <__mulsf3_pse+0xa0>
    135e:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    1362:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__mulsf3_pse+0x84>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__mulsf3_pse+0x84>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	e7 95       	ror	r30
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	c1 f7       	brne	.-16     	; 0x136e <__mulsf3_pse+0x90>
    137e:	fe 2b       	or	r31, r30
    1380:	88 0f       	add	r24, r24
    1382:	91 1d       	adc	r25, r1
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret

0000138c <pow>:
    138c:	fa 01       	movw	r30, r20
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	30 96       	adiw	r30, 0x00	; 0
    1394:	21 05       	cpc	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	a1 f1       	breq	.+104    	; 0x1402 <pow+0x76>
    139a:	61 15       	cp	r22, r1
    139c:	71 05       	cpc	r23, r1
    139e:	61 f4       	brne	.+24     	; 0x13b8 <pow+0x2c>
    13a0:	80 38       	cpi	r24, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	9b 07       	cpc	r25, r27
    13a6:	49 f1       	breq	.+82     	; 0x13fa <pow+0x6e>
    13a8:	68 94       	set
    13aa:	90 38       	cpi	r25, 0x80	; 128
    13ac:	81 05       	cpc	r24, r1
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <pow+0x3c>
    13b0:	80 38       	cpi	r24, 0x80	; 128
    13b2:	bf ef       	ldi	r27, 0xFF	; 255
    13b4:	9b 07       	cpc	r25, r27
    13b6:	41 f0       	breq	.+16     	; 0x13c8 <pow+0x3c>
    13b8:	99 23       	and	r25, r25
    13ba:	4a f5       	brpl	.+82     	; 0x140e <pow+0x82>
    13bc:	ff 3f       	cpi	r31, 0xFF	; 255
    13be:	e1 05       	cpc	r30, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	21 05       	cpc	r18, r1
    13c4:	19 f1       	breq	.+70     	; 0x140c <pow+0x80>
    13c6:	e8 94       	clt
    13c8:	08 94       	sec
    13ca:	e7 95       	ror	r30
    13cc:	d9 01       	movw	r26, r18
    13ce:	aa 23       	and	r26, r26
    13d0:	29 f4       	brne	.+10     	; 0x13dc <pow+0x50>
    13d2:	ab 2f       	mov	r26, r27
    13d4:	be 2f       	mov	r27, r30
    13d6:	f8 5f       	subi	r31, 0xF8	; 248
    13d8:	d0 f3       	brcs	.-12     	; 0x13ce <pow+0x42>
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <pow+0x70>
    13dc:	ff 5f       	subi	r31, 0xFF	; 255
    13de:	70 f4       	brcc	.+28     	; 0x13fc <pow+0x70>
    13e0:	a6 95       	lsr	r26
    13e2:	e0 f7       	brcc	.-8      	; 0x13dc <pow+0x50>
    13e4:	f7 39       	cpi	r31, 0x97	; 151
    13e6:	50 f0       	brcs	.+20     	; 0x13fc <pow+0x70>
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <pow+0x64>
    13ea:	ff 3a       	cpi	r31, 0xAF	; 175
    13ec:	38 f4       	brcc	.+14     	; 0x13fc <pow+0x70>
    13ee:	9f 77       	andi	r25, 0x7F	; 127
    13f0:	9f 93       	push	r25
    13f2:	0d d0       	rcall	.+26     	; 0x140e <pow+0x82>
    13f4:	0f 90       	pop	r0
    13f6:	07 fc       	sbrc	r0, 7
    13f8:	90 58       	subi	r25, 0x80	; 128
    13fa:	08 95       	ret
    13fc:	46 f0       	brts	.+16     	; 0x140e <pow+0x82>
    13fe:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	9f e3       	ldi	r25, 0x3F	; 63
    140a:	08 95       	ret
    140c:	4f e7       	ldi	r20, 0x7F	; 127
    140e:	9f 77       	andi	r25, 0x7F	; 127
    1410:	5f 93       	push	r21
    1412:	4f 93       	push	r20
    1414:	3f 93       	push	r19
    1416:	2f 93       	push	r18
    1418:	0e 94 11 09 	call	0x1222	; 0x1222 <log>
    141c:	2f 91       	pop	r18
    141e:	3f 91       	pop	r19
    1420:	4f 91       	pop	r20
    1422:	5f 91       	pop	r21
    1424:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
    1428:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <exp>
    142c:	29 f4       	brne	.+10     	; 0x1438 <pow+0xac>
    142e:	16 f0       	brts	.+4      	; 0x1434 <pow+0xa8>
    1430:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    1434:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_zero>
    1438:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>

0000143c <exp>:
    143c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_splitA>
    1440:	a8 f3       	brcs	.-22     	; 0x142c <pow+0xa0>
    1442:	96 38       	cpi	r25, 0x86	; 134
    1444:	a0 f7       	brcc	.-24     	; 0x142e <pow+0xa2>
    1446:	07 f8       	bld	r0, 7
    1448:	0f 92       	push	r0
    144a:	e8 94       	clt
    144c:	2b e3       	ldi	r18, 0x3B	; 59
    144e:	3a ea       	ldi	r19, 0xAA	; 170
    1450:	48 eb       	ldi	r20, 0xB8	; 184
    1452:	5f e7       	ldi	r21, 0x7F	; 127
    1454:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3_pse>
    1458:	0f 92       	push	r0
    145a:	0f 92       	push	r0
    145c:	0f 92       	push	r0
    145e:	4d b7       	in	r20, 0x3d	; 61
    1460:	5e b7       	in	r21, 0x3e	; 62
    1462:	0f 92       	push	r0
    1464:	0e 94 c7 0a 	call	0x158e	; 0x158e <modf>
    1468:	ee ea       	ldi	r30, 0xAE	; 174
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_powser>
    1470:	4f 91       	pop	r20
    1472:	5f 91       	pop	r21
    1474:	ef 91       	pop	r30
    1476:	ff 91       	pop	r31
    1478:	e5 95       	asr	r30
    147a:	ee 1f       	adc	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	49 f0       	breq	.+18     	; 0x1492 <exp+0x56>
    1480:	fe 57       	subi	r31, 0x7E	; 126
    1482:	e0 68       	ori	r30, 0x80	; 128
    1484:	44 27       	eor	r20, r20
    1486:	ee 0f       	add	r30, r30
    1488:	44 1f       	adc	r20, r20
    148a:	fa 95       	dec	r31
    148c:	e1 f7       	brne	.-8      	; 0x1486 <exp+0x4a>
    148e:	41 95       	neg	r20
    1490:	55 0b       	sbc	r21, r21
    1492:	0e 94 91 0a 	call	0x1522	; 0x1522 <ldexp>
    1496:	0f 90       	pop	r0
    1498:	07 fe       	sbrs	r0, 7
    149a:	0c 94 85 0a 	jmp	0x150a	; 0x150a <inverse>
    149e:	08 95       	ret

000014a0 <__fp_mpack>:
    14a0:	9f 3f       	cpi	r25, 0xFF	; 255
    14a2:	31 f0       	breq	.+12     	; 0x14b0 <__fp_mpack_finite+0xc>

000014a4 <__fp_mpack_finite>:
    14a4:	91 50       	subi	r25, 0x01	; 1
    14a6:	20 f4       	brcc	.+8      	; 0x14b0 <__fp_mpack_finite+0xc>
    14a8:	87 95       	ror	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	88 0f       	add	r24, r24
    14b2:	91 1d       	adc	r25, r1
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_powser>:
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	1f 93       	push	r17
    14c2:	0f 93       	push	r16
    14c4:	ff 92       	push	r15
    14c6:	ef 92       	push	r14
    14c8:	df 92       	push	r13
    14ca:	7b 01       	movw	r14, r22
    14cc:	8c 01       	movw	r16, r24
    14ce:	68 94       	set
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <__fp_powser+0x22>
    14d2:	da 2e       	mov	r13, r26
    14d4:	ef 01       	movw	r28, r30
    14d6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    14da:	fe 01       	movw	r30, r28
    14dc:	e8 94       	clt
    14de:	a5 91       	lpm	r26, Z+
    14e0:	25 91       	lpm	r18, Z+
    14e2:	35 91       	lpm	r19, Z+
    14e4:	45 91       	lpm	r20, Z+
    14e6:	55 91       	lpm	r21, Z+
    14e8:	a6 f3       	brts	.-24     	; 0x14d2 <__fp_powser+0x16>
    14ea:	ef 01       	movw	r28, r30
    14ec:	0e 94 7d 07 	call	0xefa	; 0xefa <__addsf3x>
    14f0:	fe 01       	movw	r30, r28
    14f2:	97 01       	movw	r18, r14
    14f4:	a8 01       	movw	r20, r16
    14f6:	da 94       	dec	r13
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <__fp_powser+0x18>
    14fa:	df 90       	pop	r13
    14fc:	ef 90       	pop	r14
    14fe:	ff 90       	pop	r15
    1500:	0f 91       	pop	r16
    1502:	1f 91       	pop	r17
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <inverse>:
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	80 e8       	ldi	r24, 0x80	; 128
    1514:	9f e3       	ldi	r25, 0x3F	; 63
    1516:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__divsf3>
    151a:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    151e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_mpack>

00001522 <ldexp>:
    1522:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_splitA>
    1526:	d8 f3       	brcs	.-10     	; 0x151e <inverse+0x14>
    1528:	99 23       	and	r25, r25
    152a:	c9 f3       	breq	.-14     	; 0x151e <inverse+0x14>
    152c:	94 0f       	add	r25, r20
    152e:	51 1d       	adc	r21, r1
    1530:	a3 f3       	brvs	.-24     	; 0x151a <inverse+0x10>
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	94 f0       	brlt	.+36     	; 0x155c <ldexp+0x3a>
    1538:	59 f0       	breq	.+22     	; 0x1550 <ldexp+0x2e>
    153a:	88 23       	and	r24, r24
    153c:	32 f0       	brmi	.+12     	; 0x154a <ldexp+0x28>
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	91 50       	subi	r25, 0x01	; 1
    1546:	50 40       	sbci	r21, 0x00	; 0
    1548:	c1 f7       	brne	.-16     	; 0x153a <ldexp+0x18>
    154a:	9e 3f       	cpi	r25, 0xFE	; 254
    154c:	51 05       	cpc	r21, r1
    154e:	2c f7       	brge	.-54     	; 0x151a <inverse+0x10>
    1550:	88 0f       	add	r24, r24
    1552:	91 1d       	adc	r25, r1
    1554:	96 95       	lsr	r25
    1556:	87 95       	ror	r24
    1558:	97 f9       	bld	r25, 7
    155a:	08 95       	ret
    155c:	5f 3f       	cpi	r21, 0xFF	; 255
    155e:	ac f0       	brlt	.+42     	; 0x158a <ldexp+0x68>
    1560:	98 3e       	cpi	r25, 0xE8	; 232
    1562:	9c f0       	brlt	.+38     	; 0x158a <ldexp+0x68>
    1564:	bb 27       	eor	r27, r27
    1566:	86 95       	lsr	r24
    1568:	77 95       	ror	r23
    156a:	67 95       	ror	r22
    156c:	b7 95       	ror	r27
    156e:	08 f4       	brcc	.+2      	; 0x1572 <ldexp+0x50>
    1570:	b1 60       	ori	r27, 0x01	; 1
    1572:	93 95       	inc	r25
    1574:	c1 f7       	brne	.-16     	; 0x1566 <ldexp+0x44>
    1576:	bb 0f       	add	r27, r27
    1578:	58 f7       	brcc	.-42     	; 0x1550 <ldexp+0x2e>
    157a:	11 f4       	brne	.+4      	; 0x1580 <ldexp+0x5e>
    157c:	60 ff       	sbrs	r22, 0
    157e:	e8 cf       	rjmp	.-48     	; 0x1550 <ldexp+0x2e>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	e3 cf       	rjmp	.-58     	; 0x1550 <ldexp+0x2e>
    158a:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>

0000158e <modf>:
    158e:	fa 01       	movw	r30, r20
    1590:	dc 01       	movw	r26, r24
    1592:	aa 0f       	add	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	bf 57       	subi	r27, 0x7F	; 127
    159c:	28 f4       	brcc	.+10     	; 0x15a8 <modf+0x1a>
    159e:	22 27       	eor	r18, r18
    15a0:	33 27       	eor	r19, r19
    15a2:	44 27       	eor	r20, r20
    15a4:	50 78       	andi	r21, 0x80	; 128
    15a6:	20 c0       	rjmp	.+64     	; 0x15e8 <modf+0x5a>
    15a8:	b7 51       	subi	r27, 0x17	; 23
    15aa:	90 f4       	brcc	.+36     	; 0x15d0 <modf+0x42>
    15ac:	ab 2f       	mov	r26, r27
    15ae:	00 24       	eor	r0, r0
    15b0:	46 95       	lsr	r20
    15b2:	37 95       	ror	r19
    15b4:	27 95       	ror	r18
    15b6:	01 1c       	adc	r0, r1
    15b8:	a3 95       	inc	r26
    15ba:	d2 f3       	brmi	.-12     	; 0x15b0 <modf+0x22>
    15bc:	00 20       	and	r0, r0
    15be:	71 f0       	breq	.+28     	; 0x15dc <modf+0x4e>
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	44 1f       	adc	r20, r20
    15c6:	b3 95       	inc	r27
    15c8:	da f3       	brmi	.-10     	; 0x15c0 <modf+0x32>
    15ca:	0e d0       	rcall	.+28     	; 0x15e8 <modf+0x5a>
    15cc:	0c 94 65 07 	jmp	0xeca	; 0xeca <__subsf3>
    15d0:	61 30       	cpi	r22, 0x01	; 1
    15d2:	71 05       	cpc	r23, r1
    15d4:	a0 e8       	ldi	r26, 0x80	; 128
    15d6:	8a 07       	cpc	r24, r26
    15d8:	b9 46       	sbci	r27, 0x69	; 105
    15da:	30 f4       	brcc	.+12     	; 0x15e8 <modf+0x5a>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	66 27       	eor	r22, r22
    15e2:	77 27       	eor	r23, r23
    15e4:	88 27       	eor	r24, r24
    15e6:	90 78       	andi	r25, 0x80	; 128
    15e8:	30 96       	adiw	r30, 0x00	; 0
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <modf+0x66>
    15ec:	20 83       	st	Z, r18
    15ee:	31 83       	std	Z+1, r19	; 0x01
    15f0:	42 83       	std	Z+2, r20	; 0x02
    15f2:	53 83       	std	Z+3, r21	; 0x03
    15f4:	08 95       	ret

000015f6 <__udivmodsi4>:
    15f6:	a1 e2       	ldi	r26, 0x21	; 33
    15f8:	1a 2e       	mov	r1, r26
    15fa:	aa 1b       	sub	r26, r26
    15fc:	bb 1b       	sub	r27, r27
    15fe:	fd 01       	movw	r30, r26
    1600:	0d c0       	rjmp	.+26     	; 0x161c <__udivmodsi4_ep>

00001602 <__udivmodsi4_loop>:
    1602:	aa 1f       	adc	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	ee 1f       	adc	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	a2 17       	cp	r26, r18
    160c:	b3 07       	cpc	r27, r19
    160e:	e4 07       	cpc	r30, r20
    1610:	f5 07       	cpc	r31, r21
    1612:	20 f0       	brcs	.+8      	; 0x161c <__udivmodsi4_ep>
    1614:	a2 1b       	sub	r26, r18
    1616:	b3 0b       	sbc	r27, r19
    1618:	e4 0b       	sbc	r30, r20
    161a:	f5 0b       	sbc	r31, r21

0000161c <__udivmodsi4_ep>:
    161c:	66 1f       	adc	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	1a 94       	dec	r1
    1626:	69 f7       	brne	.-38     	; 0x1602 <__udivmodsi4_loop>
    1628:	60 95       	com	r22
    162a:	70 95       	com	r23
    162c:	80 95       	com	r24
    162e:	90 95       	com	r25
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	bd 01       	movw	r22, r26
    1636:	cf 01       	movw	r24, r30
    1638:	08 95       	ret

0000163a <__umulhisi3>:
    163a:	a2 9f       	mul	r26, r18
    163c:	b0 01       	movw	r22, r0
    163e:	b3 9f       	mul	r27, r19
    1640:	c0 01       	movw	r24, r0
    1642:	a3 9f       	mul	r26, r19
    1644:	70 0d       	add	r23, r0
    1646:	81 1d       	adc	r24, r1
    1648:	11 24       	eor	r1, r1
    164a:	91 1d       	adc	r25, r1
    164c:	b2 9f       	mul	r27, r18
    164e:	70 0d       	add	r23, r0
    1650:	81 1d       	adc	r24, r1
    1652:	11 24       	eor	r1, r1
    1654:	91 1d       	adc	r25, r1
    1656:	08 95       	ret

00001658 <__muluhisi3>:
    1658:	0e 94 1d 0b 	call	0x163a	; 0x163a <__umulhisi3>
    165c:	a5 9f       	mul	r26, r21
    165e:	90 0d       	add	r25, r0
    1660:	b4 9f       	mul	r27, r20
    1662:	90 0d       	add	r25, r0
    1664:	a4 9f       	mul	r26, r20
    1666:	80 0d       	add	r24, r0
    1668:	91 1d       	adc	r25, r1
    166a:	11 24       	eor	r1, r1
    166c:	08 95       	ret

0000166e <_exit>:
    166e:	f8 94       	cli

00001670 <__stop_program>:
    1670:	ff cf       	rjmp	.-2      	; 0x1670 <__stop_program>
