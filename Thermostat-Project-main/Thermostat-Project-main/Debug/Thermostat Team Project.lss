
Thermostat Team Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001858  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800094  00800094  00001920  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bdc  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea9  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a0b  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  00007124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e99  00000000  00000000  000078f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e2d  00000000  00000000  00008789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_2>
       c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_3>
      10:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_4>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_15>
      40:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e8 e5       	ldi	r30, 0x58	; 88
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 39       	cpi	r26, 0x94	; 148
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a4 e9       	ldi	r26, 0x94	; 148
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	aa 3a       	cpi	r26, 0xAA	; 170
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <main>
     10c:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <keypad_init>:
#include "keypad.h"

void keypad_init(void)
{
	//Setting rows as outputs
	DIO_SetPinDirection(PORTC,2,OUTPUT);
     114:	41 e0       	ldi	r20, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,3,OUTPUT);
     11e:	41 e0       	ldi	r20, 0x01	; 1
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,4,OUTPUT);
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	//Setting rows initial values to high
	DIO_SetPinValue(PORTC,2,HIGH);
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,3,HIGH);
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,4,HIGH);
     146:	41 e0       	ldi	r20, 0x01	; 1
     148:	64 e0       	ldi	r22, 0x04	; 4
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	//Setting columns as inputs
	DIO_SetPinDirection(PORTC,5,INPUT);
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	65 e0       	ldi	r22, 0x05	; 5
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,6,INPUT);
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	66 e0       	ldi	r22, 0x06	; 6
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,7,INPUT);
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	67 e0       	ldi	r22, 0x07	; 7
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	//Setting columns initial values to high
	DIO_SetPinValue(PORTC,5,HIGH);
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	65 e0       	ldi	r22, 0x05	; 5
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,6,HIGH);
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	66 e0       	ldi	r22, 0x06	; 6
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTC,7,HIGH);
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	67 e0       	ldi	r22, 0x07	; 7
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     18c:	08 95       	ret

0000018e <keypad_scan>:
}

uint8_t keypad_scan(void)
{
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     194:	12 e0       	ldi	r17, 0x02	; 2
	DIO_SetPinValue(PORTC,7,HIGH);
}

uint8_t keypad_scan(void)
{
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
     196:	d1 e3       	ldi	r29, 0x31	; 49
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     198:	28 c0       	rjmp	.+80     	; 0x1ea <keypad_scan+0x5c>
	{
	    DIO_SetPinValue(PORTC,u8_row,LOW);
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	61 2f       	mov	r22, r17
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
		for (u8_column = FIRST_COLUMN ; u8_column <= COLUMNS ; u8_column++)
     1a4:	c5 e0       	ldi	r28, 0x05	; 5
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <keypad_scan+0x4c>
	    {
		    if(LOW == DIO_GetPinValue(PORTC,u8_column))
     1a8:	6c 2f       	mov	r22, r28
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 40 05 	call	0xa80	; 0xa80 <DIO_GetPinValue>
     1b0:	81 11       	cpse	r24, r1
     1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <keypad_scan+0x48>
		    {
				TIMER0_msdelay(40);
     1b4:	88 e2       	ldi	r24, 0x28	; 40
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
				while(LOW == DIO_GetPinValue(PORTC,u8_column));
     1bc:	6c 2f       	mov	r22, r28
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	0e 94 40 05 	call	0xa80	; 0xa80 <DIO_GetPinValue>
     1c4:	88 23       	and	r24, r24
     1c6:	d1 f3       	breq	.-12     	; 0x1bc <keypad_scan+0x2e>
			    DIO_SetPinValue(PORTC,u8_row,HIGH);
     1c8:	41 e0       	ldi	r20, 0x01	; 1
     1ca:	61 2f       	mov	r22, r17
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
			    return u8_button;
     1d2:	8d 2f       	mov	r24, r29
     1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <keypad_scan+0x62>
		    }
		    else
		    {
			    u8_button++;
     1d6:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
	{
	    DIO_SetPinValue(PORTC,u8_row,LOW);
		for (u8_column = FIRST_COLUMN ; u8_column <= COLUMNS ; u8_column++)
     1d8:	cf 5f       	subi	r28, 0xFF	; 255
     1da:	c8 30       	cpi	r28, 0x08	; 8
     1dc:	28 f3       	brcs	.-54     	; 0x1a8 <keypad_scan+0x1a>
		    else
		    {
			    u8_button++;
		    }
	    }
		DIO_SetPinValue(PORTC,u8_row,HIGH);
     1de:	41 e0       	ldi	r20, 0x01	; 1
     1e0:	61 2f       	mov	r22, r17
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>

uint8_t keypad_scan(void)
{
	uint8_t u8_button = ONE, u8_row = FIRST_ROW, u8_column = FIRST_COLUMN;
	
	for ( u8_row = FIRST_ROW ; u8_row <= ROWS ; u8_row++)
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
     1ea:	15 30       	cpi	r17, 0x05	; 5
     1ec:	b0 f2       	brcs	.-84     	; 0x19a <keypad_scan+0xc>
			    u8_button++;
		    }
	    }
		DIO_SetPinValue(PORTC,u8_row,HIGH);
	}
	return NO_BUTTON_PRESSED;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	08 95       	ret

000001f8 <LCD_command>:
	LCD_command(0x0C);
	TIMER0_msdelay(10);                                    
}

void LCD_command(uint8_t u8_command)
{	
     1f8:	cf 93       	push	r28
     1fa:	c8 2f       	mov	r28, r24
	/**************************************************************/ 
	
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER =  (DATA_REGISTER & (0x0F)) |  (u8_command & (0xF0));
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	9c 2f       	mov	r25, r28
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,LOW);
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	63 e0       	ldi	r22, 0x03	; 3
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     21c:	8a e0       	ldi	r24, 0x0A	; 10
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	63 e0       	ldi	r22, 0x03	; 3
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     22e:	8a e0       	ldi	r24, 0x0A	; 10
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_command << 4);
     236:	2b b3       	in	r18, 0x1b	; 27
     238:	30 e1       	ldi	r19, 0x10	; 16
     23a:	c3 9f       	mul	r28, r19
     23c:	c0 01       	movw	r24, r0
     23e:	11 24       	eor	r1, r1
     240:	92 2f       	mov	r25, r18
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	89 2b       	or	r24, r25
     246:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);  /**********************************************************/
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	63 e0       	ldi	r22, 0x03	; 3
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Here we set EN pin to high when reading               */
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	63 e0       	ldi	r22, 0x03	; 3
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
}                                    /**********************************************************/
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <LCD_init>:

#include "LCD.h"

void LCD_init()
{
	TIMER0_msdelay(100);
     270:	84 e6       	ldi	r24, 0x64	; 100
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	/*******************************************************/
	/* Configuring LCD Control and Data pins to be outputs */
	/*******************************************************/
	DIO_SetPinDirection(PORTA,RS,OUTPUT);
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,RW,OUTPUT);
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,EN,OUTPUT);
     28c:	41 e0       	ldi	r20, 0x01	; 1
     28e:	63 e0       	ldi	r22, 0x03	; 3
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D4,OUTPUT);
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	64 e0       	ldi	r22, 0x04	; 4
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D5,OUTPUT);
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	65 e0       	ldi	r22, 0x05	; 5
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D6,OUTPUT);
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D7,OUTPUT);
     2b4:	41 e0       	ldi	r20, 0x01	; 1
     2b6:	67 e0       	ldi	r22, 0x07	; 7
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	//TIMER0_msdelay(100);
	
	/********************/
	/* Initial Commands */
	/********************/    
	LCD_command(0x3);
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2c4:	8a e0       	ldi	r24, 0x0A	; 10
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x3);
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x3);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x2);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2ee:	8a e0       	ldi	r24, 0x0A	; 10
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x20);
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     2fc:	8a e0       	ldi	r24, 0x0A	; 10
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x08);
     304:	88 e0       	ldi	r24, 0x08	; 8
     306:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x01);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x06);
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);
     326:	8a e0       	ldi	r24, 0x0A	; 10
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	LCD_command(0x0C);
     32e:	8c e0       	ldi	r24, 0x0C	; 12
     330:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
	TIMER0_msdelay(10);                                    
     334:	8a e0       	ldi	r24, 0x0A	; 10
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
     33c:	08 95       	ret

0000033e <LCD_data>:
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
}                                    /**********************************************************/

void LCD_data(uint8_t u8_data)
{	
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data & (0xF0));
     342:	8b b3       	in	r24, 0x1b	; 27
     344:	8f 70       	andi	r24, 0x0F	; 15
     346:	9c 2f       	mov	r25, r28
     348:	90 7f       	andi	r25, 0xF0	; 240
     34a:	89 2b       	or	r24, r25
     34c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,HIGH);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	63 e0       	ldi	r22, 0x03	; 3
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     362:	8a e0       	ldi	r24, 0x0A	; 10
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	63 e0       	ldi	r22, 0x03	; 3
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data << 4);
     37c:	2b b3       	in	r18, 0x1b	; 27
     37e:	30 e1       	ldi	r19, 0x10	; 16
     380:	c3 9f       	mul	r28, r19
     382:	c0 01       	movw	r24, r0
     384:	11 24       	eor	r1, r1
     386:	92 2f       	mov	r25, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	89 2b       	or	r24, r25
     38c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10);
     398:	8a e0       	ldi	r24, 0x0A	; 10
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	63 e0       	ldi	r22, 0x03	; 3
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	TIMER0_msdelay(10); 
     3aa:	8a e0       	ldi	r24, 0x0A	; 10
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
}
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <LCD_printString>:

void LCD_printString(uint8_t* stream)
{
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	8c 01       	movw	r16, r24
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <LCD_printString+0x12>
	{
		LCD_data(stream[u8_index]);
     3c2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_data>

void LCD_printString(uint8_t* stream)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	f8 01       	movw	r30, r16
     3ca:	ec 0f       	add	r30, r28
     3cc:	f1 1d       	adc	r31, r1
     3ce:	80 81       	ld	r24, Z
     3d0:	81 11       	cpse	r24, r1
     3d2:	f7 cf       	rjmp	.-18     	; 0x3c2 <LCD_printString+0xc>
	{
		LCD_data(stream[u8_index]);
	}
}
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <LCD_printDigits>:

void LCD_printDigits(uint32_t u32_number)
{	volatile uint8_t  u8_temp;
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	28 97       	sbiw	r28, 0x08	; 8
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t  u8_weight;
	volatile uint8_t  u8_data;
	volatile uint8_t  u8_digits;
	volatile float    f32_temp;
	
	u8_weight = log10(u32_number);
     3f8:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatunsisf>
     3fc:	6b 01       	movw	r12, r22
     3fe:	7c 01       	movw	r14, r24
     400:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <log10>
     404:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     408:	6a 83       	std	Y+2, r22	; 0x02
	u8_digits = (u8_weight + 1);
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	8c 83       	std	Y+4, r24	; 0x04
	u8_temp   = (u32_number / pow(10,u8_weight));
     410:	6a 81       	ldd	r22, Y+2	; 0x02
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatunsisf>
     41c:	9b 01       	movw	r18, r22
     41e:	ac 01       	movw	r20, r24
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	91 e4       	ldi	r25, 0x41	; 65
     428:	0e 94 b9 0a 	call	0x1572	; 0x1572 <pow>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3>
     438:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     43c:	69 83       	std	Y+1, r22	; 0x01
	f32_temp  = ((u32_number*1.0) / pow(10,u8_weight));
     43e:	6a 81       	ldd	r22, Y+2	; 0x02
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatunsisf>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	91 e4       	ldi	r25, 0x41	; 65
     456:	0e 94 b9 0a 	call	0x1572	; 0x1572 <pow>
     45a:	9b 01       	movw	r18, r22
     45c:	ac 01       	movw	r20, r24
     45e:	c7 01       	movw	r24, r14
     460:	b6 01       	movw	r22, r12
     462:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3>
     466:	6d 83       	std	Y+5, r22	; 0x05
     468:	7e 83       	std	Y+6, r23	; 0x06
     46a:	8f 83       	std	Y+7, r24	; 0x07
     46c:	98 87       	std	Y+8, r25	; 0x08
	do
	{
		u8_data  = (u8_temp | (3 << 4));
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	80 63       	ori	r24, 0x30	; 48
     472:	8b 83       	std	Y+3, r24	; 0x03
		LCD_data(u8_data);
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_data>
		u8_digits--;
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	81 50       	subi	r24, 0x01	; 1
     47e:	8c 83       	std	Y+4, r24	; 0x04
		f32_temp = f32_temp - u8_temp;
     480:	cd 80       	ldd	r12, Y+5	; 0x05
     482:	de 80       	ldd	r13, Y+6	; 0x06
     484:	ef 80       	ldd	r14, Y+7	; 0x07
     486:	f8 84       	ldd	r15, Y+8	; 0x08
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatsisf>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	c7 01       	movw	r24, r14
     49a:	b6 01       	movw	r22, r12
     49c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__subsf3>
     4a0:	6d 83       	std	Y+5, r22	; 0x05
     4a2:	7e 83       	std	Y+6, r23	; 0x06
     4a4:	8f 83       	std	Y+7, r24	; 0x07
     4a6:	98 87       	std	Y+8, r25	; 0x08
		u8_temp  = (f32_temp * 10);
     4a8:	6d 81       	ldd	r22, Y+5	; 0x05
     4aa:	7e 81       	ldd	r23, Y+6	; 0x06
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	51 e4       	ldi	r21, 0x41	; 65
     4b8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__mulsf3>
     4bc:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     4c0:	69 83       	std	Y+1, r22	; 0x01
		f32_temp = (f32_temp *(10*1.0));
     4c2:	6d 81       	ldd	r22, Y+5	; 0x05
     4c4:	7e 81       	ldd	r23, Y+6	; 0x06
     4c6:	8f 81       	ldd	r24, Y+7	; 0x07
     4c8:	98 85       	ldd	r25, Y+8	; 0x08
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e2       	ldi	r20, 0x20	; 32
     4d0:	51 e4       	ldi	r21, 0x41	; 65
     4d2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__mulsf3>
     4d6:	6d 83       	std	Y+5, r22	; 0x05
     4d8:	7e 83       	std	Y+6, r23	; 0x06
     4da:	8f 83       	std	Y+7, r24	; 0x07
     4dc:	98 87       	std	Y+8, r25	; 0x08
	} while (u8_digits);
     4de:	8c 81       	ldd	r24, Y+4	; 0x04
     4e0:	81 11       	cpse	r24, r1
     4e2:	c5 cf       	rjmp	.-118    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
}
     4e4:	28 96       	adiw	r28, 0x08	; 8
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <LCD_cursorMove>:

void LCD_cursorMove(uint8_t u8_direction){
	if(LEFT == u8_direction){
     4fe:	80 31       	cpi	r24, 0x10	; 16
     500:	39 f4       	brne	.+14     	; 0x510 <LCD_cursorMove+0x12>
		LCD_command(LEFT);
     502:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
		TIMER0_msdelay(5);
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
     50e:	08 95       	ret
	}
	else if(RIGHT == u8_direction){
     510:	84 31       	cpi	r24, 0x14	; 20
     512:	31 f4       	brne	.+12     	; 0x520 <LCD_cursorMove+0x22>
		LCD_command(RIGHT);
     514:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
		TIMER0_msdelay(5);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
     520:	08 95       	ret

00000522 <Motor_Init>:
{
	Motor_setDirection(MOTOR_ID_01,u8_Motor01Direction);
	Motor_setDirection(MOTOR_ID_02,u8_Motor02Direction);
	return MOTOR_ERROR_OK;

}
     522:	84 31       	cpi	r24, 0x14	; 20
     524:	19 f0       	breq	.+6      	; 0x52c <Motor_Init+0xa>
     526:	85 31       	cpi	r24, 0x15	; 21
     528:	09 f1       	breq	.+66     	; 0x56c <Motor_Init+0x4a>
     52a:	36 c0       	rjmp	.+108    	; 0x598 <Motor_Init+0x76>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	63 e0       	ldi	r22, 0x03	; 3
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
     540:	41 e0       	ldi	r20, 0x01	; 1
     542:	64 e0       	ldi	r22, 0x04	; 4
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	64 e0       	ldi	r22, 0x04	; 4
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	08 95       	ret
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	67 e0       	ldi	r22, 0x07	; 7
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	66 e0       	ldi	r22, 0x06	; 6
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	08 95       	ret
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	08 95       	ret

0000059c <Motor_setDirection>:
     59c:	84 31       	cpi	r24, 0x14	; 20
     59e:	19 f0       	breq	.+6      	; 0x5a6 <Motor_setDirection+0xa>
     5a0:	85 31       	cpi	r24, 0x15	; 21
     5a2:	d9 f0       	breq	.+54     	; 0x5da <Motor_setDirection+0x3e>
     5a4:	34 c0       	rjmp	.+104    	; 0x60e <Motor_setDirection+0x72>
     5a6:	67 31       	cpi	r22, 0x17	; 23
     5a8:	61 f4       	brne	.+24     	; 0x5c2 <Motor_setDirection+0x26>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	08 95       	ret
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	62 e0       	ldi	r22, 0x02	; 2
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	63 e0       	ldi	r22, 0x03	; 3
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	08 95       	ret
     5da:	67 31       	cpi	r22, 0x17	; 23
     5dc:	61 f4       	brne	.+24     	; 0x5f6 <Motor_setDirection+0x5a>
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	66 e0       	ldi	r22, 0x06	; 6
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	67 e0       	ldi	r22, 0x07	; 7
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	08 95       	ret
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	66 e0       	ldi	r22, 0x06	; 6
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	67 e0       	ldi	r22, 0x07	; 7
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	08 95       	ret

00000612 <motorOn>:
uint8_t motorOn(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     612:	84 31       	cpi	r24, 0x14	; 20
     614:	19 f0       	breq	.+6      	; 0x61c <motorOn+0xa>
     616:	85 31       	cpi	r24, 0x15	; 21
     618:	51 f0       	breq	.+20     	; 0x62e <motorOn+0x1c>
     61a:	0d c0       	rjmp	.+26     	; 0x636 <motorOn+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     61c:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, HIGH);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     62e:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			return MOTOR_ERROR_OK;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     636:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     638:	08 95       	ret

0000063a <motorOff>:
uint8_t motorOff(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     63a:	84 31       	cpi	r24, 0x14	; 20
     63c:	19 f0       	breq	.+6      	; 0x644 <motorOff+0xa>
     63e:	85 31       	cpi	r24, 0x15	; 21
     640:	51 f0       	breq	.+20     	; 0x656 <motorOff+0x1c>
     642:	0d c0       	rjmp	.+26     	; 0x65e <motorOff+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     644:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, LOW);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     656:	0e 94 ce 02 	call	0x59c	; 0x59c <Motor_setDirection>
			return MOTOR_ERROR_OK;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     65e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
     660:	08 95       	ret

00000662 <LM35_voidInit>:



void LM35_voidInit(void) 
{
	DIO_SetPinDirection(PORTA,PIN0,INPUT); 
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTA,PIN0,LOW); 
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 b6 04 	call	0x96c	; 0x96c <DIO_SetPinValue>
	ADC_voidInit(); 
     676:	0e 94 ad 03 	call	0x75a	; 0x75a <ADC_voidInit>
	ADC_voidStartConversion();
     67a:	0e 94 de 03 	call	0x7bc	; 0x7bc <ADC_voidStartConversion>
     67e:	08 95       	ret

00000680 <LM35_u8GetTempInC>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <LM35_u8GetTempInC+0xa>
     68a:	1f 92       	push	r1
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     690:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16_AdcResult = u8_LM35_INTIALIZE_VAR ;
     692:	1b 82       	std	Y+3, r1	; 0x03
     694:	1a 82       	std	Y+2, r1	; 0x02
	if(pu8_ReturnAvgTemp!=NULL_POINTER)
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	09 f4       	brne	.+2      	; 0x69c <LM35_u8GetTempInC+0x1c>
     69a:	56 c0       	rjmp	.+172    	; 0x748 <LM35_u8GetTempInC+0xc8>
     69c:	8c 01       	movw	r16, r24
	{
		ADC_u8GetFlagInt(&u8_AdcIntFlag); 
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <ADC_u8GetFlagInt>
		if(u8_AdcIntFlag==u8_ADC_FLAG_RISE )
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	a1 f4       	brne	.+40     	; 0x6d4 <LM35_u8GetTempInC+0x54>
		{
			ADC_u8GetResult(&u16_AdcResult) ;
     6ac:	ce 01       	movw	r24, r28
     6ae:	02 96       	adiw	r24, 0x02	; 2
     6b0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <ADC_u8GetResult>
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			else if(u8_ADC_VREF== u8_ADC_2560mV_INTERNAL_REF)
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
     6b4:	2a 81       	ldd	r18, Y+2	; 0x02
     6b6:	3b 81       	ldd	r19, Y+3	; 0x03
     6b8:	a4 ec       	ldi	r26, 0xC4	; 196
     6ba:	b9 e0       	ldi	r27, 0x09	; 9
     6bc:	0e 94 10 0c 	call	0x1820	; 0x1820 <__umulhisi3>
     6c0:	20 e1       	ldi	r18, 0x10	; 16
     6c2:	37 e2       	ldi	r19, 0x27	; 39
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__udivmodsi4>
     6cc:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <su8_NewTemp3.1638>
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
     6d0:	8d e3       	ldi	r24, 0x3D	; 61
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <LM35_u8GetTempInC+0x56>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     6d4:	8c e3       	ldi	r24, 0x3C	; 60
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
		}
		if(su8_Temp2==u8_LM35_INTIALIZE_VAR)
     6d6:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <su8_Temp2.1637>
     6da:	91 11       	cpse	r25, r1
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <LM35_u8GetTempInC+0x66>
		{
			su8_Temp2 = su8_NewTemp3 ; 
     6de:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <su8_NewTemp3.1638>
     6e2:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <su8_Temp2.1637>
		}
		if(su8_Temp1==u8_LM35_INTIALIZE_VAR)
     6e6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <su8_Temp1.1636>
     6ea:	91 11       	cpse	r25, r1
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <LM35_u8GetTempInC+0x76>
		{
			su8_Temp1 = su8_Temp2 ; 
     6ee:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <su8_Temp2.1637>
     6f2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <su8_Temp1.1636>
		}
		if(su8_Temp4==u8_LM35_INTIALIZE_VAR)
     6f6:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     6fa:	91 11       	cpse	r25, r1
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <LM35_u8GetTempInC+0x86>
		{
			su8_Temp4 = su8_Temp1;
     6fe:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <su8_Temp1.1636>
     702:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
		}
		*pu8_ReturnAvgTemp = (su8_Temp1 + su8_Temp2 + su8_Temp4 + su8_NewTemp3) / u8_LM35_NUM_OF_READINGS ; 
     706:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <su8_Temp1.1636>
     70a:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <su8_Temp2.1637>
     70e:	24 2f       	mov	r18, r20
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	25 0f       	add	r18, r21
     714:	31 1d       	adc	r19, r1
     716:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     71a:	29 0f       	add	r18, r25
     71c:	31 1d       	adc	r19, r1
     71e:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <su8_NewTemp3.1638>
     722:	29 0f       	add	r18, r25
     724:	31 1d       	adc	r19, r1
     726:	33 23       	and	r19, r19
     728:	14 f4       	brge	.+4      	; 0x72e <LM35_u8GetTempInC+0xae>
     72a:	2d 5f       	subi	r18, 0xFD	; 253
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	35 95       	asr	r19
     730:	27 95       	ror	r18
     732:	35 95       	asr	r19
     734:	27 95       	ror	r18
     736:	f8 01       	movw	r30, r16
     738:	20 83       	st	Z, r18
		su8_Temp4 = su8_Temp1 ; 
     73a:	50 93 94 00 	sts	0x0094, r21	; 0x800094 <__data_end>
		su8_Temp1 = su8_Temp2 ;
     73e:	40 93 95 00 	sts	0x0095, r20	; 0x800095 <su8_Temp1.1636>
		su8_Temp2 = su8_NewTemp3; 
     742:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <su8_Temp2.1637>
     746:	01 c0       	rjmp	.+2      	; 0x74a <LM35_u8GetTempInC+0xca>
	}
	else 
	{
		u8_ErrorState = u8_LM35_NOK ;
     748:	8e e3       	ldi	r24, 0x3E	; 62
	}
	return u8_ErrorState ; 
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <ADC_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidSetCallBack(void(*ISRFuncToSet)(void)) 
{
	ADCSetCallBackISR = ISRFuncToSet ;
     75a:	87 b1       	in	r24, 0x07	; 7
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	87 b9       	out	0x07, r24	; 7
     760:	87 b1       	in	r24, 0x07	; 7
     762:	80 64       	ori	r24, 0x40	; 64
     764:	87 b9       	out	0x07, r24	; 7
     766:	87 b1       	in	r24, 0x07	; 7
     768:	8f 7e       	andi	r24, 0xEF	; 239
     76a:	87 b9       	out	0x07, r24	; 7
     76c:	87 b1       	in	r24, 0x07	; 7
     76e:	87 7f       	andi	r24, 0xF7	; 247
     770:	87 b9       	out	0x07, r24	; 7
     772:	87 b1       	in	r24, 0x07	; 7
     774:	8b 7f       	andi	r24, 0xFB	; 251
     776:	87 b9       	out	0x07, r24	; 7
     778:	87 b1       	in	r24, 0x07	; 7
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	87 b9       	out	0x07, r24	; 7
     77e:	87 b1       	in	r24, 0x07	; 7
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	87 b9       	out	0x07, r24	; 7
     784:	86 b1       	in	r24, 0x06	; 6
     786:	80 68       	ori	r24, 0x80	; 128
     788:	86 b9       	out	0x06, r24	; 6
     78a:	86 b1       	in	r24, 0x06	; 6
     78c:	87 7f       	andi	r24, 0xF7	; 247
     78e:	86 b9       	out	0x06, r24	; 6
     790:	86 b1       	in	r24, 0x06	; 6
     792:	80 62       	ori	r24, 0x20	; 32
     794:	86 b9       	out	0x06, r24	; 6
     796:	80 b7       	in	r24, 0x30	; 48
     798:	8f 77       	andi	r24, 0x7F	; 127
     79a:	80 bf       	out	0x30, r24	; 48
     79c:	80 b7       	in	r24, 0x30	; 48
     79e:	8f 7b       	andi	r24, 0xBF	; 191
     7a0:	80 bf       	out	0x30, r24	; 48
     7a2:	80 b7       	in	r24, 0x30	; 48
     7a4:	8f 7d       	andi	r24, 0xDF	; 223
     7a6:	80 bf       	out	0x30, r24	; 48
     7a8:	86 b1       	in	r24, 0x06	; 6
     7aa:	84 60       	ori	r24, 0x04	; 4
     7ac:	86 b9       	out	0x06, r24	; 6
     7ae:	86 b1       	in	r24, 0x06	; 6
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	86 b9       	out	0x06, r24	; 6
     7b4:	86 b1       	in	r24, 0x06	; 6
     7b6:	81 60       	ori	r24, 0x01	; 1
     7b8:	86 b9       	out	0x06, r24	; 6
     7ba:	08 95       	ret

000007bc <ADC_voidStartConversion>:
     7bc:	86 b1       	in	r24, 0x06	; 6
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	86 b9       	out	0x06, r24	; 6
     7c2:	86 b1       	in	r24, 0x06	; 6
     7c4:	80 64       	ori	r24, 0x40	; 64
     7c6:	86 b9       	out	0x06, r24	; 6
     7c8:	08 95       	ret

000007ca <ADC_u8GetFlagInt>:
     7ca:	fc 01       	movw	r30, r24
     7cc:	89 2b       	or	r24, r25
     7ce:	31 f0       	breq	.+12     	; 0x7dc <ADC_u8GetFlagInt+0x12>
     7d0:	96 b1       	in	r25, 0x06	; 6
     7d2:	92 95       	swap	r25
     7d4:	91 70       	andi	r25, 0x01	; 1
     7d6:	90 83       	st	Z, r25
     7d8:	8e e2       	ldi	r24, 0x2E	; 46
     7da:	08 95       	ret
     7dc:	8d e2       	ldi	r24, 0x2D	; 45
     7de:	08 95       	ret

000007e0 <ADC_u8GetResult>:
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	79 f0       	breq	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7e4:	24 b1       	in	r18, 0x04	; 4
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	45 b1       	in	r20, 0x05	; 5
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	54 2f       	mov	r21, r20
     7f4:	44 27       	eor	r20, r20
     7f6:	24 2b       	or	r18, r20
     7f8:	35 2b       	or	r19, r21
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
     7fe:	8e e2       	ldi	r24, 0x2E	; 46
     800:	08 95       	ret
     802:	8d e2       	ldi	r24, 0x2D	; 45
     804:	08 95       	ret

00000806 <__vector_16>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_16 (void)      __attribute__((signal));
void __vector_16 (void)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	if(ADCSetCallBackISR!=NULL_POINTER)
     828:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ADCSetCallBackISR>
     82c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ADCSetCallBackISR+0x1>
     830:	30 97       	sbiw	r30, 0x00	; 0
     832:	09 f0       	breq	.+2      	; 0x836 <__vector_16+0x30>
	{
		ADCSetCallBackISR() ;
     834:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	4f 91       	pop	r20
     84a:	3f 91       	pop	r19
     84c:	2f 91       	pop	r18
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <DIO_SetPinDirection>:
		case PORTD: PORTD_REG=VALUE;break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
			break;
	}//switch
	return au8_errorstate;
}//function
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	31 f1       	breq	.+76     	; 0x8a8 <__stack+0x49>
     85c:	38 f0       	brcs	.+14     	; 0x86c <__stack+0xd>
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
     862:	40 c0       	rjmp	.+128    	; 0x8e4 <__stack+0x85>
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
     868:	5a c0       	rjmp	.+180    	; 0x91e <__stack+0xbf>
     86a:	76 c0       	rjmp	.+236    	; 0x958 <__stack+0xf9>
     86c:	41 11       	cpse	r20, r1
     86e:	0d c0       	rjmp	.+26     	; 0x88a <__stack+0x2b>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	6a 95       	dec	r22
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
     87e:	80 95       	com	r24
     880:	9a b3       	in	r25, 0x1a	; 26
     882:	89 23       	and	r24, r25
     884:	8a bb       	out	0x1a, r24	; 26
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	08 95       	ret
     88a:	41 30       	cpi	r20, 0x01	; 1
     88c:	09 f0       	breq	.+2      	; 0x890 <__stack+0x31>
     88e:	66 c0       	rjmp	.+204    	; 0x95c <__stack+0xfd>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	6a 95       	dec	r22
     89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
     89e:	9a b3       	in	r25, 0x1a	; 26
     8a0:	89 2b       	or	r24, r25
     8a2:	8a bb       	out	0x1a, r24	; 26
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	08 95       	ret
     8a8:	41 11       	cpse	r20, r1
     8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__stack+0x67>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	6a 95       	dec	r22
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	80 95       	com	r24
     8bc:	97 b3       	in	r25, 0x17	; 23
     8be:	89 23       	and	r24, r25
     8c0:	87 bb       	out	0x17, r24	; 23
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	08 95       	ret
     8c6:	41 30       	cpi	r20, 0x01	; 1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__stack+0x6d>
     8ca:	4a c0       	rjmp	.+148    	; 0x960 <__stack+0x101>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	6a 95       	dec	r22
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	97 b3       	in	r25, 0x17	; 23
     8dc:	89 2b       	or	r24, r25
     8de:	87 bb       	out	0x17, r24	; 23
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	08 95       	ret
     8e4:	41 11       	cpse	r20, r1
     8e6:	0d c0       	rjmp	.+26     	; 0x902 <__stack+0xa3>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	6a 95       	dec	r22
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	80 95       	com	r24
     8f8:	94 b3       	in	r25, 0x14	; 20
     8fa:	89 23       	and	r24, r25
     8fc:	84 bb       	out	0x14, r24	; 20
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	08 95       	ret
     902:	41 30       	cpi	r20, 0x01	; 1
     904:	79 f5       	brne	.+94     	; 0x964 <__stack+0x105>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	6a 95       	dec	r22
     912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
     914:	94 b3       	in	r25, 0x14	; 20
     916:	89 2b       	or	r24, r25
     918:	84 bb       	out	0x14, r24	; 20
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	08 95       	ret
     91e:	41 11       	cpse	r20, r1
     920:	0d c0       	rjmp	.+26     	; 0x93c <__stack+0xdd>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	6a 95       	dec	r22
     92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
     930:	80 95       	com	r24
     932:	91 b3       	in	r25, 0x11	; 17
     934:	89 23       	and	r24, r25
     936:	81 bb       	out	0x11, r24	; 17
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	08 95       	ret
     93c:	41 30       	cpi	r20, 0x01	; 1
     93e:	a1 f4       	brne	.+40     	; 0x968 <__stack+0x109>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	6a 95       	dec	r22
     94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
     94e:	91 b3       	in	r25, 0x11	; 17
     950:	89 2b       	or	r24, r25
     952:	81 bb       	out	0x11, r24	; 17
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	08 95       	ret
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	08 95       	ret
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	08 95       	ret
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	08 95       	ret
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	08 95       	ret
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	08 95       	ret

0000096c <DIO_SetPinValue>:
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	31 f1       	breq	.+76     	; 0x9bc <DIO_SetPinValue+0x50>
     970:	38 f0       	brcs	.+14     	; 0x980 <DIO_SetPinValue+0x14>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	09 f4       	brne	.+2      	; 0x978 <DIO_SetPinValue+0xc>
     976:	40 c0       	rjmp	.+128    	; 0x9f8 <DIO_SetPinValue+0x8c>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	09 f4       	brne	.+2      	; 0x97e <DIO_SetPinValue+0x12>
     97c:	5a c0       	rjmp	.+180    	; 0xa32 <DIO_SetPinValue+0xc6>
     97e:	76 c0       	rjmp	.+236    	; 0xa6c <DIO_SetPinValue+0x100>
     980:	41 11       	cpse	r20, r1
     982:	0d c0       	rjmp	.+26     	; 0x99e <DIO_SetPinValue+0x32>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_SetPinValue+0x22>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	6a 95       	dec	r22
     990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_SetPinValue+0x1e>
     992:	80 95       	com	r24
     994:	9b b3       	in	r25, 0x1b	; 27
     996:	89 23       	and	r24, r25
     998:	8b bb       	out	0x1b, r24	; 27
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	08 95       	ret
     99e:	41 30       	cpi	r20, 0x01	; 1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <DIO_SetPinValue+0x38>
     9a2:	66 c0       	rjmp	.+204    	; 0xa70 <DIO_SetPinValue+0x104>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_SetPinValue+0x42>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	6a 95       	dec	r22
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_SetPinValue+0x3e>
     9b2:	9b b3       	in	r25, 0x1b	; 27
     9b4:	89 2b       	or	r24, r25
     9b6:	8b bb       	out	0x1b, r24	; 27
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	08 95       	ret
     9bc:	41 11       	cpse	r20, r1
     9be:	0d c0       	rjmp	.+26     	; 0x9da <DIO_SetPinValue+0x6e>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_SetPinValue+0x5e>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_SetPinValue+0x5a>
     9ce:	80 95       	com	r24
     9d0:	98 b3       	in	r25, 0x18	; 24
     9d2:	89 23       	and	r24, r25
     9d4:	88 bb       	out	0x18, r24	; 24
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	08 95       	ret
     9da:	41 30       	cpi	r20, 0x01	; 1
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <DIO_SetPinValue+0x74>
     9de:	4a c0       	rjmp	.+148    	; 0xa74 <DIO_SetPinValue+0x108>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_SetPinValue+0x7e>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_SetPinValue+0x7a>
     9ee:	98 b3       	in	r25, 0x18	; 24
     9f0:	89 2b       	or	r24, r25
     9f2:	88 bb       	out	0x18, r24	; 24
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	08 95       	ret
     9f8:	41 11       	cpse	r20, r1
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <DIO_SetPinValue+0xaa>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_SetPinValue+0x9a>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	6a 95       	dec	r22
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_SetPinValue+0x96>
     a0a:	80 95       	com	r24
     a0c:	95 b3       	in	r25, 0x15	; 21
     a0e:	89 23       	and	r24, r25
     a10:	85 bb       	out	0x15, r24	; 21
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	08 95       	ret
     a16:	41 30       	cpi	r20, 0x01	; 1
     a18:	79 f5       	brne	.+94     	; 0xa78 <DIO_SetPinValue+0x10c>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_SetPinValue+0xb8>
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	6a 95       	dec	r22
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_SetPinValue+0xb4>
     a28:	95 b3       	in	r25, 0x15	; 21
     a2a:	89 2b       	or	r24, r25
     a2c:	85 bb       	out	0x15, r24	; 21
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	08 95       	ret
     a32:	41 11       	cpse	r20, r1
     a34:	0d c0       	rjmp	.+26     	; 0xa50 <DIO_SetPinValue+0xe4>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <DIO_SetPinValue+0xd4>
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	6a 95       	dec	r22
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <DIO_SetPinValue+0xd0>
     a44:	80 95       	com	r24
     a46:	92 b3       	in	r25, 0x12	; 18
     a48:	89 23       	and	r24, r25
     a4a:	82 bb       	out	0x12, r24	; 18
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	08 95       	ret
     a50:	41 30       	cpi	r20, 0x01	; 1
     a52:	a1 f4       	brne	.+40     	; 0xa7c <DIO_SetPinValue+0x110>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_SetPinValue+0xf2>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	6a 95       	dec	r22
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_SetPinValue+0xee>
     a62:	92 b3       	in	r25, 0x12	; 18
     a64:	89 2b       	or	r24, r25
     a66:	82 bb       	out	0x12, r24	; 18
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	08 95       	ret
     a6c:	85 e0       	ldi	r24, 0x05	; 5
     a6e:	08 95       	ret
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	08 95       	ret
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	08 95       	ret
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	08 95       	ret
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	08 95       	ret

00000a80 <DIO_GetPinValue>:
uint8_t DIO_GetPinValue(uint8_t au8_PORT,uint8_t PIN)
{
	uint8_t PinValue;
	switch(au8_PORT)
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	79 f0       	breq	.+30     	; 0xaa2 <DIO_GetPinValue+0x22>
     a84:	28 f0       	brcs	.+10     	; 0xa90 <DIO_GetPinValue+0x10>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	a9 f0       	breq	.+42     	; 0xab4 <DIO_GetPinValue+0x34>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	e1 f0       	breq	.+56     	; 0xac6 <DIO_GetPinValue+0x46>
     a8e:	24 c0       	rjmp	.+72     	; 0xad8 <DIO_GetPinValue+0x58>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
     a90:	89 b3       	in	r24, 0x19	; 25
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_GetPinValue+0x1a>
     a96:	95 95       	asr	r25
     a98:	87 95       	ror	r24
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_GetPinValue+0x16>
     a9e:	81 70       	andi	r24, 0x01	; 1
     aa0:	08 95       	ret
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
     aa2:	86 b3       	in	r24, 0x16	; 22
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <DIO_GetPinValue+0x2c>
     aa8:	95 95       	asr	r25
     aaa:	87 95       	ror	r24
     aac:	6a 95       	dec	r22
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <DIO_GetPinValue+0x28>
     ab0:	81 70       	andi	r24, 0x01	; 1
     ab2:	08 95       	ret
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
     ab4:	83 b3       	in	r24, 0x13	; 19
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <DIO_GetPinValue+0x3e>
     aba:	95 95       	asr	r25
     abc:	87 95       	ror	r24
     abe:	6a 95       	dec	r22
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <DIO_GetPinValue+0x3a>
     ac2:	81 70       	andi	r24, 0x01	; 1
     ac4:	08 95       	ret
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
     ac6:	80 b3       	in	r24, 0x10	; 16
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <DIO_GetPinValue+0x50>
     acc:	95 95       	asr	r25
     ace:	87 95       	ror	r24
     ad0:	6a 95       	dec	r22
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <DIO_GetPinValue+0x4c>
     ad4:	81 70       	andi	r24, 0x01	; 1
     ad6:	08 95       	ret
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
     ad8:	85 e0       	ldi	r24, 0x05	; 5
			break;
	}//switch
	return PinValue;
}//function
     ada:	08 95       	ret

00000adc <__vector_2>:
	
	External_Int2_Fun();
}*/
/*external interrupt 00 ISR*/
void __vector_2(void)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	External_Int0_Fun();
     afe:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <External_Int0_Fun>
     b02:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <External_Int0_Fun+0x1>
     b06:	09 95       	icall
}
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	bf 91       	pop	r27
     b0e:	af 91       	pop	r26
     b10:	9f 91       	pop	r25
     b12:	8f 91       	pop	r24
     b14:	7f 91       	pop	r23
     b16:	6f 91       	pop	r22
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_3>:
/*external interrupt 01 ISR*/
void __vector_3(void)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	External_Int1_Fun();
     b4c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <External_Int1_Fun>
     b50:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <External_Int1_Fun+0x1>
     b54:	09 95       	icall
}
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <__vector_4>:
/*external interrupt 02 ISR*/
void __vector_4(void)
{
     b78:	1f 92       	push	r1
     b7a:	0f 92       	push	r0
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
	External_Int2_Fun();
     b9a:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <External_Int2_Fun>
     b9e:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <External_Int2_Fun+0x1>
     ba2:	09 95       	icall
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	bf 91       	pop	r27
     baa:	af 91       	pop	r26
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	7f 91       	pop	r23
     bb2:	6f 91       	pop	r22
     bb4:	5f 91       	pop	r21
     bb6:	4f 91       	pop	r20
     bb8:	3f 91       	pop	r19
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <main>:
}genu_ProgState_t;

  extern struct gstr_USART_Config_t gstr_USART_Config;

int main(void)
{	
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	1f 92       	push	r1
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_SensTemperature = INITIAL_VAL;
     bd0:	19 82       	std	Y+1, r1	; 0x01

/**********************************************************************/
/*                       Program Initializations                      */
/**********************************************************************/
	                                                                   /***************************************************/
	LM35_voidInit();                                                   /* 1 - Initialize LM35 Temperature Sensor          */ 
     bd2:	0e 94 31 03 	call	0x662	; 0x662 <LM35_voidInit>
	LCD_init();                                                        /* 2 - Initialize The LCD                          */
     bd6:	0e 94 38 01 	call	0x270	; 0x270 <LCD_init>
	keypad_init();	                                                   /* 3 - Initialize The Keypad                       */
     bda:	0e 94 8a 00 	call	0x114	; 0x114 <keypad_init>
	Motor_Init (MOTOR_ID_01);                                          /* 4 - Initialize The Fan Motor                    */
     bde:	84 e1       	ldi	r24, 0x14	; 20
     be0:	0e 94 91 02 	call	0x522	; 0x522 <Motor_Init>
	DIO_SetPinDirection(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN,INPUT);   /* 5 - Enable PB1 to be used in case switching     */
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinDirection>
	LM35_u8GetTempInC(&u8_SensTemperature);                            /* 6 - Get Current Temperature                     */
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 40 03 	call	0x680	; 0x680 <LM35_u8GetTempInC>
	 USART_voidInit(&gstr_USART_Config);
     bf6:	80 e6       	ldi	r24, 0x60	; 96
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 9a 07 	call	0xf34	; 0xf34 <USART_voidInit>
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
	uint8_t u8_firstTime       = TRUE;
	genu_ProgState_t genu_ProgState = SET_MAX_TEMP;                    /* Initial State; Setting Maximum Temperature */
     bfe:	ff 24       	eor	r15, r15
     c00:	f3 94       	inc	r15
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
	uint8_t u8_firstTime       = TRUE;
     c02:	dd 24       	eor	r13, r13
     c04:	d3 94       	inc	r13
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
	uint8_t u8_userInputSwitch = INITIAL_VAL;
     c06:	10 e0       	ldi	r17, 0x00	; 0
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
	uint8_t	u8_progUserInput   = INITIAL_VAL;
	uint8_t u8_count           = INITIAL_VAL;
     c08:	00 e0       	ldi	r16, 0x00	; 0

int main(void)
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
	uint8_t u8_lowSwitchTemp   = INITIAL_VAL;
     c0a:	c1 2c       	mov	r12, r1
  extern struct gstr_USART_Config_t gstr_USART_Config;

int main(void)
{	
	uint8_t u8_SensTemperature = INITIAL_VAL;
	uint8_t u8_highSwitchTemp  = INITIAL_VAL;
     c0c:	e1 2c       	mov	r14, r1
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <main+0x50>
					motorOff(MOTOR_ID_01,STOP);
				}
				
				if(u8_userInputSwitch == SWITCH_BUTTON_PRESSED)
				{
					genu_ProgState=SET_MAX_TEMP;
     c10:	ff 24       	eor	r15, r15
     c12:	f3 94       	inc	r15
					u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     c14:	10 e0       	ldi	r17, 0x00	; 0
/*                     End of Initializations                         */
/**********************************************************************/

	while (1) 
    {
		if(u8_firstTime == FALSE)
     c16:	d1 10       	cpse	r13, r1
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <main+0x72>
		{
			u8_userInputSwitch = DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN);
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 40 05 	call	0xa80	; 0xa80 <DIO_GetPinValue>
     c22:	18 2f       	mov	r17, r24
			TIMER0_msdelay(DEBOUNCING_DELAY);
     c24:	82 e3       	ldi	r24, 0x32	; 50
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
			while(DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN)==SWITCH_BUTTON_PRESSED);	
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 40 05 	call	0xa80	; 0xa80 <DIO_GetPinValue>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	d1 f3       	breq	.-12     	; 0xc2c <main+0x66>
		}
		
		switch(genu_ProgState)
     c38:	ff 20       	and	r15, r15
     c3a:	21 f0       	breq	.+8      	; 0xc44 <main+0x7e>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	f8 16       	cp	r15, r24
     c40:	11 f1       	breq	.+68     	; 0xc86 <main+0xc0>
     c42:	e9 cf       	rjmp	.-46     	; 0xc16 <main+0x50>
		{	
			case SHOW_CURRENT_TEMP:
				
				LM35_u8GetTempInC(&u8_SensTemperature);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 40 03 	call	0x680	; 0x680 <LM35_u8GetTempInC>
				LCD_printDigits(u8_SensTemperature);
     c4c:	69 81       	ldd	r22, Y+1	; 0x01
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
				LCD_cursorMove(LEFT);
     c58:	80 e1       	ldi	r24, 0x10	; 16
     c5a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_cursorMove>
				LCD_cursorMove(LEFT);
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_cursorMove>
				
				if(u8_SensTemperature >= u8_highSwitchTemp )
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	8e 15       	cp	r24, r14
     c68:	28 f0       	brcs	.+10     	; 0xc74 <main+0xae>
				{
					/* Turn On Fan */
					motorOn(MOTOR_ID_01,FORWARD);
     c6a:	67 e1       	ldi	r22, 0x17	; 23
     c6c:	84 e1       	ldi	r24, 0x14	; 20
     c6e:	0e 94 09 03 	call	0x612	; 0x612 <motorOn>
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <main+0xba>

				}
				else if(u8_SensTemperature <= u8_lowSwitchTemp)
     c74:	c8 16       	cp	r12, r24
     c76:	20 f0       	brcs	.+8      	; 0xc80 <main+0xba>
				{
					/* Turn Off Fan */
					motorOff(MOTOR_ID_01,STOP);
     c78:	69 e1       	ldi	r22, 0x19	; 25
     c7a:	84 e1       	ldi	r24, 0x14	; 20
     c7c:	0e 94 1d 03 	call	0x63a	; 0x63a <motorOff>
				}
				
				if(u8_userInputSwitch == SWITCH_BUTTON_PRESSED)
     c80:	11 30       	cpi	r17, 0x01	; 1
     c82:	49 f6       	brne	.-110    	; 0xc16 <main+0x50>
     c84:	c5 cf       	rjmp	.-118    	; 0xc10 <main+0x4a>
				}
				break;
				
			case SET_MAX_TEMP:
			
				LCD_command(DISPLAY_CLEAR);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
				LCD_printString("SET MAX TEMP:");
     c8c:	8b e6       	ldi	r24, 0x6B	; 107
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
				
				/* Get Input of Max Temperature From User */
				
				while(genu_ProgState == SET_MAX_TEMP )
     c94:	76 c0       	rjmp	.+236    	; 0xd82 <main+0x1bc>
				{
				   	u8_progUserInput=keypad_scan()- ASCII_CONV_FACTOR;
     c96:	0e 94 c7 00 	call	0x18e	; 0x18e <keypad_scan>
     c9a:	10 ed       	ldi	r17, 0xD0	; 208
     c9c:	18 0f       	add	r17, r24
					
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
     c9e:	81 53       	subi	r24, 0x31	; 49
     ca0:	89 30       	cpi	r24, 0x09	; 9
     ca2:	60 f4       	brcc	.+24     	; 0xcbc <main+0xf6>
     ca4:	01 11       	cpse	r16, r1
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <main+0xf6>
					{
						u8_firstTime      = FALSE;
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
     ca8:	61 2f       	mov	r22, r17
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
						u8_highSwitchTemp=u8_progUserInput;
						u8_count++;						
     cb4:	0f 5f       	subi	r16, 0xFF	; 255
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
					{
						u8_firstTime      = FALSE;
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
						u8_highSwitchTemp=u8_progUserInput;
     cb6:	e1 2e       	mov	r14, r17
				{
				   	u8_progUserInput=keypad_scan()- ASCII_CONV_FACTOR;
					
					if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == NO_INPUT)
					{
						u8_firstTime      = FALSE;
     cb8:	d1 2c       	mov	r13, r1
						u8_highSwitchTemp = INITIAL_VAL;
						LCD_printDigits((uint32_t)u8_progUserInput);
						u8_highSwitchTemp=u8_progUserInput;
						u8_count++;						
     cba:	2a c0       	rjmp	.+84     	; 0xd10 <main+0x14a>
					}
					else if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == ONE_DIGIT)
     cbc:	89 30       	cpi	r24, 0x09	; 9
     cbe:	80 f4       	brcc	.+32     	; 0xce0 <main+0x11a>
     cc0:	01 30       	cpi	r16, 0x01	; 1
     cc2:	71 f4       	brne	.+28     	; 0xce0 <main+0x11a>
					{
						LCD_printDigits((uint32_t)u8_progUserInput);
     cc4:	61 2f       	mov	r22, r17
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_printDigits>
						u8_highSwitchTemp  = u8_highSwitchTemp * WEIGHT;
     cd0:	ee 0c       	add	r14, r14
     cd2:	8e 2d       	mov	r24, r14
     cd4:	88 0f       	add	r24, r24
     cd6:	88 0f       	add	r24, r24
     cd8:	e8 0e       	add	r14, r24
						u8_highSwitchTemp += u8_progUserInput;
     cda:	e1 0e       	add	r14, r17
						u8_count++;
     cdc:	0f 5f       	subi	r16, 0xFF	; 255
     cde:	18 c0       	rjmp	.+48     	; 0xd10 <main+0x14a>
					}
					else if(u8_progUserInput > INITIAL_VAL && u8_progUserInput <= MAX_DIGIT && u8_count == TWO_DIGITS)
     ce0:	89 30       	cpi	r24, 0x09	; 9
     ce2:	b0 f4       	brcc	.+44     	; 0xd10 <main+0x14a>
     ce4:	02 30       	cpi	r16, 0x02	; 2
     ce6:	a1 f4       	brne	.+40     	; 0xd10 <main+0x14a>
					{
						
						LCD_command(DISPLAY_CLEAR);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
						LCD_printString("WRONG INPUT!!");
     cee:	89 e7       	ldi	r24, 0x79	; 121
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
						TIMER0_msdelay(ONE_SECOND);
     cf6:	88 ee       	ldi	r24, 0xE8	; 232
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
						LCD_command(DISPLAY_CLEAR);
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
						LCD_printString("SET MAX TEMP:");
     d04:	8b e6       	ldi	r24, 0x6B	; 107
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
						u8_count=INITIAL_VAL;
     d0c:	00 e0       	ldi	r16, 0x00	; 0
						u8_highSwitchTemp=INITIAL_VAL;
     d0e:	e1 2c       	mov	r14, r1
					}
					u8_userInputSwitch=DIO_GetPinValue(SWITCH_BUTTON_PORT,SWITCH_BUTTON_PIN);
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 40 05 	call	0xa80	; 0xa80 <DIO_GetPinValue>
     d18:	18 2f       	mov	r17, r24
					TIMER0_msdelay(DEBOUNCING_DELAY);
     d1a:	82 e3       	ldi	r24, 0x32	; 50
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
					
					if((u8_userInputSwitch == SWITCH_BUTTON_PRESSED) && (u8_firstTime == FALSE))
     d22:	11 30       	cpi	r17, 0x01	; 1
     d24:	71 f5       	brne	.+92     	; 0xd82 <main+0x1bc>
     d26:	d1 10       	cpse	r13, r1
     d28:	2c c0       	rjmp	.+88     	; 0xd82 <main+0x1bc>
					{	
						if(u8_highSwitchTemp < MAX_ALLOWED_TEMP)
     d2a:	87 e2       	ldi	r24, 0x27	; 39
     d2c:	8e 15       	cp	r24, r14
     d2e:	a0 f0       	brcs	.+40     	; 0xd58 <main+0x192>
						{
							motorOff(MOTOR_ID_01,STOP);
     d30:	69 e1       	ldi	r22, 0x19	; 25
     d32:	84 e1       	ldi	r24, 0x14	; 20
     d34:	0e 94 1d 03 	call	0x63a	; 0x63a <motorOff>
							u8_lowSwitchTemp = u8_highSwitchTemp -TOLERANCE;
     d38:	0f 2e       	mov	r0, r31
     d3a:	fd ef       	ldi	r31, 0xFD	; 253
     d3c:	cf 2e       	mov	r12, r31
     d3e:	f0 2d       	mov	r31, r0
     d40:	ce 0c       	add	r12, r14
							LCD_command(DISPLAY_CLEAR);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("Temperature:");
     d48:	87 e8       	ldi	r24, 0x87	; 135
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							genu_ProgState=SHOW_CURRENT_TEMP;
     d50:	f1 2c       	mov	r15, r1
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("SET MAX TEMP:");
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
						}
						u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	00 e0       	ldi	r16, 0x00	; 0
     d56:	15 c0       	rjmp	.+42     	; 0xd82 <main+0x1bc>
							genu_ProgState=SHOW_CURRENT_TEMP;
							u8_count = INITIAL_VAL;
						}
						else
						{
							LCD_command(DISPLAY_CLEAR);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("WRONG INPUT!!");
     d5e:	89 e7       	ldi	r24, 0x79	; 121
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							TIMER0_msdelay(1000);
     d66:	88 ee       	ldi	r24, 0xE8	; 232
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 26 07 	call	0xe4c	; 0xe4c <TIMER0_msdelay>
							LCD_command(DISPLAY_CLEAR);
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_command>
							LCD_printString("SET MAX TEMP:");
     d74:	8b e6       	ldi	r24, 0x6B	; 107
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_printString>
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
						}
						u8_userInputSwitch = SWITCH_BUTTON_NPRESSED;
     d7c:	10 e0       	ldi	r17, 0x00	; 0
						{
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("WRONG INPUT!!");
							TIMER0_msdelay(1000);
							LCD_command(DISPLAY_CLEAR);
							LCD_printString("SET MAX TEMP:");
     d7e:	00 e0       	ldi	r16, 0x00	; 0
							u8_count = INITIAL_VAL;
							u8_highSwitchTemp = INITIAL_VAL;
     d80:	e1 2c       	mov	r14, r1
				LCD_command(DISPLAY_CLEAR);
				LCD_printString("SET MAX TEMP:");
				
				/* Get Input of Max Temperature From User */
				
				while(genu_ProgState == SET_MAX_TEMP )
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	f8 16       	cp	r15, r24
     d86:	09 f4       	brne	.+2      	; 0xd8a <main+0x1c4>
     d88:	86 cf       	rjmp	.-244    	; 0xc96 <main+0xd0>
     d8a:	45 cf       	rjmp	.-374    	; 0xc16 <main+0x50>

00000d8c <__vector_11>:
}

void OCI2_init(void)
{
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	8f 93       	push	r24
     d98:	9f 93       	push	r25
     d9a:	af 93       	push	r26
     d9c:	bf 93       	push	r27
     d9e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <counts>
     da2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <counts+0x1>
     da6:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <counts+0x2>
     daa:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <counts+0x3>
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	a1 1d       	adc	r26, r1
     db2:	b1 1d       	adc	r27, r1
     db4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counts>
     db8:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <counts+0x1>
     dbc:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <counts+0x2>
     dc0:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <counts+0x3>
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <OVI0_init>:
     dd6:	89 b7       	in	r24, 0x39	; 57
     dd8:	81 60       	ori	r24, 0x01	; 1
     dda:	89 bf       	out	0x39, r24	; 57
     ddc:	8f b7       	in	r24, 0x3f	; 63
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	8f bf       	out	0x3f, r24	; 63
     de2:	08 95       	ret

00000de4 <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	91 05       	cpc	r25, r1
     de8:	21 f4       	brne	.+8      	; 0xdf2 <TIMER0_start+0xe>
	{
		Ru8_TCCR0 |= (1<<CS00);
     dea:	83 b7       	in	r24, 0x33	; 51
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	83 bf       	out	0x33, r24	; 51
     df0:	08 95       	ret
	}
	else if (8 == u16_prescale)
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	91 05       	cpc	r25, r1
     df6:	21 f4       	brne	.+8      	; 0xe00 <TIMER0_start+0x1c>
	{
		Ru8_TCCR0 |= (1<<CS01);	
     df8:	83 b7       	in	r24, 0x33	; 51
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	83 bf       	out	0x33, r24	; 51
     dfe:	08 95       	ret
	}
	else if (32 == u16_prescale)
     e00:	80 32       	cpi	r24, 0x20	; 32
     e02:	91 05       	cpc	r25, r1
     e04:	21 f4       	brne	.+8      	; 0xe0e <TIMER0_start+0x2a>
	{
		Ru8_TCCR0 |= (1<<CS01) | (1<<CS00);
     e06:	83 b7       	in	r24, 0x33	; 51
     e08:	83 60       	ori	r24, 0x03	; 3
     e0a:	83 bf       	out	0x33, r24	; 51
     e0c:	08 95       	ret
	}
	else if (64 == u16_prescale)
     e0e:	80 34       	cpi	r24, 0x40	; 64
     e10:	91 05       	cpc	r25, r1
     e12:	21 f4       	brne	.+8      	; 0xe1c <TIMER0_start+0x38>
	{
		Ru8_TCCR0 |= (1<<CS02);
     e14:	83 b7       	in	r24, 0x33	; 51
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	83 bf       	out	0x33, r24	; 51
     e1a:	08 95       	ret
	}
	else if (128 == u16_prescale)
     e1c:	80 38       	cpi	r24, 0x80	; 128
     e1e:	91 05       	cpc	r25, r1
     e20:	21 f4       	brne	.+8      	; 0xe2a <TIMER0_start+0x46>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS00);
     e22:	83 b7       	in	r24, 0x33	; 51
     e24:	85 60       	ori	r24, 0x05	; 5
     e26:	83 bf       	out	0x33, r24	; 51
     e28:	08 95       	ret
	}
	else if (256 == u16_prescale)
     e2a:	81 15       	cp	r24, r1
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	92 07       	cpc	r25, r18
     e30:	21 f4       	brne	.+8      	; 0xe3a <TIMER0_start+0x56>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01);
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	86 60       	ori	r24, 0x06	; 6
     e36:	83 bf       	out	0x33, r24	; 51
     e38:	08 95       	ret
	}
	else if (1024 == u16_prescale)
     e3a:	81 15       	cp	r24, r1
     e3c:	94 40       	sbci	r25, 0x04	; 4
     e3e:	19 f4       	brne	.+6      	; 0xe46 <TIMER0_start+0x62>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
     e40:	83 b7       	in	r24, 0x33	; 51
     e42:	87 60       	ori	r24, 0x07	; 7
     e44:	83 bf       	out	0x33, r24	; 51
     e46:	08 95       	ret

00000e48 <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	Ru8_TCCR0 = 0;
     e48:	13 be       	out	0x33, r1	; 51
     e4a:	08 95       	ret

00000e4c <TIMER0_msdelay>:
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <TIMER0_msdelay+0xe>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <TIMER0_msdelay+0x10>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <TIMER0_msdelay+0x12>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
     e62:	bc 01       	movw	r22, r24
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatunsisf>
     e6c:	2f e6       	ldi	r18, 0x6F	; 111
     e6e:	32 e1       	ldi	r19, 0x12	; 18
     e70:	43 e8       	ldi	r20, 0x83	; 131
     e72:	5a e3       	ldi	r21, 0x3A	; 58
     e74:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	53 e4       	ldi	r21, 0x43	; 67
     e84:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3>
     e88:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     e8c:	69 83       	std	Y+1, r22	; 0x01
     e8e:	7a 83       	std	Y+2, r23	; 0x02
     e90:	8b 83       	std	Y+3, r24	; 0x03
     e92:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
     e94:	29 81       	ldd	r18, Y+1	; 0x01
     e96:	3a 81       	ldd	r19, Y+2	; 0x02
     e98:	4b 81       	ldd	r20, Y+3	; 0x03
     e9a:	5c 81       	ldd	r21, Y+4	; 0x04
     e9c:	af ef       	ldi	r26, 0xFF	; 255
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	0e 94 1f 0c 	call	0x183e	; 0x183e <__muluhisi3>
     ea4:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatunsisf>
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__subsf3>
     eb4:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     eb8:	7e 83       	std	Y+6, r23	; 0x06
     eba:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init();                                         //Enabling system interrupt and flag for overflow int timer 0
     ebc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <OVI0_init>
	TIMER0_start(8);                                     //Prescaler of one that yields 8MHz frequency
     ec0:	88 e0       	ldi	r24, 0x08	; 8
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 f2 06 	call	0xde4	; 0xde4 <TIMER0_start>
	while (counts < ticks)
     ec8:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <counts>
     ecc:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <counts+0x1>
     ed0:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <counts+0x2>
     ed4:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <counts+0x3>
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	ab 81       	ldd	r26, Y+3	; 0x03
     ede:	bc 81       	ldd	r27, Y+4	; 0x04
     ee0:	48 17       	cp	r20, r24
     ee2:	59 07       	cpc	r21, r25
     ee4:	6a 07       	cpc	r22, r26
     ee6:	7b 07       	cpc	r23, r27
     ee8:	78 f3       	brcs	.-34     	; 0xec8 <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	Ru8_TCNT0 = (255-remainder);                      //Compensation of ticks remaining fraction to increase accuracy
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	80 95       	com	r24
     ef0:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
     ef2:	0e 94 24 07 	call	0xe48	; 0xe48 <TIMER0_stop>
	counts = 0; 
     ef6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counts>
     efa:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <counts+0x1>
     efe:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <counts+0x2>
     f02:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <counts+0x3>
}
     f06:	26 96       	adiw	r28, 0x06	; 6
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	08 95       	ret

00000f20 <USART_RX_Int_CallBack_fun>:
	*Byte_Address=UART_UART_BUFFER_REG;
}
void USART_RX_Int_CallBack_fun(void (*ptr_To_Fun)(void))
{
	
	ptr_To_RX_Int_fun=ptr_To_Fun;
     f20:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <ptr_To_RX_Int_fun+0x1>
     f24:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <ptr_To_RX_Int_fun>
     f28:	08 95       	ret

00000f2a <USART_TX_Int_CallBack_fun>:

	
}
void USART_TX_Int_CallBack_fun(void (*ptr_To_Fun)(void)){
	
	ptr_To_TX_Int_fun=ptr_To_Fun;
     f2a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <ptr_To_TX_Int_fun+0x1>
     f2e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <ptr_To_TX_Int_fun>
     f32:	08 95       	ret

00000f34 <USART_voidInit>:
uint16_t  MYUBRR=0;
void (*ptr_To_TX_Int_fun)(void)=NULL;
void (*ptr_To_RX_Int_fun)(void)=NULL;

void USART_voidInit(struct gstr_USART_Config_t *USART_PRE_CONFIGRATION)
{
     f34:	fc 01       	movw	r30, r24
	
/*****************************************************USART BAUD RATE****************************************************************/

	if(USART_PRE_CONFIGRATION->SYNCH_MODE== USART_ASYNCH_MODE && USART_PRE_CONFIGRATION->SPEED_MODE== USART_NORMAL_SPEED){
     f36:	80 81       	ld	r24, Z
     f38:	81 11       	cpse	r24, r1
     f3a:	0a c0       	rjmp	.+20     	; 0xf50 <USART_voidInit+0x1c>
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	91 11       	cpse	r25, r1
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <USART_voidInit+0x1c>
		MYUBRR   = (uint16_t)  (((F_CPU / (  BUAD_RATE* 16UL))) - 1);
     f42:	83 e3       	ldi	r24, 0x33	; 51
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <MYUBRR+0x1>
     f4a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <MYUBRR>
     f4e:	14 c0       	rjmp	.+40     	; 0xf78 <USART_voidInit+0x44>
	}
   else if(	USART_PRE_CONFIGRATION->SYNCH_MODE== USART_ASYNCH_MODE && USART_PRE_CONFIGRATION->SPEED_MODE== USART_DOUBLE_SPEED){
     f50:	81 11       	cpse	r24, r1
     f52:	0a c0       	rjmp	.+20     	; 0xf68 <USART_voidInit+0x34>
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	91 30       	cpi	r25, 0x01	; 1
     f58:	39 f4       	brne	.+14     	; 0xf68 <USART_voidInit+0x34>
	   
       MYUBRR   = (uint16_t)  (((F_CPU / (  BUAD_RATE* 8UL))) - 1);
     f5a:	87 e6       	ldi	r24, 0x67	; 103
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <MYUBRR+0x1>
     f62:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <MYUBRR>
     f66:	08 c0       	rjmp	.+16     	; 0xf78 <USART_voidInit+0x44>
	}
   else if(	USART_PRE_CONFIGRATION->SYNCH_MODE== USART_SYNCH_MODE ){
     f68:	80 34       	cpi	r24, 0x40	; 64
     f6a:	31 f4       	brne	.+12     	; 0xf78 <USART_voidInit+0x44>
	MYUBRR   = (uint16_t) (((F_CPU / (  BUAD_RATE* 2UL))) - 1);   
     f6c:	8f e9       	ldi	r24, 0x9F	; 159
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <MYUBRR+0x1>
     f74:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <MYUBRR>
   }
   	   UART_BUAD_RATE_REG_LOW_value=(uint8_t)(MYUBRR);
     f78:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <MYUBRR>
     f7c:	89 b9       	out	0x09, r24	; 9
   	   UART_BUAD_RATE_REG_HIGH_value=(uint8_t)(MYUBRR>>8);
     f7e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <MYUBRR+0x1>
     f82:	80 bd       	out	0x20, r24	; 32
   /**************************************USART ENABLE RX & TX******************************************************/


    if(USART_PRE_CONFIGRATION->TX_==USART_TX_ENABLE)
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	21 f4       	brne	.+8      	; 0xf92 <USART_voidInit+0x5e>
	{
		SET_BIT(UART_COTR_STATUS_REGB,TXEN);
     f8a:	8a b1       	in	r24, 0x0a	; 10
     f8c:	88 60       	ori	r24, 0x08	; 8
     f8e:	8a b9       	out	0x0a, r24	; 10
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <USART_voidInit+0x68>
	}
	else if(USART_PRE_CONFIGRATION->TX_==USART_TX_DISABLE)
     f92:	81 11       	cpse	r24, r1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <USART_voidInit+0x68>
	{
	  CLR_BIT(UART_COTR_STATUS_REGB, TXEN);
     f96:	8a b1       	in	r24, 0x0a	; 10
     f98:	87 7f       	andi	r24, 0xF7	; 247
     f9a:	8a b9       	out	0x0a, r24	; 10
	}
	if(USART_PRE_CONFIGRATION->RX_==USART_RX_ENABLE)
     f9c:	83 81       	ldd	r24, Z+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	21 f4       	brne	.+8      	; 0xfaa <USART_voidInit+0x76>
	{
		SET_BIT(UART_COTR_STATUS_REGB,RXEN);
     fa2:	8a b1       	in	r24, 0x0a	; 10
     fa4:	80 61       	ori	r24, 0x10	; 16
     fa6:	8a b9       	out	0x0a, r24	; 10
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <USART_voidInit+0x82>
	}
	else if(USART_PRE_CONFIGRATION->TX_==USART_TX_DISABLE)
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	81 11       	cpse	r24, r1
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <USART_voidInit+0x82>
	{
		 CLR_BIT(UART_COTR_STATUS_REGB, RXEN);
     fb0:	8a b1       	in	r24, 0x0a	; 10
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	8a b9       	out	0x0a, r24	; 10
	}
	/*******************************************USART DATA FORMAT CHAR SIZE ***********************************************/

   if(USART_PRE_CONFIGRATION->CHAR_SIZE==USART_DATA_FORMAT_8BIT_MODE)
     fb6:	84 81       	ldd	r24, Z+4	; 0x04
     fb8:	86 30       	cpi	r24, 0x06	; 6
     fba:	21 f4       	brne	.+8      	; 0xfc4 <USART_voidInit+0x90>
   {
	   UART_COTR_STATUS_REGC |=USART_DATA_FORMAT_8BIT_MODE |(1 << URSEL);
     fbc:	80 b5       	in	r24, 0x20	; 32
     fbe:	86 68       	ori	r24, 0x86	; 134
     fc0:	80 bd       	out	0x20, r24	; 32
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <USART_voidInit+0x9a>
   }
   else if(USART_PRE_CONFIGRATION->CHAR_SIZE==USART_DATA_FORMAT_7BIT_MODE)
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	19 f4       	brne	.+6      	; 0xfce <USART_voidInit+0x9a>
   {
	   UART_COTR_STATUS_REGC |=USART_DATA_FORMAT_8BIT_MODE;
     fc8:	80 b5       	in	r24, 0x20	; 32
     fca:	86 60       	ori	r24, 0x06	; 6
     fcc:	80 bd       	out	0x20, r24	; 32

   }
   /*******************************************USART TX & RX INTERUUPT ENABLE OR DISABLE **************************************/
   
    if(USART_PRE_CONFIGRATION->RX_INTERRUPT==USART_RX_INTERRUPT_ENABLE){
     fce:	81 85       	ldd	r24, Z+9	; 0x09
     fd0:	80 38       	cpi	r24, 0x80	; 128
     fd2:	21 f4       	brne	.+8      	; 0xfdc <USART_voidInit+0xa8>
	    UART_COTR_STATUS_REGB |= (1<<RXCIE);
     fd4:	8a b1       	in	r24, 0x0a	; 10
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8a b9       	out	0x0a, r24	; 10
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <USART_voidInit+0xb2>
    }
    else if(USART_PRE_CONFIGRATION->RX_INTERRUPT==USART_RX_INTERRUPT_DISABLE){
     fdc:	81 11       	cpse	r24, r1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <USART_voidInit+0xb2>
		CLR_BIT(UART_COTR_STATUS_REGB,RXCIE);
     fe0:	8a b1       	in	r24, 0x0a	; 10
     fe2:	8f 77       	andi	r24, 0x7F	; 127
     fe4:	8a b9       	out	0x0a, r24	; 10
    }
	{
		
	}
	if(USART_PRE_CONFIGRATION->TX_INTERRUPT==USART_TX_INTERRUPT_ENABLE){
     fe6:	80 85       	ldd	r24, Z+8	; 0x08
     fe8:	80 34       	cpi	r24, 0x40	; 64
     fea:	21 f4       	brne	.+8      	; 0xff4 <USART_voidInit+0xc0>
		UART_COTR_STATUS_REGB |= (1<<TXCIE);
     fec:	8a b1       	in	r24, 0x0a	; 10
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	8a b9       	out	0x0a, r24	; 10
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <USART_voidInit+0xca>

	}
	else if(USART_PRE_CONFIGRATION->TX_INTERRUPT==USART_TX_INTERRUPT_DISABLE){
     ff4:	81 11       	cpse	r24, r1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <USART_voidInit+0xca>
		CLR_BIT(UART_COTR_STATUS_REGB,TXCIE);
     ff8:	8a b1       	in	r24, 0x0a	; 10
     ffa:	8f 7b       	andi	r24, 0xBF	; 191
     ffc:	8a b9       	out	0x0a, r24	; 10
	}
	else
	{
		
	}
   USART_RX_Int_CallBack_fun(USART_RX_ISR);
     ffe:	86 e5       	ldi	r24, 0x56	; 86
    1000:	98 e0       	ldi	r25, 0x08	; 8
    1002:	0e 94 90 07 	call	0xf20	; 0xf20 <USART_RX_Int_CallBack_fun>
   USART_TX_Int_CallBack_fun(USART_TX_ISR);
    1006:	87 e5       	ldi	r24, 0x57	; 87
    1008:	98 e0       	ldi	r25, 0x08	; 8
    100a:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_TX_Int_CallBack_fun>
    100e:	08 95       	ret

00001010 <__vector_13>:
	ptr_To_TX_Int_fun=ptr_To_Fun;
	
}
/*RX ISR*/
void __vector_13(void)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	ptr_To_RX_Int_fun();
    1032:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <ptr_To_RX_Int_fun>
    1036:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <ptr_To_RX_Int_fun+0x1>
    103a:	09 95       	icall
}
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_15>:
/*TX ISR*/
void __vector_15(void)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	ptr_To_TX_Int_fun();
    1080:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <ptr_To_TX_Int_fun>
    1084:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <ptr_To_TX_Int_fun+0x1>
    1088:	09 95       	icall
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <USART_RX_ISR>:
													.STOP_BITS_NUM=USART_1_STOP_BIT             ,
													.TX_INTERRUPT=USART_TX_INTERRUPT_ENABLE    ,
													.RX_INTERRUPT=USART_RX_INTERRUPT_ENABLE    ,
													.UDR_INTERRUPT=USART_UDR_INTERRUPT_DISABLE  };
void USART_RX_ISR(void)
{
    10ac:	08 95       	ret

000010ae <USART_TX_ISR>:
	/*Write your ISR here*/
}
void USART_TX_ISR(void)
{
    10ae:	08 95       	ret

000010b0 <__subsf3>:
    10b0:	50 58       	subi	r21, 0x80	; 128

000010b2 <__addsf3>:
    10b2:	bb 27       	eor	r27, r27
    10b4:	aa 27       	eor	r26, r26
    10b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
    10ba:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    10be:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <__addsf3+0x20>
    10c4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__addsf3+0x20>
    10ca:	39 f4       	brne	.+14     	; 0x10da <__addsf3+0x28>
    10cc:	9f 3f       	cpi	r25, 0xFF	; 255
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <__addsf3+0x24>
    10d0:	26 f4       	brtc	.+8      	; 0x10da <__addsf3+0x28>
    10d2:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    10d6:	0e f4       	brtc	.+2      	; 0x10da <__addsf3+0x28>
    10d8:	e0 95       	com	r30
    10da:	e7 fb       	bst	r30, 7
    10dc:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>

000010e0 <__addsf3x>:
    10e0:	e9 2f       	mov	r30, r25
    10e2:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    10e6:	58 f3       	brcs	.-42     	; 0x10be <__addsf3+0xc>
    10e8:	ba 17       	cp	r27, r26
    10ea:	62 07       	cpc	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	95 07       	cpc	r25, r21
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__addsf3x+0x1c>
    10f4:	79 f4       	brne	.+30     	; 0x1114 <__addsf3x+0x34>
    10f6:	a6 f5       	brtc	.+104    	; 0x1160 <__addsf3x+0x80>
    10f8:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_zero>
    10fc:	0e f4       	brtc	.+2      	; 0x1100 <__addsf3x+0x20>
    10fe:	e0 95       	com	r30
    1100:	0b 2e       	mov	r0, r27
    1102:	ba 2f       	mov	r27, r26
    1104:	a0 2d       	mov	r26, r0
    1106:	0b 01       	movw	r0, r22
    1108:	b9 01       	movw	r22, r18
    110a:	90 01       	movw	r18, r0
    110c:	0c 01       	movw	r0, r24
    110e:	ca 01       	movw	r24, r20
    1110:	a0 01       	movw	r20, r0
    1112:	11 24       	eor	r1, r1
    1114:	ff 27       	eor	r31, r31
    1116:	59 1b       	sub	r21, r25
    1118:	99 f0       	breq	.+38     	; 0x1140 <__addsf3x+0x60>
    111a:	59 3f       	cpi	r21, 0xF9	; 249
    111c:	50 f4       	brcc	.+20     	; 0x1132 <__addsf3x+0x52>
    111e:	50 3e       	cpi	r21, 0xE0	; 224
    1120:	68 f1       	brcs	.+90     	; 0x117c <__addsf3x+0x9c>
    1122:	1a 16       	cp	r1, r26
    1124:	f0 40       	sbci	r31, 0x00	; 0
    1126:	a2 2f       	mov	r26, r18
    1128:	23 2f       	mov	r18, r19
    112a:	34 2f       	mov	r19, r20
    112c:	44 27       	eor	r20, r20
    112e:	58 5f       	subi	r21, 0xF8	; 248
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <__addsf3x+0x38>
    1132:	46 95       	lsr	r20
    1134:	37 95       	ror	r19
    1136:	27 95       	ror	r18
    1138:	a7 95       	ror	r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	53 95       	inc	r21
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__addsf3x+0x52>
    1140:	7e f4       	brtc	.+30     	; 0x1160 <__addsf3x+0x80>
    1142:	1f 16       	cp	r1, r31
    1144:	ba 0b       	sbc	r27, r26
    1146:	62 0b       	sbc	r22, r18
    1148:	73 0b       	sbc	r23, r19
    114a:	84 0b       	sbc	r24, r20
    114c:	ba f0       	brmi	.+46     	; 0x117c <__addsf3x+0x9c>
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	a1 f0       	breq	.+40     	; 0x117a <__addsf3x+0x9a>
    1152:	ff 0f       	add	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	c2 f7       	brpl	.-16     	; 0x114e <__addsf3x+0x6e>
    115e:	0e c0       	rjmp	.+28     	; 0x117c <__addsf3x+0x9c>
    1160:	ba 0f       	add	r27, r26
    1162:	62 1f       	adc	r22, r18
    1164:	73 1f       	adc	r23, r19
    1166:	84 1f       	adc	r24, r20
    1168:	48 f4       	brcc	.+18     	; 0x117c <__addsf3x+0x9c>
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f7 95       	ror	r31
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	08 f0       	brcs	.+2      	; 0x117a <__addsf3x+0x9a>
    1178:	b0 cf       	rjmp	.-160    	; 0x10da <__addsf3+0x28>
    117a:	93 95       	inc	r25
    117c:	88 0f       	add	r24, r24
    117e:	08 f0       	brcs	.+2      	; 0x1182 <__addsf3x+0xa2>
    1180:	99 27       	eor	r25, r25
    1182:	ee 0f       	add	r30, r30
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	08 95       	ret

0000118a <__divsf3>:
    118a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__divsf3x>
    118e:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    1192:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    1196:	58 f0       	brcs	.+22     	; 0x11ae <__divsf3+0x24>
    1198:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    119c:	40 f0       	brcs	.+16     	; 0x11ae <__divsf3+0x24>
    119e:	29 f4       	brne	.+10     	; 0x11aa <__divsf3+0x20>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__divsf3+0x24>
    11a4:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    11a8:	51 11       	cpse	r21, r1
    11aa:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    11ae:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>

000011b2 <__divsf3x>:
    11b2:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    11b6:	68 f3       	brcs	.-38     	; 0x1192 <__divsf3+0x8>

000011b8 <__divsf3_pse>:
    11b8:	99 23       	and	r25, r25
    11ba:	b1 f3       	breq	.-20     	; 0x11a8 <__divsf3+0x1e>
    11bc:	55 23       	and	r21, r21
    11be:	91 f3       	breq	.-28     	; 0x11a4 <__divsf3+0x1a>
    11c0:	95 1b       	sub	r25, r21
    11c2:	55 0b       	sbc	r21, r21
    11c4:	bb 27       	eor	r27, r27
    11c6:	aa 27       	eor	r26, r26
    11c8:	62 17       	cp	r22, r18
    11ca:	73 07       	cpc	r23, r19
    11cc:	84 07       	cpc	r24, r20
    11ce:	38 f0       	brcs	.+14     	; 0x11de <__divsf3_pse+0x26>
    11d0:	9f 5f       	subi	r25, 0xFF	; 255
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	22 0f       	add	r18, r18
    11d6:	33 1f       	adc	r19, r19
    11d8:	44 1f       	adc	r20, r20
    11da:	aa 1f       	adc	r26, r26
    11dc:	a9 f3       	breq	.-22     	; 0x11c8 <__divsf3_pse+0x10>
    11de:	35 d0       	rcall	.+106    	; 0x124a <__divsf3_pse+0x92>
    11e0:	0e 2e       	mov	r0, r30
    11e2:	3a f0       	brmi	.+14     	; 0x11f2 <__divsf3_pse+0x3a>
    11e4:	e0 e8       	ldi	r30, 0x80	; 128
    11e6:	32 d0       	rcall	.+100    	; 0x124c <__divsf3_pse+0x94>
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	e6 95       	lsr	r30
    11ee:	00 1c       	adc	r0, r0
    11f0:	ca f7       	brpl	.-14     	; 0x11e4 <__divsf3_pse+0x2c>
    11f2:	2b d0       	rcall	.+86     	; 0x124a <__divsf3_pse+0x92>
    11f4:	fe 2f       	mov	r31, r30
    11f6:	29 d0       	rcall	.+82     	; 0x124a <__divsf3_pse+0x92>
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	bb 1f       	adc	r27, r27
    1200:	26 17       	cp	r18, r22
    1202:	37 07       	cpc	r19, r23
    1204:	48 07       	cpc	r20, r24
    1206:	ab 07       	cpc	r26, r27
    1208:	b0 e8       	ldi	r27, 0x80	; 128
    120a:	09 f0       	breq	.+2      	; 0x120e <__divsf3_pse+0x56>
    120c:	bb 0b       	sbc	r27, r27
    120e:	80 2d       	mov	r24, r0
    1210:	bf 01       	movw	r22, r30
    1212:	ff 27       	eor	r31, r31
    1214:	93 58       	subi	r25, 0x83	; 131
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	3a f0       	brmi	.+14     	; 0x1228 <__divsf3_pse+0x70>
    121a:	9e 3f       	cpi	r25, 0xFE	; 254
    121c:	51 05       	cpc	r21, r1
    121e:	78 f0       	brcs	.+30     	; 0x123e <__divsf3_pse+0x86>
    1220:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1224:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	e4 f3       	brlt	.-8      	; 0x1224 <__divsf3_pse+0x6c>
    122c:	98 3e       	cpi	r25, 0xE8	; 232
    122e:	d4 f3       	brlt	.-12     	; 0x1224 <__divsf3_pse+0x6c>
    1230:	86 95       	lsr	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f7 95       	ror	r31
    123a:	9f 5f       	subi	r25, 0xFF	; 255
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__divsf3_pse+0x78>
    123e:	88 0f       	add	r24, r24
    1240:	91 1d       	adc	r25, r1
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret
    124a:	e1 e0       	ldi	r30, 0x01	; 1
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	bb 1f       	adc	r27, r27
    1254:	62 17       	cp	r22, r18
    1256:	73 07       	cpc	r23, r19
    1258:	84 07       	cpc	r24, r20
    125a:	ba 07       	cpc	r27, r26
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__divsf3_pse+0xae>
    125e:	62 1b       	sub	r22, r18
    1260:	73 0b       	sbc	r23, r19
    1262:	84 0b       	sbc	r24, r20
    1264:	ba 0b       	sbc	r27, r26
    1266:	ee 1f       	adc	r30, r30
    1268:	88 f7       	brcc	.-30     	; 0x124c <__divsf3_pse+0x94>
    126a:	e0 95       	com	r30
    126c:	08 95       	ret

0000126e <__fixunssfsi>:
    126e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_splitA>
    1272:	88 f0       	brcs	.+34     	; 0x1296 <__fixunssfsi+0x28>
    1274:	9f 57       	subi	r25, 0x7F	; 127
    1276:	98 f0       	brcs	.+38     	; 0x129e <__fixunssfsi+0x30>
    1278:	b9 2f       	mov	r27, r25
    127a:	99 27       	eor	r25, r25
    127c:	b7 51       	subi	r27, 0x17	; 23
    127e:	b0 f0       	brcs	.+44     	; 0x12ac <__fixunssfsi+0x3e>
    1280:	e1 f0       	breq	.+56     	; 0x12ba <__fixunssfsi+0x4c>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	1a f0       	brmi	.+6      	; 0x1292 <__fixunssfsi+0x24>
    128c:	ba 95       	dec	r27
    128e:	c9 f7       	brne	.-14     	; 0x1282 <__fixunssfsi+0x14>
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <__fixunssfsi+0x4c>
    1292:	b1 30       	cpi	r27, 0x01	; 1
    1294:	91 f0       	breq	.+36     	; 0x12ba <__fixunssfsi+0x4c>
    1296:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_zero>
    129a:	b1 e0       	ldi	r27, 0x01	; 1
    129c:	08 95       	ret
    129e:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_zero>
    12a2:	67 2f       	mov	r22, r23
    12a4:	78 2f       	mov	r23, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	b8 5f       	subi	r27, 0xF8	; 248
    12aa:	39 f0       	breq	.+14     	; 0x12ba <__fixunssfsi+0x4c>
    12ac:	b9 3f       	cpi	r27, 0xF9	; 249
    12ae:	cc f3       	brlt	.-14     	; 0x12a2 <__fixunssfsi+0x34>
    12b0:	86 95       	lsr	r24
    12b2:	77 95       	ror	r23
    12b4:	67 95       	ror	r22
    12b6:	b3 95       	inc	r27
    12b8:	d9 f7       	brne	.-10     	; 0x12b0 <__fixunssfsi+0x42>
    12ba:	3e f4       	brtc	.+14     	; 0x12ca <__fixunssfsi+0x5c>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	08 95       	ret

000012cc <__floatunsisf>:
    12cc:	e8 94       	clt
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <__floatsisf+0x12>

000012d0 <__floatsisf>:
    12d0:	97 fb       	bst	r25, 7
    12d2:	3e f4       	brtc	.+14     	; 0x12e2 <__floatsisf+0x12>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	99 23       	and	r25, r25
    12e4:	a9 f0       	breq	.+42     	; 0x1310 <__floatsisf+0x40>
    12e6:	f9 2f       	mov	r31, r25
    12e8:	96 e9       	ldi	r25, 0x96	; 150
    12ea:	bb 27       	eor	r27, r27
    12ec:	93 95       	inc	r25
    12ee:	f6 95       	lsr	r31
    12f0:	87 95       	ror	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	b7 95       	ror	r27
    12f8:	f1 11       	cpse	r31, r1
    12fa:	f8 cf       	rjmp	.-16     	; 0x12ec <__floatsisf+0x1c>
    12fc:	fa f4       	brpl	.+62     	; 0x133c <__floatsisf+0x6c>
    12fe:	bb 0f       	add	r27, r27
    1300:	11 f4       	brne	.+4      	; 0x1306 <__floatsisf+0x36>
    1302:	60 ff       	sbrs	r22, 0
    1304:	1b c0       	rjmp	.+54     	; 0x133c <__floatsisf+0x6c>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	16 c0       	rjmp	.+44     	; 0x133c <__floatsisf+0x6c>
    1310:	88 23       	and	r24, r24
    1312:	11 f0       	breq	.+4      	; 0x1318 <__floatsisf+0x48>
    1314:	96 e9       	ldi	r25, 0x96	; 150
    1316:	11 c0       	rjmp	.+34     	; 0x133a <__floatsisf+0x6a>
    1318:	77 23       	and	r23, r23
    131a:	21 f0       	breq	.+8      	; 0x1324 <__floatsisf+0x54>
    131c:	9e e8       	ldi	r25, 0x8E	; 142
    131e:	87 2f       	mov	r24, r23
    1320:	76 2f       	mov	r23, r22
    1322:	05 c0       	rjmp	.+10     	; 0x132e <__floatsisf+0x5e>
    1324:	66 23       	and	r22, r22
    1326:	71 f0       	breq	.+28     	; 0x1344 <__floatsisf+0x74>
    1328:	96 e8       	ldi	r25, 0x86	; 134
    132a:	86 2f       	mov	r24, r22
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	2a f0       	brmi	.+10     	; 0x133c <__floatsisf+0x6c>
    1332:	9a 95       	dec	r25
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	da f7       	brpl	.-10     	; 0x1332 <__floatsisf+0x62>
    133c:	88 0f       	add	r24, r24
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	97 f9       	bld	r25, 7
    1344:	08 95       	ret

00001346 <__fp_inf>:
    1346:	97 f9       	bld	r25, 7
    1348:	9f 67       	ori	r25, 0x7F	; 127
    134a:	80 e8       	ldi	r24, 0x80	; 128
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	08 95       	ret

00001352 <__fp_nan>:
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	80 ec       	ldi	r24, 0xC0	; 192
    1356:	08 95       	ret

00001358 <__fp_pscA>:
    1358:	00 24       	eor	r0, r0
    135a:	0a 94       	dec	r0
    135c:	16 16       	cp	r1, r22
    135e:	17 06       	cpc	r1, r23
    1360:	18 06       	cpc	r1, r24
    1362:	09 06       	cpc	r0, r25
    1364:	08 95       	ret

00001366 <__fp_pscB>:
    1366:	00 24       	eor	r0, r0
    1368:	0a 94       	dec	r0
    136a:	12 16       	cp	r1, r18
    136c:	13 06       	cpc	r1, r19
    136e:	14 06       	cpc	r1, r20
    1370:	05 06       	cpc	r0, r21
    1372:	08 95       	ret

00001374 <__fp_round>:
    1374:	09 2e       	mov	r0, r25
    1376:	03 94       	inc	r0
    1378:	00 0c       	add	r0, r0
    137a:	11 f4       	brne	.+4      	; 0x1380 <__fp_round+0xc>
    137c:	88 23       	and	r24, r24
    137e:	52 f0       	brmi	.+20     	; 0x1394 <__fp_round+0x20>
    1380:	bb 0f       	add	r27, r27
    1382:	40 f4       	brcc	.+16     	; 0x1394 <__fp_round+0x20>
    1384:	bf 2b       	or	r27, r31
    1386:	11 f4       	brne	.+4      	; 0x138c <__fp_round+0x18>
    1388:	60 ff       	sbrs	r22, 0
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <__fp_round+0x20>
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__fp_split3>:
    1396:	57 fd       	sbrc	r21, 7
    1398:	90 58       	subi	r25, 0x80	; 128
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	59 f0       	breq	.+22     	; 0x13b6 <__fp_splitA+0x10>
    13a0:	5f 3f       	cpi	r21, 0xFF	; 255
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <__fp_splitA+0x1a>
    13a4:	47 95       	ror	r20

000013a6 <__fp_splitA>:
    13a6:	88 0f       	add	r24, r24
    13a8:	97 fb       	bst	r25, 7
    13aa:	99 1f       	adc	r25, r25
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <__fp_splitA+0x20>
    13ae:	9f 3f       	cpi	r25, 0xFF	; 255
    13b0:	79 f0       	breq	.+30     	; 0x13d0 <__fp_splitA+0x2a>
    13b2:	87 95       	ror	r24
    13b4:	08 95       	ret
    13b6:	12 16       	cp	r1, r18
    13b8:	13 06       	cpc	r1, r19
    13ba:	14 06       	cpc	r1, r20
    13bc:	55 1f       	adc	r21, r21
    13be:	f2 cf       	rjmp	.-28     	; 0x13a4 <__fp_split3+0xe>
    13c0:	46 95       	lsr	r20
    13c2:	f1 df       	rcall	.-30     	; 0x13a6 <__fp_splitA>
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <__fp_splitA+0x30>
    13c6:	16 16       	cp	r1, r22
    13c8:	17 06       	cpc	r1, r23
    13ca:	18 06       	cpc	r1, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	f1 cf       	rjmp	.-30     	; 0x13b2 <__fp_splitA+0xc>
    13d0:	86 95       	lsr	r24
    13d2:	71 05       	cpc	r23, r1
    13d4:	61 05       	cpc	r22, r1
    13d6:	08 94       	sec
    13d8:	08 95       	ret

000013da <__fp_zero>:
    13da:	e8 94       	clt

000013dc <__fp_szero>:
    13dc:	bb 27       	eor	r27, r27
    13de:	66 27       	eor	r22, r22
    13e0:	77 27       	eor	r23, r23
    13e2:	cb 01       	movw	r24, r22
    13e4:	97 f9       	bld	r25, 7
    13e6:	08 95       	ret

000013e8 <log10>:
    13e8:	0e 94 04 0a 	call	0x1408	; 0x1408 <log>
    13ec:	29 ed       	ldi	r18, 0xD9	; 217
    13ee:	3b e5       	ldi	r19, 0x5B	; 91
    13f0:	4e ed       	ldi	r20, 0xDE	; 222
    13f2:	5e e3       	ldi	r21, 0x3E	; 62
    13f4:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__mulsf3>
    13f8:	16 f0       	brts	.+4      	; 0x13fe <log10+0x16>
    13fa:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_mpack>
    13fe:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    1402:	68 94       	set
    1404:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>

00001408 <log>:
    1408:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_splitA>
    140c:	a8 f3       	brcs	.-22     	; 0x13f8 <log10+0x10>
    140e:	99 23       	and	r25, r25
    1410:	c1 f3       	breq	.-16     	; 0x1402 <log10+0x1a>
    1412:	ae f3       	brts	.-22     	; 0x13fe <log10+0x16>
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	1f 93       	push	r17
    141a:	0f 93       	push	r16
    141c:	ff 92       	push	r15
    141e:	c9 2f       	mov	r28, r25
    1420:	dd 27       	eor	r29, r29
    1422:	88 23       	and	r24, r24
    1424:	2a f0       	brmi	.+10     	; 0x1430 <log+0x28>
    1426:	21 97       	sbiw	r28, 0x01	; 1
    1428:	66 0f       	add	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	88 1f       	adc	r24, r24
    142e:	da f7       	brpl	.-10     	; 0x1426 <log+0x1e>
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f eb       	ldi	r21, 0xBF	; 191
    1438:	9f e3       	ldi	r25, 0x3F	; 63
    143a:	88 39       	cpi	r24, 0x98	; 152
    143c:	20 f0       	brcs	.+8      	; 0x1446 <log+0x3e>
    143e:	80 3e       	cpi	r24, 0xE0	; 224
    1440:	38 f0       	brcs	.+14     	; 0x1450 <log+0x48>
    1442:	21 96       	adiw	r28, 0x01	; 1
    1444:	8f 77       	andi	r24, 0x7F	; 127
    1446:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3>
    144a:	e4 e5       	ldi	r30, 0x54	; 84
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <log+0x50>
    1450:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3>
    1454:	e1 e8       	ldi	r30, 0x81	; 129
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_powser>
    145c:	8b 01       	movw	r16, r22
    145e:	be 01       	movw	r22, r28
    1460:	ec 01       	movw	r28, r24
    1462:	fb 2e       	mov	r15, r27
    1464:	6f 57       	subi	r22, 0x7F	; 127
    1466:	71 09       	sbc	r23, r1
    1468:	75 95       	asr	r23
    146a:	77 1f       	adc	r23, r23
    146c:	88 0b       	sbc	r24, r24
    146e:	99 0b       	sbc	r25, r25
    1470:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatsisf>
    1474:	28 e1       	ldi	r18, 0x18	; 24
    1476:	32 e7       	ldi	r19, 0x72	; 114
    1478:	41 e3       	ldi	r20, 0x31	; 49
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 5f 0a 	call	0x14be	; 0x14be <__mulsf3x>
    1480:	af 2d       	mov	r26, r15
    1482:	98 01       	movw	r18, r16
    1484:	ae 01       	movw	r20, r28
    1486:	ff 90       	pop	r15
    1488:	0f 91       	pop	r16
    148a:	1f 91       	pop	r17
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
    1494:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>

00001498 <__mulsf3>:
    1498:	0e 94 5f 0a 	call	0x14be	; 0x14be <__mulsf3x>
    149c:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    14a0:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    14a4:	38 f0       	brcs	.+14     	; 0x14b4 <__mulsf3+0x1c>
    14a6:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <__mulsf3+0x1c>
    14ac:	95 23       	and	r25, r21
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <__mulsf3+0x1c>
    14b0:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    14b4:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    14b8:	11 24       	eor	r1, r1
    14ba:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>

000014be <__mulsf3x>:
    14be:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    14c2:	70 f3       	brcs	.-36     	; 0x14a0 <__mulsf3+0x8>

000014c4 <__mulsf3_pse>:
    14c4:	95 9f       	mul	r25, r21
    14c6:	c1 f3       	breq	.-16     	; 0x14b8 <__mulsf3+0x20>
    14c8:	95 0f       	add	r25, r21
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	55 1f       	adc	r21, r21
    14ce:	62 9f       	mul	r22, r18
    14d0:	f0 01       	movw	r30, r0
    14d2:	72 9f       	mul	r23, r18
    14d4:	bb 27       	eor	r27, r27
    14d6:	f0 0d       	add	r31, r0
    14d8:	b1 1d       	adc	r27, r1
    14da:	63 9f       	mul	r22, r19
    14dc:	aa 27       	eor	r26, r26
    14de:	f0 0d       	add	r31, r0
    14e0:	b1 1d       	adc	r27, r1
    14e2:	aa 1f       	adc	r26, r26
    14e4:	64 9f       	mul	r22, r20
    14e6:	66 27       	eor	r22, r22
    14e8:	b0 0d       	add	r27, r0
    14ea:	a1 1d       	adc	r26, r1
    14ec:	66 1f       	adc	r22, r22
    14ee:	82 9f       	mul	r24, r18
    14f0:	22 27       	eor	r18, r18
    14f2:	b0 0d       	add	r27, r0
    14f4:	a1 1d       	adc	r26, r1
    14f6:	62 1f       	adc	r22, r18
    14f8:	73 9f       	mul	r23, r19
    14fa:	b0 0d       	add	r27, r0
    14fc:	a1 1d       	adc	r26, r1
    14fe:	62 1f       	adc	r22, r18
    1500:	83 9f       	mul	r24, r19
    1502:	a0 0d       	add	r26, r0
    1504:	61 1d       	adc	r22, r1
    1506:	22 1f       	adc	r18, r18
    1508:	74 9f       	mul	r23, r20
    150a:	33 27       	eor	r19, r19
    150c:	a0 0d       	add	r26, r0
    150e:	61 1d       	adc	r22, r1
    1510:	23 1f       	adc	r18, r19
    1512:	84 9f       	mul	r24, r20
    1514:	60 0d       	add	r22, r0
    1516:	21 1d       	adc	r18, r1
    1518:	82 2f       	mov	r24, r18
    151a:	76 2f       	mov	r23, r22
    151c:	6a 2f       	mov	r22, r26
    151e:	11 24       	eor	r1, r1
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	9a f0       	brmi	.+38     	; 0x154c <__mulsf3_pse+0x88>
    1526:	f1 f0       	breq	.+60     	; 0x1564 <__mulsf3_pse+0xa0>
    1528:	88 23       	and	r24, r24
    152a:	4a f0       	brmi	.+18     	; 0x153e <__mulsf3_pse+0x7a>
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	bb 1f       	adc	r27, r27
    1532:	66 1f       	adc	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	a9 f7       	brne	.-22     	; 0x1528 <__mulsf3_pse+0x64>
    153e:	9e 3f       	cpi	r25, 0xFE	; 254
    1540:	51 05       	cpc	r21, r1
    1542:	80 f0       	brcs	.+32     	; 0x1564 <__mulsf3_pse+0xa0>
    1544:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1548:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    154c:	5f 3f       	cpi	r21, 0xFF	; 255
    154e:	e4 f3       	brlt	.-8      	; 0x1548 <__mulsf3_pse+0x84>
    1550:	98 3e       	cpi	r25, 0xE8	; 232
    1552:	d4 f3       	brlt	.-12     	; 0x1548 <__mulsf3_pse+0x84>
    1554:	86 95       	lsr	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	e7 95       	ror	r30
    1560:	9f 5f       	subi	r25, 0xFF	; 255
    1562:	c1 f7       	brne	.-16     	; 0x1554 <__mulsf3_pse+0x90>
    1564:	fe 2b       	or	r31, r30
    1566:	88 0f       	add	r24, r24
    1568:	91 1d       	adc	r25, r1
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	97 f9       	bld	r25, 7
    1570:	08 95       	ret

00001572 <pow>:
    1572:	fa 01       	movw	r30, r20
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	30 96       	adiw	r30, 0x00	; 0
    157a:	21 05       	cpc	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	a1 f1       	breq	.+104    	; 0x15e8 <pow+0x76>
    1580:	61 15       	cp	r22, r1
    1582:	71 05       	cpc	r23, r1
    1584:	61 f4       	brne	.+24     	; 0x159e <pow+0x2c>
    1586:	80 38       	cpi	r24, 0x80	; 128
    1588:	bf e3       	ldi	r27, 0x3F	; 63
    158a:	9b 07       	cpc	r25, r27
    158c:	49 f1       	breq	.+82     	; 0x15e0 <pow+0x6e>
    158e:	68 94       	set
    1590:	90 38       	cpi	r25, 0x80	; 128
    1592:	81 05       	cpc	r24, r1
    1594:	61 f0       	breq	.+24     	; 0x15ae <pow+0x3c>
    1596:	80 38       	cpi	r24, 0x80	; 128
    1598:	bf ef       	ldi	r27, 0xFF	; 255
    159a:	9b 07       	cpc	r25, r27
    159c:	41 f0       	breq	.+16     	; 0x15ae <pow+0x3c>
    159e:	99 23       	and	r25, r25
    15a0:	4a f5       	brpl	.+82     	; 0x15f4 <pow+0x82>
    15a2:	ff 3f       	cpi	r31, 0xFF	; 255
    15a4:	e1 05       	cpc	r30, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	21 05       	cpc	r18, r1
    15aa:	19 f1       	breq	.+70     	; 0x15f2 <pow+0x80>
    15ac:	e8 94       	clt
    15ae:	08 94       	sec
    15b0:	e7 95       	ror	r30
    15b2:	d9 01       	movw	r26, r18
    15b4:	aa 23       	and	r26, r26
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <pow+0x50>
    15b8:	ab 2f       	mov	r26, r27
    15ba:	be 2f       	mov	r27, r30
    15bc:	f8 5f       	subi	r31, 0xF8	; 248
    15be:	d0 f3       	brcs	.-12     	; 0x15b4 <pow+0x42>
    15c0:	10 c0       	rjmp	.+32     	; 0x15e2 <pow+0x70>
    15c2:	ff 5f       	subi	r31, 0xFF	; 255
    15c4:	70 f4       	brcc	.+28     	; 0x15e2 <pow+0x70>
    15c6:	a6 95       	lsr	r26
    15c8:	e0 f7       	brcc	.-8      	; 0x15c2 <pow+0x50>
    15ca:	f7 39       	cpi	r31, 0x97	; 151
    15cc:	50 f0       	brcs	.+20     	; 0x15e2 <pow+0x70>
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <pow+0x64>
    15d0:	ff 3a       	cpi	r31, 0xAF	; 175
    15d2:	38 f4       	brcc	.+14     	; 0x15e2 <pow+0x70>
    15d4:	9f 77       	andi	r25, 0x7F	; 127
    15d6:	9f 93       	push	r25
    15d8:	0d d0       	rcall	.+26     	; 0x15f4 <pow+0x82>
    15da:	0f 90       	pop	r0
    15dc:	07 fc       	sbrc	r0, 7
    15de:	90 58       	subi	r25, 0x80	; 128
    15e0:	08 95       	ret
    15e2:	46 f0       	brts	.+16     	; 0x15f4 <pow+0x82>
    15e4:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	9f e3       	ldi	r25, 0x3F	; 63
    15f0:	08 95       	ret
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	9f 77       	andi	r25, 0x7F	; 127
    15f6:	5f 93       	push	r21
    15f8:	4f 93       	push	r20
    15fa:	3f 93       	push	r19
    15fc:	2f 93       	push	r18
    15fe:	0e 94 04 0a 	call	0x1408	; 0x1408 <log>
    1602:	2f 91       	pop	r18
    1604:	3f 91       	pop	r19
    1606:	4f 91       	pop	r20
    1608:	5f 91       	pop	r21
    160a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__mulsf3>
    160e:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <exp>
    1612:	29 f4       	brne	.+10     	; 0x161e <pow+0xac>
    1614:	16 f0       	brts	.+4      	; 0x161a <pow+0xa8>
    1616:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    161a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_zero>
    161e:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>

00001622 <exp>:
    1622:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_splitA>
    1626:	a8 f3       	brcs	.-22     	; 0x1612 <pow+0xa0>
    1628:	96 38       	cpi	r25, 0x86	; 134
    162a:	a0 f7       	brcc	.-24     	; 0x1614 <pow+0xa2>
    162c:	07 f8       	bld	r0, 7
    162e:	0f 92       	push	r0
    1630:	e8 94       	clt
    1632:	2b e3       	ldi	r18, 0x3B	; 59
    1634:	3a ea       	ldi	r19, 0xAA	; 170
    1636:	48 eb       	ldi	r20, 0xB8	; 184
    1638:	5f e7       	ldi	r21, 0x7F	; 127
    163a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__mulsf3_pse>
    163e:	0f 92       	push	r0
    1640:	0f 92       	push	r0
    1642:	0f 92       	push	r0
    1644:	4d b7       	in	r20, 0x3d	; 61
    1646:	5e b7       	in	r21, 0x3e	; 62
    1648:	0f 92       	push	r0
    164a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <modf>
    164e:	ee ea       	ldi	r30, 0xAE	; 174
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_powser>
    1656:	4f 91       	pop	r20
    1658:	5f 91       	pop	r21
    165a:	ef 91       	pop	r30
    165c:	ff 91       	pop	r31
    165e:	e5 95       	asr	r30
    1660:	ee 1f       	adc	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	49 f0       	breq	.+18     	; 0x1678 <exp+0x56>
    1666:	fe 57       	subi	r31, 0x7E	; 126
    1668:	e0 68       	ori	r30, 0x80	; 128
    166a:	44 27       	eor	r20, r20
    166c:	ee 0f       	add	r30, r30
    166e:	44 1f       	adc	r20, r20
    1670:	fa 95       	dec	r31
    1672:	e1 f7       	brne	.-8      	; 0x166c <exp+0x4a>
    1674:	41 95       	neg	r20
    1676:	55 0b       	sbc	r21, r21
    1678:	0e 94 84 0b 	call	0x1708	; 0x1708 <ldexp>
    167c:	0f 90       	pop	r0
    167e:	07 fe       	sbrs	r0, 7
    1680:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <inverse>
    1684:	08 95       	ret

00001686 <__fp_mpack>:
    1686:	9f 3f       	cpi	r25, 0xFF	; 255
    1688:	31 f0       	breq	.+12     	; 0x1696 <__fp_mpack_finite+0xc>

0000168a <__fp_mpack_finite>:
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	20 f4       	brcc	.+8      	; 0x1696 <__fp_mpack_finite+0xc>
    168e:	87 95       	ror	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	b7 95       	ror	r27
    1696:	88 0f       	add	r24, r24
    1698:	91 1d       	adc	r25, r1
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <__fp_powser>:
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	1f 93       	push	r17
    16a8:	0f 93       	push	r16
    16aa:	ff 92       	push	r15
    16ac:	ef 92       	push	r14
    16ae:	df 92       	push	r13
    16b0:	7b 01       	movw	r14, r22
    16b2:	8c 01       	movw	r16, r24
    16b4:	68 94       	set
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <__fp_powser+0x22>
    16b8:	da 2e       	mov	r13, r26
    16ba:	ef 01       	movw	r28, r30
    16bc:	0e 94 5f 0a 	call	0x14be	; 0x14be <__mulsf3x>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e8 94       	clt
    16c4:	a5 91       	lpm	r26, Z+
    16c6:	25 91       	lpm	r18, Z+
    16c8:	35 91       	lpm	r19, Z+
    16ca:	45 91       	lpm	r20, Z+
    16cc:	55 91       	lpm	r21, Z+
    16ce:	a6 f3       	brts	.-24     	; 0x16b8 <__fp_powser+0x16>
    16d0:	ef 01       	movw	r28, r30
    16d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
    16d6:	fe 01       	movw	r30, r28
    16d8:	97 01       	movw	r18, r14
    16da:	a8 01       	movw	r20, r16
    16dc:	da 94       	dec	r13
    16de:	69 f7       	brne	.-38     	; 0x16ba <__fp_powser+0x18>
    16e0:	df 90       	pop	r13
    16e2:	ef 90       	pop	r14
    16e4:	ff 90       	pop	r15
    16e6:	0f 91       	pop	r16
    16e8:	1f 91       	pop	r17
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <inverse>:
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	9f e3       	ldi	r25, 0x3F	; 63
    16fc:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__divsf3>
    1700:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1704:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_mpack>

00001708 <ldexp>:
    1708:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_splitA>
    170c:	d8 f3       	brcs	.-10     	; 0x1704 <inverse+0x14>
    170e:	99 23       	and	r25, r25
    1710:	c9 f3       	breq	.-14     	; 0x1704 <inverse+0x14>
    1712:	94 0f       	add	r25, r20
    1714:	51 1d       	adc	r21, r1
    1716:	a3 f3       	brvs	.-24     	; 0x1700 <inverse+0x10>
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	94 f0       	brlt	.+36     	; 0x1742 <ldexp+0x3a>
    171e:	59 f0       	breq	.+22     	; 0x1736 <ldexp+0x2e>
    1720:	88 23       	and	r24, r24
    1722:	32 f0       	brmi	.+12     	; 0x1730 <ldexp+0x28>
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	88 1f       	adc	r24, r24
    172a:	91 50       	subi	r25, 0x01	; 1
    172c:	50 40       	sbci	r21, 0x00	; 0
    172e:	c1 f7       	brne	.-16     	; 0x1720 <ldexp+0x18>
    1730:	9e 3f       	cpi	r25, 0xFE	; 254
    1732:	51 05       	cpc	r21, r1
    1734:	2c f7       	brge	.-54     	; 0x1700 <inverse+0x10>
    1736:	88 0f       	add	r24, r24
    1738:	91 1d       	adc	r25, r1
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	97 f9       	bld	r25, 7
    1740:	08 95       	ret
    1742:	5f 3f       	cpi	r21, 0xFF	; 255
    1744:	ac f0       	brlt	.+42     	; 0x1770 <ldexp+0x68>
    1746:	98 3e       	cpi	r25, 0xE8	; 232
    1748:	9c f0       	brlt	.+38     	; 0x1770 <ldexp+0x68>
    174a:	bb 27       	eor	r27, r27
    174c:	86 95       	lsr	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	b7 95       	ror	r27
    1754:	08 f4       	brcc	.+2      	; 0x1758 <ldexp+0x50>
    1756:	b1 60       	ori	r27, 0x01	; 1
    1758:	93 95       	inc	r25
    175a:	c1 f7       	brne	.-16     	; 0x174c <ldexp+0x44>
    175c:	bb 0f       	add	r27, r27
    175e:	58 f7       	brcc	.-42     	; 0x1736 <ldexp+0x2e>
    1760:	11 f4       	brne	.+4      	; 0x1766 <ldexp+0x5e>
    1762:	60 ff       	sbrs	r22, 0
    1764:	e8 cf       	rjmp	.-48     	; 0x1736 <ldexp+0x2e>
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	8f 4f       	sbci	r24, 0xFF	; 255
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	e3 cf       	rjmp	.-58     	; 0x1736 <ldexp+0x2e>
    1770:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>

00001774 <modf>:
    1774:	fa 01       	movw	r30, r20
    1776:	dc 01       	movw	r26, r24
    1778:	aa 0f       	add	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	bf 57       	subi	r27, 0x7F	; 127
    1782:	28 f4       	brcc	.+10     	; 0x178e <modf+0x1a>
    1784:	22 27       	eor	r18, r18
    1786:	33 27       	eor	r19, r19
    1788:	44 27       	eor	r20, r20
    178a:	50 78       	andi	r21, 0x80	; 128
    178c:	20 c0       	rjmp	.+64     	; 0x17ce <modf+0x5a>
    178e:	b7 51       	subi	r27, 0x17	; 23
    1790:	90 f4       	brcc	.+36     	; 0x17b6 <modf+0x42>
    1792:	ab 2f       	mov	r26, r27
    1794:	00 24       	eor	r0, r0
    1796:	46 95       	lsr	r20
    1798:	37 95       	ror	r19
    179a:	27 95       	ror	r18
    179c:	01 1c       	adc	r0, r1
    179e:	a3 95       	inc	r26
    17a0:	d2 f3       	brmi	.-12     	; 0x1796 <modf+0x22>
    17a2:	00 20       	and	r0, r0
    17a4:	71 f0       	breq	.+28     	; 0x17c2 <modf+0x4e>
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	44 1f       	adc	r20, r20
    17ac:	b3 95       	inc	r27
    17ae:	da f3       	brmi	.-10     	; 0x17a6 <modf+0x32>
    17b0:	0e d0       	rcall	.+28     	; 0x17ce <modf+0x5a>
    17b2:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__subsf3>
    17b6:	61 30       	cpi	r22, 0x01	; 1
    17b8:	71 05       	cpc	r23, r1
    17ba:	a0 e8       	ldi	r26, 0x80	; 128
    17bc:	8a 07       	cpc	r24, r26
    17be:	b9 46       	sbci	r27, 0x69	; 105
    17c0:	30 f4       	brcc	.+12     	; 0x17ce <modf+0x5a>
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	66 27       	eor	r22, r22
    17c8:	77 27       	eor	r23, r23
    17ca:	88 27       	eor	r24, r24
    17cc:	90 78       	andi	r25, 0x80	; 128
    17ce:	30 96       	adiw	r30, 0x00	; 0
    17d0:	21 f0       	breq	.+8      	; 0x17da <modf+0x66>
    17d2:	20 83       	st	Z, r18
    17d4:	31 83       	std	Z+1, r19	; 0x01
    17d6:	42 83       	std	Z+2, r20	; 0x02
    17d8:	53 83       	std	Z+3, r21	; 0x03
    17da:	08 95       	ret

000017dc <__udivmodsi4>:
    17dc:	a1 e2       	ldi	r26, 0x21	; 33
    17de:	1a 2e       	mov	r1, r26
    17e0:	aa 1b       	sub	r26, r26
    17e2:	bb 1b       	sub	r27, r27
    17e4:	fd 01       	movw	r30, r26
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <__udivmodsi4_ep>

000017e8 <__udivmodsi4_loop>:
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	ee 1f       	adc	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	a2 17       	cp	r26, r18
    17f2:	b3 07       	cpc	r27, r19
    17f4:	e4 07       	cpc	r30, r20
    17f6:	f5 07       	cpc	r31, r21
    17f8:	20 f0       	brcs	.+8      	; 0x1802 <__udivmodsi4_ep>
    17fa:	a2 1b       	sub	r26, r18
    17fc:	b3 0b       	sbc	r27, r19
    17fe:	e4 0b       	sbc	r30, r20
    1800:	f5 0b       	sbc	r31, r21

00001802 <__udivmodsi4_ep>:
    1802:	66 1f       	adc	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	1a 94       	dec	r1
    180c:	69 f7       	brne	.-38     	; 0x17e8 <__udivmodsi4_loop>
    180e:	60 95       	com	r22
    1810:	70 95       	com	r23
    1812:	80 95       	com	r24
    1814:	90 95       	com	r25
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	bd 01       	movw	r22, r26
    181c:	cf 01       	movw	r24, r30
    181e:	08 95       	ret

00001820 <__umulhisi3>:
    1820:	a2 9f       	mul	r26, r18
    1822:	b0 01       	movw	r22, r0
    1824:	b3 9f       	mul	r27, r19
    1826:	c0 01       	movw	r24, r0
    1828:	a3 9f       	mul	r26, r19
    182a:	70 0d       	add	r23, r0
    182c:	81 1d       	adc	r24, r1
    182e:	11 24       	eor	r1, r1
    1830:	91 1d       	adc	r25, r1
    1832:	b2 9f       	mul	r27, r18
    1834:	70 0d       	add	r23, r0
    1836:	81 1d       	adc	r24, r1
    1838:	11 24       	eor	r1, r1
    183a:	91 1d       	adc	r25, r1
    183c:	08 95       	ret

0000183e <__muluhisi3>:
    183e:	0e 94 10 0c 	call	0x1820	; 0x1820 <__umulhisi3>
    1842:	a5 9f       	mul	r26, r21
    1844:	90 0d       	add	r25, r0
    1846:	b4 9f       	mul	r27, r20
    1848:	90 0d       	add	r25, r0
    184a:	a4 9f       	mul	r26, r20
    184c:	80 0d       	add	r24, r0
    184e:	91 1d       	adc	r25, r1
    1850:	11 24       	eor	r1, r1
    1852:	08 95       	ret

00001854 <_exit>:
    1854:	f8 94       	cli

00001856 <__stop_program>:
    1856:	ff cf       	rjmp	.-2      	; 0x1856 <__stop_program>
