
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb7  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e50  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c91  00000000  00000000  00003413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000040a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000905  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5d  00000000  00000000  00004c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_10>
  2c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  8a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPad_Init>:

#include "KeyPad.h"
void KeyPad_Init(void)
{
	/*Cols Input */
	GPIO_Init ( _KEYPAD_PORT,((COL1_PIN|COL1_PIN|COL1_PIN)),InPut);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_Init>

	GPIO_Init ( _KEYPAD_PORT,((ROW1_PIN|ROW2_PIN|ROW3_PIN)),OutPut);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	6c e1       	ldi	r22, 0x1C	; 28
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_Init>
  a6:	08 95       	ret

000000a8 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(5);
	LCD_Command (0x80);		/* Cursor at home position */
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	9f 70       	andi	r25, 0x0F	; 15
  ac:	28 2f       	mov	r18, r24
  ae:	20 7f       	andi	r18, 0xF0	; 240
  b0:	92 2b       	or	r25, r18
  b2:	9b bb       	out	0x1b, r25	; 27
  b4:	d9 98       	cbi	0x1b, 1	; 27
  b6:	db 9a       	sbi	0x1b, 3	; 27
  b8:	3a e1       	ldi	r19, 0x1A	; 26
  ba:	3a 95       	dec	r19
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_Command+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_Command+0x18>
  c0:	db 98       	cbi	0x1b, 3	; 27
  c2:	ef e8       	ldi	r30, 0x8F	; 143
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_Command+0x1e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_Command+0x24>
  cc:	00 00       	nop
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	2f 70       	andi	r18, 0x0F	; 15
  d2:	f0 e1       	ldi	r31, 0x10	; 16
  d4:	8f 9f       	mul	r24, r31
  d6:	c0 01       	movw	r24, r0
  d8:	11 24       	eor	r1, r1
  da:	82 2b       	or	r24, r18
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	db 9a       	sbi	0x1b, 3	; 27
  e0:	3a e1       	ldi	r19, 0x1A	; 26
  e2:	3a 95       	dec	r19
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Command+0x3a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Command+0x40>
  e8:	db 98       	cbi	0x1b, 3	; 27
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	9e e4       	ldi	r25, 0x4E	; 78
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x46>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x4c>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Init>:
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8a bb       	out	0x1a, r24	; 26
  fc:	da 98       	cbi	0x1b, 2	; 27
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	81 ee       	ldi	r24, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <LCD_Init+0xc>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Init+0x16>
 10e:	00 00       	nop
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 116:	8f e1       	ldi	r24, 0x1F	; 31
 118:	9e e4       	ldi	r25, 0x4E	; 78
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Init+0x22>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_Init+0x28>
 120:	00 00       	nop
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Init+0x34>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Init+0x3a>
 132:	00 00       	nop
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	9e e4       	ldi	r25, 0x4E	; 78
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Init+0x46>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Init+0x4c>
 144:	00 00       	nop
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Command>
 164:	08 95       	ret

00000166 <LCD_Char>:
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	28 2f       	mov	r18, r24
 16c:	20 7f       	andi	r18, 0xF0	; 240
 16e:	92 2b       	or	r25, r18
 170:	9b bb       	out	0x1b, r25	; 27
 172:	d9 9a       	sbi	0x1b, 1	; 27
 174:	db 9a       	sbi	0x1b, 3	; 27
 176:	32 e0       	ldi	r19, 0x02	; 2
 178:	3a 95       	dec	r19
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Char+0x12>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Char+0x18>
 17e:	db 98       	cbi	0x1b, 3	; 27
 180:	ef e8       	ldi	r30, 0x8F	; 143
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Char+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Char+0x24>
 18a:	00 00       	nop
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	2f 70       	andi	r18, 0x0F	; 15
 190:	f0 e1       	ldi	r31, 0x10	; 16
 192:	8f 9f       	mul	r24, r31
 194:	c0 01       	movw	r24, r0
 196:	11 24       	eor	r1, r1
 198:	82 2b       	or	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	db 9a       	sbi	0x1b, 3	; 27
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	3a 95       	dec	r19
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Char+0x3a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Char+0x40>
 1a6:	db 98       	cbi	0x1b, 3	; 27
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Char+0x46>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Char+0x4c>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <LCD_String>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	88 81       	ld	r24, Y
 1be:	88 23       	and	r24, r24
 1c0:	31 f0       	breq	.+12     	; 0x1ce <LCD_String+0x18>
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Char>
 1c8:	89 91       	ld	r24, Y+
 1ca:	81 11       	cpse	r24, r1
 1cc:	fb cf       	rjmp	.-10     	; 0x1c4 <LCD_String+0xe>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <LCD_Integ>:
}
void LCD_Integ (int s32_Value)		/* Send string to LCD function */
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	uinteg8_t *str;
	itoa(s32_Value,str,10);	/* Integer to string conversion */
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	be 01       	movw	r22, r28
 1e2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <itoa>
	LCD_String(str);
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_String>
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:
}
int main(void)
{
	GPIO_Value Temp=RESET;
	uinteg16_t X=5;
	LCD_Init();
 1f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Init>
	KeyPad_Init();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <KeyPad_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	60 ef       	ldi	r22, 0xF0	; 240
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_Init>
	GPIO_Init ( _PORTB,(PIN2),InPut);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	64 e0       	ldi	r22, 0x04	; 4
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_Init>
	Timer_Init(&gstr_Timer0Confing);
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Timer_Init>
	//adc_start(ADC_VREF_AVCC, ADC_PRESCALER_16, ADC0, ADC_ISR);
	X=(int)ADC_read(ADC_PRESCALER_128,ADC_VREF_AVCC,ADC0);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	60 e4       	ldi	r22, 0x40	; 64
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	0e 94 19 01 	call	0x232	; 0x232 <ADC_read>
 220:	ec 01       	movw	r28, r24
    LCD_String("temperature");
 222:	86 e6       	ldi	r24, 0x66	; 102
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_String>
    LCD_Integ((int)X);
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_Integ>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x3e>

00000232 <ADC_read>:
	} else {
	ADCSRB &= ~(_BV(MUX5));
	ADMUX = vref | pin;
}
#else
	ADMUX = vref | pin;
 232:	46 2b       	or	r20, r22
 234:	47 b9       	out	0x07, r20	; 7
#endif
	
	ADCSRA = _BV(ADEN) | _BV(ADSC) | prescaler;
 236:	80 6c       	ori	r24, 0xC0	; 192
 238:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & _BV(ADIF)));
 23a:	34 9b       	sbis	0x06, 4	; 6
 23c:	fe cf       	rjmp	.-4      	; 0x23a <ADC_read+0x8>
	
	return (ADCL | (ADCH<<8));
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	25 b1       	in	r18, 0x05	; 5
 242:	90 e0       	ldi	r25, 0x00	; 0
}
 244:	92 2b       	or	r25, r18
 246:	08 95       	ret

00000248 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	e1 f4       	brne	.+56     	; 0x284 <GPIO_Init+0x3c>
	{
		switch(_PORTX)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	59 f0       	breq	.+22     	; 0x266 <GPIO_Init+0x1e>
 250:	28 f0       	brcs	.+10     	; 0x25c <GPIO_Init+0x14>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	69 f0       	breq	.+26     	; 0x270 <GPIO_Init+0x28>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	81 f0       	breq	.+32     	; 0x27a <GPIO_Init+0x32>
 25a:	46 c0       	rjmp	.+140    	; 0x2e8 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
 25c:	8a b3       	in	r24, 0x1a	; 26
 25e:	68 2b       	or	r22, r24
 260:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 262:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
 264:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
 266:	87 b3       	in	r24, 0x17	; 23
 268:	68 2b       	or	r22, r24
 26a:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 26c:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
 26e:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
 270:	84 b3       	in	r24, 0x14	; 20
 272:	68 2b       	or	r22, r24
 274:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 276:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 278:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 27a:	81 b3       	in	r24, 0x11	; 17
 27c:	68 2b       	or	r22, r24
 27e:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 280:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 282:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 284:	41 11       	cpse	r20, r1
 286:	32 c0       	rjmp	.+100    	; 0x2ec <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	81 f0       	breq	.+32     	; 0x2ac <GPIO_Init+0x64>
 28c:	28 f0       	brcs	.+10     	; 0x298 <GPIO_Init+0x50>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	b9 f0       	breq	.+46     	; 0x2c0 <GPIO_Init+0x78>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	f9 f0       	breq	.+62     	; 0x2d4 <GPIO_Init+0x8c>
 296:	2c c0       	rjmp	.+88     	; 0x2f0 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 298:	8a b3       	in	r24, 0x1a	; 26
 29a:	96 2f       	mov	r25, r22
 29c:	90 95       	com	r25
 29e:	89 23       	and	r24, r25
 2a0:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	68 2b       	or	r22, r24
 2a6:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 2a8:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 2aa:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 2ac:	87 b3       	in	r24, 0x17	; 23
 2ae:	96 2f       	mov	r25, r22
 2b0:	90 95       	com	r25
 2b2:	89 23       	and	r24, r25
 2b4:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	68 2b       	or	r22, r24
 2ba:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 2bc:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 2be:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 2c0:	84 b3       	in	r24, 0x14	; 20
 2c2:	96 2f       	mov	r25, r22
 2c4:	90 95       	com	r25
 2c6:	89 23       	and	r24, r25
 2c8:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 2ca:	85 b3       	in	r24, 0x15	; 21
 2cc:	68 2b       	or	r22, r24
 2ce:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 2d0:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 2d2:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 2d4:	81 b3       	in	r24, 0x11	; 17
 2d6:	96 2f       	mov	r25, r22
 2d8:	90 95       	com	r25
 2da:	89 23       	and	r24, r25
 2dc:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 2de:	82 b3       	in	r24, 0x12	; 18
 2e0:	68 2b       	or	r22, r24
 2e2:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 2e4:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 2e6:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 2f2:	08 95       	ret

000002f4 <Timer_Init>:
		default:
			return TIMER_ERROR_NOK;
			break;
	}
	return TIMER_ERROR_OK;
}
 2f4:	fc 01       	movw	r30, r24
 2f6:	89 2b       	or	r24, r25
 2f8:	09 f4       	brne	.+2      	; 0x2fc <Timer_Init+0x8>
 2fa:	4c c0       	rjmp	.+152    	; 0x394 <Timer_Init+0xa0>
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	19 f0       	breq	.+6      	; 0x308 <Timer_Init+0x14>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	29 f1       	breq	.+74     	; 0x350 <Timer_Init+0x5c>
 306:	48 c0       	rjmp	.+144    	; 0x398 <Timer_Init+0xa4>
 308:	85 81       	ldd	r24, Z+5	; 0x05
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	39 f4       	brne	.+14     	; 0x31c <Timer_Init+0x28>
 30e:	8f b7       	in	r24, 0x3f	; 63
 310:	80 68       	ori	r24, 0x80	; 128
 312:	8f bf       	out	0x3f, r24	; 63
 314:	89 b7       	in	r24, 0x39	; 57
 316:	82 60       	ori	r24, 0x02	; 2
 318:	89 bf       	out	0x39, r24	; 57
 31a:	03 c0       	rjmp	.+6      	; 0x322 <Timer_Init+0x2e>
 31c:	89 b7       	in	r24, 0x39	; 57
 31e:	8d 7f       	andi	r24, 0xFD	; 253
 320:	89 bf       	out	0x39, r24	; 57
 322:	84 81       	ldd	r24, Z+4	; 0x04
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	49 f4       	brne	.+18     	; 0x33a <Timer_Init+0x46>
 328:	8f b7       	in	r24, 0x3f	; 63
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	8f bf       	out	0x3f, r24	; 63
 32e:	89 b7       	in	r24, 0x39	; 57
 330:	81 60       	ori	r24, 0x01	; 1
 332:	89 bf       	out	0x39, r24	; 57
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	89 bf       	out	0x39, r24	; 57
 338:	03 c0       	rjmp	.+6      	; 0x340 <Timer_Init+0x4c>
 33a:	89 b7       	in	r24, 0x39	; 57
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	89 bf       	out	0x39, r24	; 57
 340:	92 81       	ldd	r25, Z+2	; 0x02
 342:	81 81       	ldd	r24, Z+1	; 0x01
 344:	89 2b       	or	r24, r25
 346:	93 81       	ldd	r25, Z+3	; 0x03
 348:	89 2b       	or	r24, r25
 34a:	83 bf       	out	0x33, r24	; 51
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	08 95       	ret
 350:	85 81       	ldd	r24, Z+5	; 0x05
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	39 f4       	brne	.+14     	; 0x364 <Timer_Init+0x70>
 356:	8f b7       	in	r24, 0x3f	; 63
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	8f bf       	out	0x3f, r24	; 63
 35c:	89 b7       	in	r24, 0x39	; 57
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	89 bf       	out	0x39, r24	; 57
 362:	03 c0       	rjmp	.+6      	; 0x36a <Timer_Init+0x76>
 364:	89 b7       	in	r24, 0x39	; 57
 366:	8f 77       	andi	r24, 0x7F	; 127
 368:	89 bf       	out	0x39, r24	; 57
 36a:	84 81       	ldd	r24, Z+4	; 0x04
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	39 f4       	brne	.+14     	; 0x37e <Timer_Init+0x8a>
 370:	8f b7       	in	r24, 0x3f	; 63
 372:	80 68       	ori	r24, 0x80	; 128
 374:	8f bf       	out	0x3f, r24	; 63
 376:	89 b7       	in	r24, 0x39	; 57
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	89 bf       	out	0x39, r24	; 57
 37c:	03 c0       	rjmp	.+6      	; 0x384 <Timer_Init+0x90>
 37e:	89 b7       	in	r24, 0x39	; 57
 380:	8f 7b       	andi	r24, 0xBF	; 191
 382:	89 bf       	out	0x39, r24	; 57
 384:	92 81       	ldd	r25, Z+2	; 0x02
 386:	81 81       	ldd	r24, Z+1	; 0x01
 388:	89 2b       	or	r24, r25
 38a:	93 81       	ldd	r25, Z+3	; 0x03
 38c:	89 2b       	or	r24, r25
 38e:	85 bd       	out	0x25, r24	; 37
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	08 95       	ret
 394:	81 e1       	ldi	r24, 0x11	; 17
 396:	08 95       	ret
 398:	81 e1       	ldi	r24, 0x11	; 17
 39a:	08 95       	ret

0000039c <__vector_11>:

void __vector_11(void)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	gcallBack();
 3be:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 3c2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 3c6:	09 95       	icall
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_10>:
void __vector_10(void)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
	
}
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <itoa>:
 3fe:	45 32       	cpi	r20, 0x25	; 37
 400:	51 05       	cpc	r21, r1
 402:	20 f4       	brcc	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	42 30       	cpi	r20, 0x02	; 2
 406:	10 f0       	brcs	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	0c 94 0a 02 	jmp	0x414	; 0x414 <__itoa_ncheck>
 40c:	fb 01       	movw	r30, r22
 40e:	10 82       	st	Z, r1
 410:	cb 01       	movw	r24, r22
 412:	08 95       	ret

00000414 <__itoa_ncheck>:
 414:	bb 27       	eor	r27, r27
 416:	4a 30       	cpi	r20, 0x0A	; 10
 418:	31 f4       	brne	.+12     	; 0x426 <__itoa_ncheck+0x12>
 41a:	99 23       	and	r25, r25
 41c:	22 f4       	brpl	.+8      	; 0x426 <__itoa_ncheck+0x12>
 41e:	bd e2       	ldi	r27, 0x2D	; 45
 420:	90 95       	com	r25
 422:	81 95       	neg	r24
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	0c 94 16 02 	jmp	0x42c	; 0x42c <__utoa_common>

0000042a <__utoa_ncheck>:
 42a:	bb 27       	eor	r27, r27

0000042c <__utoa_common>:
 42c:	fb 01       	movw	r30, r22
 42e:	55 27       	eor	r21, r21
 430:	aa 27       	eor	r26, r26
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	aa 1f       	adc	r26, r26
 438:	a4 17       	cp	r26, r20
 43a:	10 f0       	brcs	.+4      	; 0x440 <__utoa_common+0x14>
 43c:	a4 1b       	sub	r26, r20
 43e:	83 95       	inc	r24
 440:	50 51       	subi	r21, 0x10	; 16
 442:	b9 f7       	brne	.-18     	; 0x432 <__utoa_common+0x6>
 444:	a0 5d       	subi	r26, 0xD0	; 208
 446:	aa 33       	cpi	r26, 0x3A	; 58
 448:	08 f0       	brcs	.+2      	; 0x44c <__utoa_common+0x20>
 44a:	a9 5d       	subi	r26, 0xD9	; 217
 44c:	a1 93       	st	Z+, r26
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	79 f7       	brne	.-34     	; 0x430 <__utoa_common+0x4>
 452:	b1 11       	cpse	r27, r1
 454:	b1 93       	st	Z+, r27
 456:	11 92       	st	Z+, r1
 458:	cb 01       	movw	r24, r22
 45a:	0c 94 2f 02 	jmp	0x45e	; 0x45e <strrev>

0000045e <strrev>:
 45e:	dc 01       	movw	r26, r24
 460:	fc 01       	movw	r30, r24
 462:	67 2f       	mov	r22, r23
 464:	71 91       	ld	r23, Z+
 466:	77 23       	and	r23, r23
 468:	e1 f7       	brne	.-8      	; 0x462 <strrev+0x4>
 46a:	32 97       	sbiw	r30, 0x02	; 2
 46c:	04 c0       	rjmp	.+8      	; 0x476 <strrev+0x18>
 46e:	7c 91       	ld	r23, X
 470:	6d 93       	st	X+, r22
 472:	70 83       	st	Z, r23
 474:	62 91       	ld	r22, -Z
 476:	ae 17       	cp	r26, r30
 478:	bf 07       	cpc	r27, r31
 47a:	c8 f3       	brcs	.-14     	; 0x46e <strrev+0x10>
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
