
Sprints_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000005b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9f  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cef  00000000  00000000  000023f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9f  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ec  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e06  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000055ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_10>
  2c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPad_Init>:


void KeyPad_Init(void)
{
	/*Cols Input */
	GPIO_Init ( _KEYPAD_PORT,((COL1_PIN|COL1_PIN|COL1_PIN)),InPut);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GPIO_Init>

	GPIO_Init ( _KEYPAD_PORT,((ROW1_PIN|ROW2_PIN|ROW3_PIN)),OutPut);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	6c e1       	ldi	r22, 0x1C	; 28
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GPIO_Init>
  a6:	08 95       	ret

000000a8 <Key_KeyPressed>:
	
}

uinteg16_t Key_KeyPressed(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
	uinteg8_t i=0;
	uinteg8_t j=0;
	uinteg16_t sw=5;
	for(i=0;i<ROW_NUM;i++)
	{
		KEYPAD_PORT=0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
		CLR_BIT(KEYPAD_PORT,(i+ROW1_PIN_ID));
  b2:	a1 e0       	ldi	r26, 0x01	; 1
  b4:	b0 e0       	ldi	r27, 0x00	; 0
	uinteg8_t i=0;
	uinteg8_t j=0;
	uinteg16_t sw=5;
	for(i=0;i<ROW_NUM;i++)
	{
		KEYPAD_PORT=0xFF;
  b6:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(KEYPAD_PORT,(i+ROW1_PIN_ID));
  b8:	45 b3       	in	r20, 0x15	; 21
  ba:	f9 01       	movw	r30, r18
  bc:	b9 01       	movw	r22, r18
  be:	6e 5f       	subi	r22, 0xFE	; 254
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	ed 01       	movw	r28, r26
  c4:	02 c0       	rjmp	.+4      	; 0xca <Key_KeyPressed+0x22>
  c6:	cc 0f       	add	r28, r28
  c8:	dd 1f       	adc	r29, r29
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Key_KeyPressed+0x1e>
  ce:	9c 2f       	mov	r25, r28
  d0:	90 95       	com	r25
  d2:	94 23       	and	r25, r20
  d4:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	cf ec       	ldi	r28, 0xCF	; 207
  d8:	d7 e0       	ldi	r29, 0x07	; 7
  da:	21 97       	sbiw	r28, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Key_KeyPressed+0x32>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Key_KeyPressed+0x38>
  e0:	00 00       	nop
		_delay_ms(1);
		for(j=0;j<COL_NUM;j++)
		{
			if(GET_BIT(KEYPAD_PIN,(j+COL1_PIN_ID))==RESET)
  e2:	9d 9b       	sbis	0x13, 5	; 19
  e4:	0a c0       	rjmp	.+20     	; 0xfa <Key_KeyPressed+0x52>
  e6:	9e 9b       	sbis	0x13, 6	; 19
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <Key_KeyPressed+0x4c>
  ea:	9f 99       	sbic	0x13, 7	; 19
  ec:	18 c0       	rjmp	.+48     	; 0x11e <Key_KeyPressed+0x76>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	05 c0       	rjmp	.+10     	; 0xfe <Key_KeyPressed+0x56>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Key_KeyPressed+0x56>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	af e3       	ldi	r26, 0x3F	; 63
 100:	bc e9       	ldi	r27, 0x9C	; 156
 102:	11 97       	sbiw	r26, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <Key_KeyPressed+0x5a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <Key_KeyPressed+0x60>
 108:	00 00       	nop
			{
				_delay_ms(20);
				sw =(i*ROW_NUM)+j+1;	
 10a:	9f 01       	movw	r18, r30
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
				return sw;
 118:	cf 01       	movw	r24, r30
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	07 c0       	rjmp	.+14     	; 0x12c <Key_KeyPressed+0x84>
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
uinteg16_t Key_KeyPressed(void)
{
	uinteg8_t i=0;
	uinteg8_t j=0;
	uinteg16_t sw=5;
	for(i=0;i<ROW_NUM;i++)
 122:	23 30       	cpi	r18, 0x03	; 3
 124:	31 05       	cpc	r19, r1
 126:	39 f6       	brne	.-114    	; 0xb6 <Key_KeyPressed+0xe>
				sw =(i*ROW_NUM)+j+1;	
				return sw;
			}
		}
	}
	return 20;
 128:	84 e1       	ldi	r24, 0x14	; 20
 12a:	90 e0       	ldi	r25, 0x00	; 0
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
 132:	9b b3       	in	r25, 0x1b	; 27
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	28 2f       	mov	r18, r24
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	92 2b       	or	r25, r18
 13c:	9b bb       	out	0x1b, r25	; 27
 13e:	d9 98       	cbi	0x1b, 1	; 27
 140:	db 9a       	sbi	0x1b, 3	; 27
 142:	3a e1       	ldi	r19, 0x1A	; 26
 144:	3a 95       	dec	r19
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Command+0x12>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Command+0x18>
 14a:	db 98       	cbi	0x1b, 3	; 27
 14c:	ef e8       	ldi	r30, 0x8F	; 143
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Command+0x1e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Command+0x24>
 156:	00 00       	nop
 158:	2b b3       	in	r18, 0x1b	; 27
 15a:	2f 70       	andi	r18, 0x0F	; 15
 15c:	f0 e1       	ldi	r31, 0x10	; 16
 15e:	8f 9f       	mul	r24, r31
 160:	c0 01       	movw	r24, r0
 162:	11 24       	eor	r1, r1
 164:	82 2b       	or	r24, r18
 166:	8b bb       	out	0x1b, r24	; 27
 168:	db 9a       	sbi	0x1b, 3	; 27
 16a:	3a e1       	ldi	r19, 0x1A	; 26
 16c:	3a 95       	dec	r19
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Command+0x3a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Command+0x40>
 172:	db 98       	cbi	0x1b, 3	; 27
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Command+0x46>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Command+0x4c>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_Init>:
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	8a bb       	out	0x1a, r24	; 26
 186:	da 98       	cbi	0x1b, 2	; 27
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <LCD_Init+0xc>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Init+0x16>
 198:	00 00       	nop
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1a0:	8f e1       	ldi	r24, 0x1F	; 31
 1a2:	9e e4       	ldi	r25, 0x4E	; 78
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x22>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0x28>
 1aa:	00 00       	nop
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Init+0x34>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Init+0x3a>
 1bc:	00 00       	nop
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1c4:	8f e1       	ldi	r24, 0x1F	; 31
 1c6:	9e e4       	ldi	r25, 0x4E	; 78
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_Init+0x46>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_Init+0x4c>
 1ce:	00 00       	nop
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 1ee:	08 95       	ret

000001f0 <LCD_Char>:
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	9f 70       	andi	r25, 0x0F	; 15
 1f4:	28 2f       	mov	r18, r24
 1f6:	20 7f       	andi	r18, 0xF0	; 240
 1f8:	92 2b       	or	r25, r18
 1fa:	9b bb       	out	0x1b, r25	; 27
 1fc:	d9 9a       	sbi	0x1b, 1	; 27
 1fe:	db 9a       	sbi	0x1b, 3	; 27
 200:	32 e0       	ldi	r19, 0x02	; 2
 202:	3a 95       	dec	r19
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Char+0x12>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_Char+0x18>
 208:	db 98       	cbi	0x1b, 3	; 27
 20a:	ef e8       	ldi	r30, 0x8F	; 143
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Char+0x1e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Char+0x24>
 214:	00 00       	nop
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	2f 70       	andi	r18, 0x0F	; 15
 21a:	f0 e1       	ldi	r31, 0x10	; 16
 21c:	8f 9f       	mul	r24, r31
 21e:	c0 01       	movw	r24, r0
 220:	11 24       	eor	r1, r1
 222:	82 2b       	or	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
 226:	db 9a       	sbi	0x1b, 3	; 27
 228:	32 e0       	ldi	r19, 0x02	; 2
 22a:	3a 95       	dec	r19
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_Char+0x3a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Char+0x40>
 230:	db 98       	cbi	0x1b, 3	; 27
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Char+0x46>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Char+0x4c>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <LCD_String>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	88 81       	ld	r24, Y
 248:	88 23       	and	r24, r24
 24a:	31 f0       	breq	.+12     	; 0x258 <LCD_String+0x18>
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Char>
 252:	89 91       	ld	r24, Y+
 254:	81 11       	cpse	r24, r1
 256:	fb cf       	rjmp	.-10     	; 0x24e <LCD_String+0xe>
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	97 e2       	ldi	r25, 0x27	; 39
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_Clear+0xa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_Clear+0x10>
 26e:	00 00       	nop
	_delay_ms(5);
	LCD_Command (0x80);		/* Cursor at home position */
 270:	80 e8       	ldi	r24, 0x80	; 128
 272:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Command>
 276:	08 95       	ret

00000278 <LCD_Int>:
}
void LCD_Int (int s32_Value)		/* Send string to LCD function */
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
	uinteg8_t *str;
	itoa(s32_Value,str,10);	/* Integer to string conversion */
 27c:	4a e0       	ldi	r20, 0x0A	; 10
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	be 01       	movw	r22, r28
 286:	0e 94 47 02 	call	0x48e	; 0x48e <itoa>
	LCD_String(str);
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_String>
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:


int main(void)
{
	uinteg16_t X=0;
	LCD_Init();
 296:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Init>
	KeyPad_Init();
 29a:	0e 94 49 00 	call	0x92	; 0x92 <KeyPad_Init>
	GPIO_Init ( _PORTB,((PIN7|PIN6|PIN5|PIN4)),OutPut);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	60 ef       	ldi	r22, 0xF0	; 240
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GPIO_Init>
	GPIO_Init ( _PORTB,(PIN2),InPut);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GPIO_Init>
	Timer_Init(&gstr_Timer0Confing);
 2b2:	80 e6       	ldi	r24, 0x60	; 96
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 c2 01 	call	0x384	; 0x384 <Timer_Init>
    LCD_String("key");
 2ba:	86 e6       	ldi	r24, 0x66	; 102
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 20 01 	call	0x240	; 0x240 <LCD_String>

    while (1) 
    {
	   X=Key_KeyPressed();
 2c2:	0e 94 54 00 	call	0xa8	; 0xa8 <Key_KeyPressed>
 2c6:	ec 01       	movw	r28, r24
	   if(X<20)
 2c8:	44 97       	sbiw	r24, 0x14	; 20
 2ca:	d8 f7       	brcc	.-10     	; 0x2c2 <main+0x2c>
	   {
		  LCD_Clear();
 2cc:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Clear>
	  	  LCD_Int((int)X);
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Int>
 2d6:	f5 cf       	rjmp	.-22     	; 0x2c2 <main+0x2c>

000002d8 <GPIO_Init>:
/*EX: GPIO_Init ( _PORTA, PIN1,Input);
EX: GPIO_Init ( _PORTB, (PIN7| PIN0| PIN3),Onput);*/

genu_ERROR_t GPIO_Init (PORTX_t _PORTX,PIN_t PINX, GPIO_Mode PinMode)
{
	if(PinMode == OutPut)
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	e1 f4       	brne	.+56     	; 0x314 <GPIO_Init+0x3c>
	{
		switch(_PORTX)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	59 f0       	breq	.+22     	; 0x2f6 <GPIO_Init+0x1e>
 2e0:	28 f0       	brcs	.+10     	; 0x2ec <GPIO_Init+0x14>
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	69 f0       	breq	.+26     	; 0x300 <GPIO_Init+0x28>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	81 f0       	breq	.+32     	; 0x30a <GPIO_Init+0x32>
 2ea:	46 c0       	rjmp	.+140    	; 0x378 <GPIO_Init+0xa0>
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	68 2b       	or	r22, r24
 2f0:	6a bb       	out	0x1a, r22	; 26
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_PORTX)
		{
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
 2f4:	08 95       	ret
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	68 2b       	or	r22, r24
 2fa:	67 bb       	out	0x17, r22	; 23
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTA:
				SET_BITS(DDRA,PINX);/*make PINX OutPut*/
				break;
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
 2fe:	08 95       	ret
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
 300:	84 b3       	in	r24, 0x14	; 20
 302:	68 2b       	or	r22, r24
 304:	64 bb       	out	0x14, r22	; 20
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 306:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTB:
				SET_BITS(DDRB,PINX);/*make PINX OutPut*/
				break;
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
 308:	08 95       	ret
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
 30a:	81 b3       	in	r24, 0x11	; 17
 30c:	68 2b       	or	r22, r24
 30e:	61 bb       	out	0x11, r22	; 17
				break;
			default:
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
 310:	81 e0       	ldi	r24, 0x01	; 1
			case _PORTC:
				SET_BITS(DDRC,PINX);/*make PINX OutPut*/
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
 312:	08 95       	ret
				return DIO_ERROR_NOK;
				break;
		}	
		return DIO_ERROR_OK;
	}
	else if(PinMode == InPut)
 314:	41 11       	cpse	r20, r1
 316:	32 c0       	rjmp	.+100    	; 0x37c <GPIO_Init+0xa4>
	{
		switch(_PORTX)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	81 f0       	breq	.+32     	; 0x33c <GPIO_Init+0x64>
 31c:	28 f0       	brcs	.+10     	; 0x328 <GPIO_Init+0x50>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	b9 f0       	breq	.+46     	; 0x350 <GPIO_Init+0x78>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	f9 f0       	breq	.+62     	; 0x364 <GPIO_Init+0x8c>
 326:	2c c0       	rjmp	.+88     	; 0x380 <GPIO_Init+0xa8>
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
 328:	8a b3       	in	r24, 0x1a	; 26
 32a:	96 2f       	mov	r25, r22
 32c:	90 95       	com	r25
 32e:	89 23       	and	r24, r25
 330:	8a bb       	out	0x1a, r24	; 26
				SET_BITS(PORTA,PINX);/*Pull up*/
 332:	8b b3       	in	r24, 0x1b	; 27
 334:	68 2b       	or	r22, r24
 336:	6b bb       	out	0x1b, r22	; 27
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 338:	81 e0       	ldi	r24, 0x01	; 1
		switch(_PORTX)
		{
			case _PORTA:
				CLR_BITS(DDRA,PINX);/*make PINX Input*/
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
 33a:	08 95       	ret
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
 33c:	87 b3       	in	r24, 0x17	; 23
 33e:	96 2f       	mov	r25, r22
 340:	90 95       	com	r25
 342:	89 23       	and	r24, r25
 344:	87 bb       	out	0x17, r24	; 23
				SET_BITS(PORTB,PINX);/*Pull up*/
 346:	88 b3       	in	r24, 0x18	; 24
 348:	68 2b       	or	r22, r24
 34a:	68 bb       	out	0x18, r22	; 24
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 34c:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTA,PINX);/*Pull up*/
				break;
			case _PORTB:
				CLR_BITS(DDRB,PINX);/*make PINX Input*/
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
 34e:	08 95       	ret
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
 350:	84 b3       	in	r24, 0x14	; 20
 352:	96 2f       	mov	r25, r22
 354:	90 95       	com	r25
 356:	89 23       	and	r24, r25
 358:	84 bb       	out	0x14, r24	; 20
				SET_BITS(PORTC,PINX);/*Pull up*/
 35a:	85 b3       	in	r24, 0x15	; 21
 35c:	68 2b       	or	r22, r24
 35e:	65 bb       	out	0x15, r22	; 21
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 360:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTB,PINX);/*Pull up*/
				break;
			case _PORTC:
				CLR_BITS(DDRC,PINX);/*make PINX Input*/
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
 362:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
 364:	81 b3       	in	r24, 0x11	; 17
 366:	96 2f       	mov	r25, r22
 368:	90 95       	com	r25
 36a:	89 23       	and	r24, r25
 36c:	81 bb       	out	0x11, r24	; 17
				SET_BITS(PORTD,PINX);/*Pull up*/
 36e:	82 b3       	in	r24, 0x12	; 18
 370:	68 2b       	or	r22, r24
 372:	62 bb       	out	0x12, r22	; 18
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
 374:	81 e0       	ldi	r24, 0x01	; 1
				SET_BITS(PORTC,PINX);/*Pull up*/
				break;
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
 376:	08 95       	ret
				break;
			case _PORTD:
				SET_BITS(DDRD,PINX);/*make PINX OutPut*/
				break;
			default:
				return DIO_ERROR_NOK;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
			default:
				return DIO_ERROR_NOK;
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
			case _PORTD:
				CLR_BITS(DDRD,PINX);/*make PINX Input*/
				SET_BITS(PORTD,PINX);/*Pull up*/
				break;
			default:
				return DIO_ERROR_NOK;
 380:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	else{return DIO_ERROR_NOK;}
	return DIO_ERROR_OK;	
}
 382:	08 95       	ret

00000384 <Timer_Init>:
		default:
			return TIMER_ERROR_NOK;
			break;
	}
	return TIMER_ERROR_OK;
}
 384:	fc 01       	movw	r30, r24
 386:	89 2b       	or	r24, r25
 388:	09 f4       	brne	.+2      	; 0x38c <Timer_Init+0x8>
 38a:	4c c0       	rjmp	.+152    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	19 f0       	breq	.+6      	; 0x398 <Timer_Init+0x14>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	29 f1       	breq	.+74     	; 0x3e0 <Timer_Init+0x5c>
 396:	48 c0       	rjmp	.+144    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 398:	85 81       	ldd	r24, Z+5	; 0x05
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	39 f4       	brne	.+14     	; 0x3ac <Timer_Init+0x28>
 39e:	8f b7       	in	r24, 0x3f	; 63
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	8f bf       	out	0x3f, r24	; 63
 3a4:	89 b7       	in	r24, 0x39	; 57
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	89 bf       	out	0x39, r24	; 57
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <Timer_Init+0x2e>
 3ac:	89 b7       	in	r24, 0x39	; 57
 3ae:	8d 7f       	andi	r24, 0xFD	; 253
 3b0:	89 bf       	out	0x39, r24	; 57
 3b2:	84 81       	ldd	r24, Z+4	; 0x04
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	49 f4       	brne	.+18     	; 0x3ca <Timer_Init+0x46>
 3b8:	8f b7       	in	r24, 0x3f	; 63
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	8f bf       	out	0x3f, r24	; 63
 3be:	89 b7       	in	r24, 0x39	; 57
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	89 bf       	out	0x39, r24	; 57
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	89 bf       	out	0x39, r24	; 57
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <Timer_Init+0x4c>
 3ca:	89 b7       	in	r24, 0x39	; 57
 3cc:	8e 7f       	andi	r24, 0xFE	; 254
 3ce:	89 bf       	out	0x39, r24	; 57
 3d0:	92 81       	ldd	r25, Z+2	; 0x02
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	89 2b       	or	r24, r25
 3d6:	93 81       	ldd	r25, Z+3	; 0x03
 3d8:	89 2b       	or	r24, r25
 3da:	83 bf       	out	0x33, r24	; 51
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	08 95       	ret
 3e0:	85 81       	ldd	r24, Z+5	; 0x05
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	39 f4       	brne	.+14     	; 0x3f4 <Timer_Init+0x70>
 3e6:	8f b7       	in	r24, 0x3f	; 63
 3e8:	80 68       	ori	r24, 0x80	; 128
 3ea:	8f bf       	out	0x3f, r24	; 63
 3ec:	89 b7       	in	r24, 0x39	; 57
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	89 bf       	out	0x39, r24	; 57
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <Timer_Init+0x76>
 3f4:	89 b7       	in	r24, 0x39	; 57
 3f6:	8f 77       	andi	r24, 0x7F	; 127
 3f8:	89 bf       	out	0x39, r24	; 57
 3fa:	84 81       	ldd	r24, Z+4	; 0x04
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	39 f4       	brne	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	8f b7       	in	r24, 0x3f	; 63
 402:	80 68       	ori	r24, 0x80	; 128
 404:	8f bf       	out	0x3f, r24	; 63
 406:	89 b7       	in	r24, 0x39	; 57
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	89 bf       	out	0x39, r24	; 57
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40e:	89 b7       	in	r24, 0x39	; 57
 410:	8f 7b       	andi	r24, 0xBF	; 191
 412:	89 bf       	out	0x39, r24	; 57
 414:	92 81       	ldd	r25, Z+2	; 0x02
 416:	81 81       	ldd	r24, Z+1	; 0x01
 418:	89 2b       	or	r24, r25
 41a:	93 81       	ldd	r25, Z+3	; 0x03
 41c:	89 2b       	or	r24, r25
 41e:	85 bd       	out	0x25, r24	; 37
 420:	80 e1       	ldi	r24, 0x10	; 16
 422:	08 95       	ret
 424:	81 e1       	ldi	r24, 0x11	; 17
 426:	08 95       	ret
 428:	81 e1       	ldi	r24, 0x11	; 17
 42a:	08 95       	ret

0000042c <__vector_11>:

void __vector_11(void)
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
	gcallBack();
 44e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 452:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 456:	09 95       	icall
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_10>:
void __vector_10(void)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
	
}
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <itoa>:
 48e:	45 32       	cpi	r20, 0x25	; 37
 490:	51 05       	cpc	r21, r1
 492:	20 f4       	brcc	.+8      	; 0x49c <itoa+0xe>
 494:	42 30       	cpi	r20, 0x02	; 2
 496:	10 f0       	brcs	.+4      	; 0x49c <itoa+0xe>
 498:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__itoa_ncheck>
 49c:	fb 01       	movw	r30, r22
 49e:	10 82       	st	Z, r1
 4a0:	cb 01       	movw	r24, r22
 4a2:	08 95       	ret

000004a4 <__itoa_ncheck>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	4a 30       	cpi	r20, 0x0A	; 10
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <__itoa_ncheck+0x12>
 4aa:	99 23       	and	r25, r25
 4ac:	22 f4       	brpl	.+8      	; 0x4b6 <__itoa_ncheck+0x12>
 4ae:	bd e2       	ldi	r27, 0x2D	; 45
 4b0:	90 95       	com	r25
 4b2:	81 95       	neg	r24
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__utoa_common>

000004ba <__utoa_ncheck>:
 4ba:	bb 27       	eor	r27, r27

000004bc <__utoa_common>:
 4bc:	fb 01       	movw	r30, r22
 4be:	55 27       	eor	r21, r21
 4c0:	aa 27       	eor	r26, r26
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	aa 1f       	adc	r26, r26
 4c8:	a4 17       	cp	r26, r20
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__utoa_common+0x14>
 4cc:	a4 1b       	sub	r26, r20
 4ce:	83 95       	inc	r24
 4d0:	50 51       	subi	r21, 0x10	; 16
 4d2:	b9 f7       	brne	.-18     	; 0x4c2 <__utoa_common+0x6>
 4d4:	a0 5d       	subi	r26, 0xD0	; 208
 4d6:	aa 33       	cpi	r26, 0x3A	; 58
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__utoa_common+0x20>
 4da:	a9 5d       	subi	r26, 0xD9	; 217
 4dc:	a1 93       	st	Z+, r26
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	79 f7       	brne	.-34     	; 0x4c0 <__utoa_common+0x4>
 4e2:	b1 11       	cpse	r27, r1
 4e4:	b1 93       	st	Z+, r27
 4e6:	11 92       	st	Z+, r1
 4e8:	cb 01       	movw	r24, r22
 4ea:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <strrev>

000004ee <strrev>:
 4ee:	dc 01       	movw	r26, r24
 4f0:	fc 01       	movw	r30, r24
 4f2:	67 2f       	mov	r22, r23
 4f4:	71 91       	ld	r23, Z+
 4f6:	77 23       	and	r23, r23
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <strrev+0x4>
 4fa:	32 97       	sbiw	r30, 0x02	; 2
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <strrev+0x18>
 4fe:	7c 91       	ld	r23, X
 500:	6d 93       	st	X+, r22
 502:	70 83       	st	Z, r23
 504:	62 91       	ld	r22, -Z
 506:	ae 17       	cp	r26, r30
 508:	bf 07       	cpc	r27, r31
 50a:	c8 f3       	brcs	.-14     	; 0x4fe <strrev+0x10>
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
